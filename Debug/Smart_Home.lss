
Smart_Home.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000041b0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000198  00800060  000041b0  00004244  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000007  008001f8  008001f8  000043dc  2**0
                  ALLOC
  3 .stab         00003528  00000000  00000000  000043dc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001045  00000000  00000000  00007904  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000180  00000000  00000000  00008949  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001d3  00000000  00000000  00008ac9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000200f  00000000  00000000  00008c9c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001170  00000000  00000000  0000acab  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001001  00000000  00000000  0000be1b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001a0  00000000  00000000  0000ce1c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c1  00000000  00000000  0000cfbc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000008ae  00000000  00000000  0000d27d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000db2b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 f4 07 	jmp	0xfe8	; 0xfe8 <__vector_1>
       8:	0c 94 27 08 	jmp	0x104e	; 0x104e <__vector_2>
       c:	0c 94 5a 08 	jmp	0x10b4	; 0x10b4 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 eb       	ldi	r30, 0xB0	; 176
      68:	f1 e4       	ldi	r31, 0x41	; 65
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 3f       	cpi	r26, 0xF8	; 248
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a8 ef       	ldi	r26, 0xF8	; 248
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	af 3f       	cpi	r26, 0xFF	; 255
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 9a 1a 	call	0x3534	; 0x3534 <main>
      8a:	0c 94 d6 20 	jmp	0x41ac	; 0x41ac <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 9f 20 	jmp	0x413e	; 0x413e <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 ee       	ldi	r26, 0xE0	; 224
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 bb 20 	jmp	0x4176	; 0x4176 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 ab 20 	jmp	0x4156	; 0x4156 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 c5 04 	call	0x98a	; 0x98a <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 c7 20 	jmp	0x418e	; 0x418e <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 ab 20 	jmp	0x4156	; 0x4156 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 c5 04 	call	0x98a	; 0x98a <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 c7 20 	jmp	0x418e	; 0x418e <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 9f 20 	jmp	0x413e	; 0x413e <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 ee       	ldi	r24, 0xE0	; 224
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 c5 04 	call	0x98a	; 0x98a <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 bb 20 	jmp	0x4176	; 0x4176 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 ab 20 	jmp	0x4156	; 0x4156 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 12 06 	call	0xc24	; 0xc24 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 c7 20 	jmp	0x418e	; 0x418e <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 ab 20 	jmp	0x4156	; 0x4156 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 12 06 	call	0xc24	; 0xc24 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 c7 20 	jmp	0x418e	; 0x418e <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 ab 20 	jmp	0x4156	; 0x4156 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 12 06 	call	0xc24	; 0xc24 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 c7 20 	jmp	0x418e	; 0x418e <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 af 20 	jmp	0x415e	; 0x415e <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 cb 20 	jmp	0x4196	; 0x4196 <__epilogue_restores__+0x20>

000007fa <__floatunsisf>:
     7fa:	a8 e0       	ldi	r26, 0x08	; 8
     7fc:	b0 e0       	ldi	r27, 0x00	; 0
     7fe:	e3 e0       	ldi	r30, 0x03	; 3
     800:	f4 e0       	ldi	r31, 0x04	; 4
     802:	0c 94 a7 20 	jmp	0x414e	; 0x414e <__prologue_saves__+0x10>
     806:	7b 01       	movw	r14, r22
     808:	8c 01       	movw	r16, r24
     80a:	61 15       	cp	r22, r1
     80c:	71 05       	cpc	r23, r1
     80e:	81 05       	cpc	r24, r1
     810:	91 05       	cpc	r25, r1
     812:	19 f4       	brne	.+6      	; 0x81a <__floatunsisf+0x20>
     814:	82 e0       	ldi	r24, 0x02	; 2
     816:	89 83       	std	Y+1, r24	; 0x01
     818:	60 c0       	rjmp	.+192    	; 0x8da <__stack+0x7b>
     81a:	83 e0       	ldi	r24, 0x03	; 3
     81c:	89 83       	std	Y+1, r24	; 0x01
     81e:	8e e1       	ldi	r24, 0x1E	; 30
     820:	c8 2e       	mov	r12, r24
     822:	d1 2c       	mov	r13, r1
     824:	dc 82       	std	Y+4, r13	; 0x04
     826:	cb 82       	std	Y+3, r12	; 0x03
     828:	ed 82       	std	Y+5, r14	; 0x05
     82a:	fe 82       	std	Y+6, r15	; 0x06
     82c:	0f 83       	std	Y+7, r16	; 0x07
     82e:	18 87       	std	Y+8, r17	; 0x08
     830:	c8 01       	movw	r24, r16
     832:	b7 01       	movw	r22, r14
     834:	0e 94 76 04 	call	0x8ec	; 0x8ec <__clzsi2>
     838:	fc 01       	movw	r30, r24
     83a:	31 97       	sbiw	r30, 0x01	; 1
     83c:	f7 ff       	sbrs	r31, 7
     83e:	3b c0       	rjmp	.+118    	; 0x8b6 <__stack+0x57>
     840:	22 27       	eor	r18, r18
     842:	33 27       	eor	r19, r19
     844:	2e 1b       	sub	r18, r30
     846:	3f 0b       	sbc	r19, r31
     848:	57 01       	movw	r10, r14
     84a:	68 01       	movw	r12, r16
     84c:	02 2e       	mov	r0, r18
     84e:	04 c0       	rjmp	.+8      	; 0x858 <__floatunsisf+0x5e>
     850:	d6 94       	lsr	r13
     852:	c7 94       	ror	r12
     854:	b7 94       	ror	r11
     856:	a7 94       	ror	r10
     858:	0a 94       	dec	r0
     85a:	d2 f7       	brpl	.-12     	; 0x850 <__floatunsisf+0x56>
     85c:	40 e0       	ldi	r20, 0x00	; 0
     85e:	50 e0       	ldi	r21, 0x00	; 0
     860:	60 e0       	ldi	r22, 0x00	; 0
     862:	70 e0       	ldi	r23, 0x00	; 0
     864:	81 e0       	ldi	r24, 0x01	; 1
     866:	90 e0       	ldi	r25, 0x00	; 0
     868:	a0 e0       	ldi	r26, 0x00	; 0
     86a:	b0 e0       	ldi	r27, 0x00	; 0
     86c:	04 c0       	rjmp	.+8      	; 0x876 <__stack+0x17>
     86e:	88 0f       	add	r24, r24
     870:	99 1f       	adc	r25, r25
     872:	aa 1f       	adc	r26, r26
     874:	bb 1f       	adc	r27, r27
     876:	2a 95       	dec	r18
     878:	d2 f7       	brpl	.-12     	; 0x86e <__stack+0xf>
     87a:	01 97       	sbiw	r24, 0x01	; 1
     87c:	a1 09       	sbc	r26, r1
     87e:	b1 09       	sbc	r27, r1
     880:	8e 21       	and	r24, r14
     882:	9f 21       	and	r25, r15
     884:	a0 23       	and	r26, r16
     886:	b1 23       	and	r27, r17
     888:	00 97       	sbiw	r24, 0x00	; 0
     88a:	a1 05       	cpc	r26, r1
     88c:	b1 05       	cpc	r27, r1
     88e:	21 f0       	breq	.+8      	; 0x898 <__stack+0x39>
     890:	41 e0       	ldi	r20, 0x01	; 1
     892:	50 e0       	ldi	r21, 0x00	; 0
     894:	60 e0       	ldi	r22, 0x00	; 0
     896:	70 e0       	ldi	r23, 0x00	; 0
     898:	4a 29       	or	r20, r10
     89a:	5b 29       	or	r21, r11
     89c:	6c 29       	or	r22, r12
     89e:	7d 29       	or	r23, r13
     8a0:	4d 83       	std	Y+5, r20	; 0x05
     8a2:	5e 83       	std	Y+6, r21	; 0x06
     8a4:	6f 83       	std	Y+7, r22	; 0x07
     8a6:	78 87       	std	Y+8, r23	; 0x08
     8a8:	8e e1       	ldi	r24, 0x1E	; 30
     8aa:	90 e0       	ldi	r25, 0x00	; 0
     8ac:	8e 1b       	sub	r24, r30
     8ae:	9f 0b       	sbc	r25, r31
     8b0:	9c 83       	std	Y+4, r25	; 0x04
     8b2:	8b 83       	std	Y+3, r24	; 0x03
     8b4:	12 c0       	rjmp	.+36     	; 0x8da <__stack+0x7b>
     8b6:	30 97       	sbiw	r30, 0x00	; 0
     8b8:	81 f0       	breq	.+32     	; 0x8da <__stack+0x7b>
     8ba:	0e 2e       	mov	r0, r30
     8bc:	04 c0       	rjmp	.+8      	; 0x8c6 <__stack+0x67>
     8be:	ee 0c       	add	r14, r14
     8c0:	ff 1c       	adc	r15, r15
     8c2:	00 1f       	adc	r16, r16
     8c4:	11 1f       	adc	r17, r17
     8c6:	0a 94       	dec	r0
     8c8:	d2 f7       	brpl	.-12     	; 0x8be <__stack+0x5f>
     8ca:	ed 82       	std	Y+5, r14	; 0x05
     8cc:	fe 82       	std	Y+6, r15	; 0x06
     8ce:	0f 83       	std	Y+7, r16	; 0x07
     8d0:	18 87       	std	Y+8, r17	; 0x08
     8d2:	ce 1a       	sub	r12, r30
     8d4:	df 0a       	sbc	r13, r31
     8d6:	dc 82       	std	Y+4, r13	; 0x04
     8d8:	cb 82       	std	Y+3, r12	; 0x03
     8da:	1a 82       	std	Y+2, r1	; 0x02
     8dc:	ce 01       	movw	r24, r28
     8de:	01 96       	adiw	r24, 0x01	; 1
     8e0:	0e 94 c5 04 	call	0x98a	; 0x98a <__pack_f>
     8e4:	28 96       	adiw	r28, 0x08	; 8
     8e6:	ea e0       	ldi	r30, 0x0A	; 10
     8e8:	0c 94 c3 20 	jmp	0x4186	; 0x4186 <__epilogue_restores__+0x10>

000008ec <__clzsi2>:
     8ec:	ef 92       	push	r14
     8ee:	ff 92       	push	r15
     8f0:	0f 93       	push	r16
     8f2:	1f 93       	push	r17
     8f4:	7b 01       	movw	r14, r22
     8f6:	8c 01       	movw	r16, r24
     8f8:	80 e0       	ldi	r24, 0x00	; 0
     8fa:	e8 16       	cp	r14, r24
     8fc:	80 e0       	ldi	r24, 0x00	; 0
     8fe:	f8 06       	cpc	r15, r24
     900:	81 e0       	ldi	r24, 0x01	; 1
     902:	08 07       	cpc	r16, r24
     904:	80 e0       	ldi	r24, 0x00	; 0
     906:	18 07       	cpc	r17, r24
     908:	88 f4       	brcc	.+34     	; 0x92c <__clzsi2+0x40>
     90a:	8f ef       	ldi	r24, 0xFF	; 255
     90c:	e8 16       	cp	r14, r24
     90e:	f1 04       	cpc	r15, r1
     910:	01 05       	cpc	r16, r1
     912:	11 05       	cpc	r17, r1
     914:	31 f0       	breq	.+12     	; 0x922 <__clzsi2+0x36>
     916:	28 f0       	brcs	.+10     	; 0x922 <__clzsi2+0x36>
     918:	88 e0       	ldi	r24, 0x08	; 8
     91a:	90 e0       	ldi	r25, 0x00	; 0
     91c:	a0 e0       	ldi	r26, 0x00	; 0
     91e:	b0 e0       	ldi	r27, 0x00	; 0
     920:	17 c0       	rjmp	.+46     	; 0x950 <__clzsi2+0x64>
     922:	80 e0       	ldi	r24, 0x00	; 0
     924:	90 e0       	ldi	r25, 0x00	; 0
     926:	a0 e0       	ldi	r26, 0x00	; 0
     928:	b0 e0       	ldi	r27, 0x00	; 0
     92a:	12 c0       	rjmp	.+36     	; 0x950 <__clzsi2+0x64>
     92c:	80 e0       	ldi	r24, 0x00	; 0
     92e:	e8 16       	cp	r14, r24
     930:	80 e0       	ldi	r24, 0x00	; 0
     932:	f8 06       	cpc	r15, r24
     934:	80 e0       	ldi	r24, 0x00	; 0
     936:	08 07       	cpc	r16, r24
     938:	81 e0       	ldi	r24, 0x01	; 1
     93a:	18 07       	cpc	r17, r24
     93c:	28 f0       	brcs	.+10     	; 0x948 <__clzsi2+0x5c>
     93e:	88 e1       	ldi	r24, 0x18	; 24
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	04 c0       	rjmp	.+8      	; 0x950 <__clzsi2+0x64>
     948:	80 e1       	ldi	r24, 0x10	; 16
     94a:	90 e0       	ldi	r25, 0x00	; 0
     94c:	a0 e0       	ldi	r26, 0x00	; 0
     94e:	b0 e0       	ldi	r27, 0x00	; 0
     950:	20 e2       	ldi	r18, 0x20	; 32
     952:	30 e0       	ldi	r19, 0x00	; 0
     954:	40 e0       	ldi	r20, 0x00	; 0
     956:	50 e0       	ldi	r21, 0x00	; 0
     958:	28 1b       	sub	r18, r24
     95a:	39 0b       	sbc	r19, r25
     95c:	4a 0b       	sbc	r20, r26
     95e:	5b 0b       	sbc	r21, r27
     960:	04 c0       	rjmp	.+8      	; 0x96a <__clzsi2+0x7e>
     962:	16 95       	lsr	r17
     964:	07 95       	ror	r16
     966:	f7 94       	ror	r15
     968:	e7 94       	ror	r14
     96a:	8a 95       	dec	r24
     96c:	d2 f7       	brpl	.-12     	; 0x962 <__clzsi2+0x76>
     96e:	f7 01       	movw	r30, r14
     970:	e8 51       	subi	r30, 0x18	; 24
     972:	ff 4f       	sbci	r31, 0xFF	; 255
     974:	80 81       	ld	r24, Z
     976:	28 1b       	sub	r18, r24
     978:	31 09       	sbc	r19, r1
     97a:	41 09       	sbc	r20, r1
     97c:	51 09       	sbc	r21, r1
     97e:	c9 01       	movw	r24, r18
     980:	1f 91       	pop	r17
     982:	0f 91       	pop	r16
     984:	ff 90       	pop	r15
     986:	ef 90       	pop	r14
     988:	08 95       	ret

0000098a <__pack_f>:
     98a:	df 92       	push	r13
     98c:	ef 92       	push	r14
     98e:	ff 92       	push	r15
     990:	0f 93       	push	r16
     992:	1f 93       	push	r17
     994:	fc 01       	movw	r30, r24
     996:	e4 80       	ldd	r14, Z+4	; 0x04
     998:	f5 80       	ldd	r15, Z+5	; 0x05
     99a:	06 81       	ldd	r16, Z+6	; 0x06
     99c:	17 81       	ldd	r17, Z+7	; 0x07
     99e:	d1 80       	ldd	r13, Z+1	; 0x01
     9a0:	80 81       	ld	r24, Z
     9a2:	82 30       	cpi	r24, 0x02	; 2
     9a4:	48 f4       	brcc	.+18     	; 0x9b8 <__pack_f+0x2e>
     9a6:	80 e0       	ldi	r24, 0x00	; 0
     9a8:	90 e0       	ldi	r25, 0x00	; 0
     9aa:	a0 e1       	ldi	r26, 0x10	; 16
     9ac:	b0 e0       	ldi	r27, 0x00	; 0
     9ae:	e8 2a       	or	r14, r24
     9b0:	f9 2a       	or	r15, r25
     9b2:	0a 2b       	or	r16, r26
     9b4:	1b 2b       	or	r17, r27
     9b6:	a5 c0       	rjmp	.+330    	; 0xb02 <__pack_f+0x178>
     9b8:	84 30       	cpi	r24, 0x04	; 4
     9ba:	09 f4       	brne	.+2      	; 0x9be <__pack_f+0x34>
     9bc:	9f c0       	rjmp	.+318    	; 0xafc <__pack_f+0x172>
     9be:	82 30       	cpi	r24, 0x02	; 2
     9c0:	21 f4       	brne	.+8      	; 0x9ca <__pack_f+0x40>
     9c2:	ee 24       	eor	r14, r14
     9c4:	ff 24       	eor	r15, r15
     9c6:	87 01       	movw	r16, r14
     9c8:	05 c0       	rjmp	.+10     	; 0x9d4 <__pack_f+0x4a>
     9ca:	e1 14       	cp	r14, r1
     9cc:	f1 04       	cpc	r15, r1
     9ce:	01 05       	cpc	r16, r1
     9d0:	11 05       	cpc	r17, r1
     9d2:	19 f4       	brne	.+6      	; 0x9da <__pack_f+0x50>
     9d4:	e0 e0       	ldi	r30, 0x00	; 0
     9d6:	f0 e0       	ldi	r31, 0x00	; 0
     9d8:	96 c0       	rjmp	.+300    	; 0xb06 <__pack_f+0x17c>
     9da:	62 81       	ldd	r22, Z+2	; 0x02
     9dc:	73 81       	ldd	r23, Z+3	; 0x03
     9de:	9f ef       	ldi	r25, 0xFF	; 255
     9e0:	62 38       	cpi	r22, 0x82	; 130
     9e2:	79 07       	cpc	r23, r25
     9e4:	0c f0       	brlt	.+2      	; 0x9e8 <__pack_f+0x5e>
     9e6:	5b c0       	rjmp	.+182    	; 0xa9e <__pack_f+0x114>
     9e8:	22 e8       	ldi	r18, 0x82	; 130
     9ea:	3f ef       	ldi	r19, 0xFF	; 255
     9ec:	26 1b       	sub	r18, r22
     9ee:	37 0b       	sbc	r19, r23
     9f0:	2a 31       	cpi	r18, 0x1A	; 26
     9f2:	31 05       	cpc	r19, r1
     9f4:	2c f0       	brlt	.+10     	; 0xa00 <__pack_f+0x76>
     9f6:	20 e0       	ldi	r18, 0x00	; 0
     9f8:	30 e0       	ldi	r19, 0x00	; 0
     9fa:	40 e0       	ldi	r20, 0x00	; 0
     9fc:	50 e0       	ldi	r21, 0x00	; 0
     9fe:	2a c0       	rjmp	.+84     	; 0xa54 <__pack_f+0xca>
     a00:	b8 01       	movw	r22, r16
     a02:	a7 01       	movw	r20, r14
     a04:	02 2e       	mov	r0, r18
     a06:	04 c0       	rjmp	.+8      	; 0xa10 <__pack_f+0x86>
     a08:	76 95       	lsr	r23
     a0a:	67 95       	ror	r22
     a0c:	57 95       	ror	r21
     a0e:	47 95       	ror	r20
     a10:	0a 94       	dec	r0
     a12:	d2 f7       	brpl	.-12     	; 0xa08 <__pack_f+0x7e>
     a14:	81 e0       	ldi	r24, 0x01	; 1
     a16:	90 e0       	ldi	r25, 0x00	; 0
     a18:	a0 e0       	ldi	r26, 0x00	; 0
     a1a:	b0 e0       	ldi	r27, 0x00	; 0
     a1c:	04 c0       	rjmp	.+8      	; 0xa26 <__pack_f+0x9c>
     a1e:	88 0f       	add	r24, r24
     a20:	99 1f       	adc	r25, r25
     a22:	aa 1f       	adc	r26, r26
     a24:	bb 1f       	adc	r27, r27
     a26:	2a 95       	dec	r18
     a28:	d2 f7       	brpl	.-12     	; 0xa1e <__pack_f+0x94>
     a2a:	01 97       	sbiw	r24, 0x01	; 1
     a2c:	a1 09       	sbc	r26, r1
     a2e:	b1 09       	sbc	r27, r1
     a30:	8e 21       	and	r24, r14
     a32:	9f 21       	and	r25, r15
     a34:	a0 23       	and	r26, r16
     a36:	b1 23       	and	r27, r17
     a38:	00 97       	sbiw	r24, 0x00	; 0
     a3a:	a1 05       	cpc	r26, r1
     a3c:	b1 05       	cpc	r27, r1
     a3e:	21 f0       	breq	.+8      	; 0xa48 <__pack_f+0xbe>
     a40:	81 e0       	ldi	r24, 0x01	; 1
     a42:	90 e0       	ldi	r25, 0x00	; 0
     a44:	a0 e0       	ldi	r26, 0x00	; 0
     a46:	b0 e0       	ldi	r27, 0x00	; 0
     a48:	9a 01       	movw	r18, r20
     a4a:	ab 01       	movw	r20, r22
     a4c:	28 2b       	or	r18, r24
     a4e:	39 2b       	or	r19, r25
     a50:	4a 2b       	or	r20, r26
     a52:	5b 2b       	or	r21, r27
     a54:	da 01       	movw	r26, r20
     a56:	c9 01       	movw	r24, r18
     a58:	8f 77       	andi	r24, 0x7F	; 127
     a5a:	90 70       	andi	r25, 0x00	; 0
     a5c:	a0 70       	andi	r26, 0x00	; 0
     a5e:	b0 70       	andi	r27, 0x00	; 0
     a60:	80 34       	cpi	r24, 0x40	; 64
     a62:	91 05       	cpc	r25, r1
     a64:	a1 05       	cpc	r26, r1
     a66:	b1 05       	cpc	r27, r1
     a68:	39 f4       	brne	.+14     	; 0xa78 <__pack_f+0xee>
     a6a:	27 ff       	sbrs	r18, 7
     a6c:	09 c0       	rjmp	.+18     	; 0xa80 <__pack_f+0xf6>
     a6e:	20 5c       	subi	r18, 0xC0	; 192
     a70:	3f 4f       	sbci	r19, 0xFF	; 255
     a72:	4f 4f       	sbci	r20, 0xFF	; 255
     a74:	5f 4f       	sbci	r21, 0xFF	; 255
     a76:	04 c0       	rjmp	.+8      	; 0xa80 <__pack_f+0xf6>
     a78:	21 5c       	subi	r18, 0xC1	; 193
     a7a:	3f 4f       	sbci	r19, 0xFF	; 255
     a7c:	4f 4f       	sbci	r20, 0xFF	; 255
     a7e:	5f 4f       	sbci	r21, 0xFF	; 255
     a80:	e0 e0       	ldi	r30, 0x00	; 0
     a82:	f0 e0       	ldi	r31, 0x00	; 0
     a84:	20 30       	cpi	r18, 0x00	; 0
     a86:	a0 e0       	ldi	r26, 0x00	; 0
     a88:	3a 07       	cpc	r19, r26
     a8a:	a0 e0       	ldi	r26, 0x00	; 0
     a8c:	4a 07       	cpc	r20, r26
     a8e:	a0 e4       	ldi	r26, 0x40	; 64
     a90:	5a 07       	cpc	r21, r26
     a92:	10 f0       	brcs	.+4      	; 0xa98 <__pack_f+0x10e>
     a94:	e1 e0       	ldi	r30, 0x01	; 1
     a96:	f0 e0       	ldi	r31, 0x00	; 0
     a98:	79 01       	movw	r14, r18
     a9a:	8a 01       	movw	r16, r20
     a9c:	27 c0       	rjmp	.+78     	; 0xaec <__pack_f+0x162>
     a9e:	60 38       	cpi	r22, 0x80	; 128
     aa0:	71 05       	cpc	r23, r1
     aa2:	64 f5       	brge	.+88     	; 0xafc <__pack_f+0x172>
     aa4:	fb 01       	movw	r30, r22
     aa6:	e1 58       	subi	r30, 0x81	; 129
     aa8:	ff 4f       	sbci	r31, 0xFF	; 255
     aaa:	d8 01       	movw	r26, r16
     aac:	c7 01       	movw	r24, r14
     aae:	8f 77       	andi	r24, 0x7F	; 127
     ab0:	90 70       	andi	r25, 0x00	; 0
     ab2:	a0 70       	andi	r26, 0x00	; 0
     ab4:	b0 70       	andi	r27, 0x00	; 0
     ab6:	80 34       	cpi	r24, 0x40	; 64
     ab8:	91 05       	cpc	r25, r1
     aba:	a1 05       	cpc	r26, r1
     abc:	b1 05       	cpc	r27, r1
     abe:	39 f4       	brne	.+14     	; 0xace <__pack_f+0x144>
     ac0:	e7 fe       	sbrs	r14, 7
     ac2:	0d c0       	rjmp	.+26     	; 0xade <__pack_f+0x154>
     ac4:	80 e4       	ldi	r24, 0x40	; 64
     ac6:	90 e0       	ldi	r25, 0x00	; 0
     ac8:	a0 e0       	ldi	r26, 0x00	; 0
     aca:	b0 e0       	ldi	r27, 0x00	; 0
     acc:	04 c0       	rjmp	.+8      	; 0xad6 <__pack_f+0x14c>
     ace:	8f e3       	ldi	r24, 0x3F	; 63
     ad0:	90 e0       	ldi	r25, 0x00	; 0
     ad2:	a0 e0       	ldi	r26, 0x00	; 0
     ad4:	b0 e0       	ldi	r27, 0x00	; 0
     ad6:	e8 0e       	add	r14, r24
     ad8:	f9 1e       	adc	r15, r25
     ada:	0a 1f       	adc	r16, r26
     adc:	1b 1f       	adc	r17, r27
     ade:	17 ff       	sbrs	r17, 7
     ae0:	05 c0       	rjmp	.+10     	; 0xaec <__pack_f+0x162>
     ae2:	16 95       	lsr	r17
     ae4:	07 95       	ror	r16
     ae6:	f7 94       	ror	r15
     ae8:	e7 94       	ror	r14
     aea:	31 96       	adiw	r30, 0x01	; 1
     aec:	87 e0       	ldi	r24, 0x07	; 7
     aee:	16 95       	lsr	r17
     af0:	07 95       	ror	r16
     af2:	f7 94       	ror	r15
     af4:	e7 94       	ror	r14
     af6:	8a 95       	dec	r24
     af8:	d1 f7       	brne	.-12     	; 0xaee <__pack_f+0x164>
     afa:	05 c0       	rjmp	.+10     	; 0xb06 <__pack_f+0x17c>
     afc:	ee 24       	eor	r14, r14
     afe:	ff 24       	eor	r15, r15
     b00:	87 01       	movw	r16, r14
     b02:	ef ef       	ldi	r30, 0xFF	; 255
     b04:	f0 e0       	ldi	r31, 0x00	; 0
     b06:	6e 2f       	mov	r22, r30
     b08:	67 95       	ror	r22
     b0a:	66 27       	eor	r22, r22
     b0c:	67 95       	ror	r22
     b0e:	90 2f       	mov	r25, r16
     b10:	9f 77       	andi	r25, 0x7F	; 127
     b12:	d7 94       	ror	r13
     b14:	dd 24       	eor	r13, r13
     b16:	d7 94       	ror	r13
     b18:	8e 2f       	mov	r24, r30
     b1a:	86 95       	lsr	r24
     b1c:	49 2f       	mov	r20, r25
     b1e:	46 2b       	or	r20, r22
     b20:	58 2f       	mov	r21, r24
     b22:	5d 29       	or	r21, r13
     b24:	b7 01       	movw	r22, r14
     b26:	ca 01       	movw	r24, r20
     b28:	1f 91       	pop	r17
     b2a:	0f 91       	pop	r16
     b2c:	ff 90       	pop	r15
     b2e:	ef 90       	pop	r14
     b30:	df 90       	pop	r13
     b32:	08 95       	ret

00000b34 <__unpack_f>:
     b34:	fc 01       	movw	r30, r24
     b36:	db 01       	movw	r26, r22
     b38:	40 81       	ld	r20, Z
     b3a:	51 81       	ldd	r21, Z+1	; 0x01
     b3c:	22 81       	ldd	r18, Z+2	; 0x02
     b3e:	62 2f       	mov	r22, r18
     b40:	6f 77       	andi	r22, 0x7F	; 127
     b42:	70 e0       	ldi	r23, 0x00	; 0
     b44:	22 1f       	adc	r18, r18
     b46:	22 27       	eor	r18, r18
     b48:	22 1f       	adc	r18, r18
     b4a:	93 81       	ldd	r25, Z+3	; 0x03
     b4c:	89 2f       	mov	r24, r25
     b4e:	88 0f       	add	r24, r24
     b50:	82 2b       	or	r24, r18
     b52:	28 2f       	mov	r18, r24
     b54:	30 e0       	ldi	r19, 0x00	; 0
     b56:	99 1f       	adc	r25, r25
     b58:	99 27       	eor	r25, r25
     b5a:	99 1f       	adc	r25, r25
     b5c:	11 96       	adiw	r26, 0x01	; 1
     b5e:	9c 93       	st	X, r25
     b60:	11 97       	sbiw	r26, 0x01	; 1
     b62:	21 15       	cp	r18, r1
     b64:	31 05       	cpc	r19, r1
     b66:	a9 f5       	brne	.+106    	; 0xbd2 <__unpack_f+0x9e>
     b68:	41 15       	cp	r20, r1
     b6a:	51 05       	cpc	r21, r1
     b6c:	61 05       	cpc	r22, r1
     b6e:	71 05       	cpc	r23, r1
     b70:	11 f4       	brne	.+4      	; 0xb76 <__unpack_f+0x42>
     b72:	82 e0       	ldi	r24, 0x02	; 2
     b74:	37 c0       	rjmp	.+110    	; 0xbe4 <__unpack_f+0xb0>
     b76:	82 e8       	ldi	r24, 0x82	; 130
     b78:	9f ef       	ldi	r25, 0xFF	; 255
     b7a:	13 96       	adiw	r26, 0x03	; 3
     b7c:	9c 93       	st	X, r25
     b7e:	8e 93       	st	-X, r24
     b80:	12 97       	sbiw	r26, 0x02	; 2
     b82:	9a 01       	movw	r18, r20
     b84:	ab 01       	movw	r20, r22
     b86:	67 e0       	ldi	r22, 0x07	; 7
     b88:	22 0f       	add	r18, r18
     b8a:	33 1f       	adc	r19, r19
     b8c:	44 1f       	adc	r20, r20
     b8e:	55 1f       	adc	r21, r21
     b90:	6a 95       	dec	r22
     b92:	d1 f7       	brne	.-12     	; 0xb88 <__unpack_f+0x54>
     b94:	83 e0       	ldi	r24, 0x03	; 3
     b96:	8c 93       	st	X, r24
     b98:	0d c0       	rjmp	.+26     	; 0xbb4 <__unpack_f+0x80>
     b9a:	22 0f       	add	r18, r18
     b9c:	33 1f       	adc	r19, r19
     b9e:	44 1f       	adc	r20, r20
     ba0:	55 1f       	adc	r21, r21
     ba2:	12 96       	adiw	r26, 0x02	; 2
     ba4:	8d 91       	ld	r24, X+
     ba6:	9c 91       	ld	r25, X
     ba8:	13 97       	sbiw	r26, 0x03	; 3
     baa:	01 97       	sbiw	r24, 0x01	; 1
     bac:	13 96       	adiw	r26, 0x03	; 3
     bae:	9c 93       	st	X, r25
     bb0:	8e 93       	st	-X, r24
     bb2:	12 97       	sbiw	r26, 0x02	; 2
     bb4:	20 30       	cpi	r18, 0x00	; 0
     bb6:	80 e0       	ldi	r24, 0x00	; 0
     bb8:	38 07       	cpc	r19, r24
     bba:	80 e0       	ldi	r24, 0x00	; 0
     bbc:	48 07       	cpc	r20, r24
     bbe:	80 e4       	ldi	r24, 0x40	; 64
     bc0:	58 07       	cpc	r21, r24
     bc2:	58 f3       	brcs	.-42     	; 0xb9a <__unpack_f+0x66>
     bc4:	14 96       	adiw	r26, 0x04	; 4
     bc6:	2d 93       	st	X+, r18
     bc8:	3d 93       	st	X+, r19
     bca:	4d 93       	st	X+, r20
     bcc:	5c 93       	st	X, r21
     bce:	17 97       	sbiw	r26, 0x07	; 7
     bd0:	08 95       	ret
     bd2:	2f 3f       	cpi	r18, 0xFF	; 255
     bd4:	31 05       	cpc	r19, r1
     bd6:	79 f4       	brne	.+30     	; 0xbf6 <__unpack_f+0xc2>
     bd8:	41 15       	cp	r20, r1
     bda:	51 05       	cpc	r21, r1
     bdc:	61 05       	cpc	r22, r1
     bde:	71 05       	cpc	r23, r1
     be0:	19 f4       	brne	.+6      	; 0xbe8 <__unpack_f+0xb4>
     be2:	84 e0       	ldi	r24, 0x04	; 4
     be4:	8c 93       	st	X, r24
     be6:	08 95       	ret
     be8:	64 ff       	sbrs	r22, 4
     bea:	03 c0       	rjmp	.+6      	; 0xbf2 <__unpack_f+0xbe>
     bec:	81 e0       	ldi	r24, 0x01	; 1
     bee:	8c 93       	st	X, r24
     bf0:	12 c0       	rjmp	.+36     	; 0xc16 <__unpack_f+0xe2>
     bf2:	1c 92       	st	X, r1
     bf4:	10 c0       	rjmp	.+32     	; 0xc16 <__unpack_f+0xe2>
     bf6:	2f 57       	subi	r18, 0x7F	; 127
     bf8:	30 40       	sbci	r19, 0x00	; 0
     bfa:	13 96       	adiw	r26, 0x03	; 3
     bfc:	3c 93       	st	X, r19
     bfe:	2e 93       	st	-X, r18
     c00:	12 97       	sbiw	r26, 0x02	; 2
     c02:	83 e0       	ldi	r24, 0x03	; 3
     c04:	8c 93       	st	X, r24
     c06:	87 e0       	ldi	r24, 0x07	; 7
     c08:	44 0f       	add	r20, r20
     c0a:	55 1f       	adc	r21, r21
     c0c:	66 1f       	adc	r22, r22
     c0e:	77 1f       	adc	r23, r23
     c10:	8a 95       	dec	r24
     c12:	d1 f7       	brne	.-12     	; 0xc08 <__unpack_f+0xd4>
     c14:	70 64       	ori	r23, 0x40	; 64
     c16:	14 96       	adiw	r26, 0x04	; 4
     c18:	4d 93       	st	X+, r20
     c1a:	5d 93       	st	X+, r21
     c1c:	6d 93       	st	X+, r22
     c1e:	7c 93       	st	X, r23
     c20:	17 97       	sbiw	r26, 0x07	; 7
     c22:	08 95       	ret

00000c24 <__fpcmp_parts_f>:
     c24:	1f 93       	push	r17
     c26:	dc 01       	movw	r26, r24
     c28:	fb 01       	movw	r30, r22
     c2a:	9c 91       	ld	r25, X
     c2c:	92 30       	cpi	r25, 0x02	; 2
     c2e:	08 f4       	brcc	.+2      	; 0xc32 <__fpcmp_parts_f+0xe>
     c30:	47 c0       	rjmp	.+142    	; 0xcc0 <__fpcmp_parts_f+0x9c>
     c32:	80 81       	ld	r24, Z
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	08 f4       	brcc	.+2      	; 0xc3a <__fpcmp_parts_f+0x16>
     c38:	43 c0       	rjmp	.+134    	; 0xcc0 <__fpcmp_parts_f+0x9c>
     c3a:	94 30       	cpi	r25, 0x04	; 4
     c3c:	51 f4       	brne	.+20     	; 0xc52 <__fpcmp_parts_f+0x2e>
     c3e:	11 96       	adiw	r26, 0x01	; 1
     c40:	1c 91       	ld	r17, X
     c42:	84 30       	cpi	r24, 0x04	; 4
     c44:	99 f5       	brne	.+102    	; 0xcac <__fpcmp_parts_f+0x88>
     c46:	81 81       	ldd	r24, Z+1	; 0x01
     c48:	68 2f       	mov	r22, r24
     c4a:	70 e0       	ldi	r23, 0x00	; 0
     c4c:	61 1b       	sub	r22, r17
     c4e:	71 09       	sbc	r23, r1
     c50:	3f c0       	rjmp	.+126    	; 0xcd0 <__fpcmp_parts_f+0xac>
     c52:	84 30       	cpi	r24, 0x04	; 4
     c54:	21 f0       	breq	.+8      	; 0xc5e <__fpcmp_parts_f+0x3a>
     c56:	92 30       	cpi	r25, 0x02	; 2
     c58:	31 f4       	brne	.+12     	; 0xc66 <__fpcmp_parts_f+0x42>
     c5a:	82 30       	cpi	r24, 0x02	; 2
     c5c:	b9 f1       	breq	.+110    	; 0xccc <__fpcmp_parts_f+0xa8>
     c5e:	81 81       	ldd	r24, Z+1	; 0x01
     c60:	88 23       	and	r24, r24
     c62:	89 f1       	breq	.+98     	; 0xcc6 <__fpcmp_parts_f+0xa2>
     c64:	2d c0       	rjmp	.+90     	; 0xcc0 <__fpcmp_parts_f+0x9c>
     c66:	11 96       	adiw	r26, 0x01	; 1
     c68:	1c 91       	ld	r17, X
     c6a:	11 97       	sbiw	r26, 0x01	; 1
     c6c:	82 30       	cpi	r24, 0x02	; 2
     c6e:	f1 f0       	breq	.+60     	; 0xcac <__fpcmp_parts_f+0x88>
     c70:	81 81       	ldd	r24, Z+1	; 0x01
     c72:	18 17       	cp	r17, r24
     c74:	d9 f4       	brne	.+54     	; 0xcac <__fpcmp_parts_f+0x88>
     c76:	12 96       	adiw	r26, 0x02	; 2
     c78:	2d 91       	ld	r18, X+
     c7a:	3c 91       	ld	r19, X
     c7c:	13 97       	sbiw	r26, 0x03	; 3
     c7e:	82 81       	ldd	r24, Z+2	; 0x02
     c80:	93 81       	ldd	r25, Z+3	; 0x03
     c82:	82 17       	cp	r24, r18
     c84:	93 07       	cpc	r25, r19
     c86:	94 f0       	brlt	.+36     	; 0xcac <__fpcmp_parts_f+0x88>
     c88:	28 17       	cp	r18, r24
     c8a:	39 07       	cpc	r19, r25
     c8c:	bc f0       	brlt	.+46     	; 0xcbc <__fpcmp_parts_f+0x98>
     c8e:	14 96       	adiw	r26, 0x04	; 4
     c90:	8d 91       	ld	r24, X+
     c92:	9d 91       	ld	r25, X+
     c94:	0d 90       	ld	r0, X+
     c96:	bc 91       	ld	r27, X
     c98:	a0 2d       	mov	r26, r0
     c9a:	24 81       	ldd	r18, Z+4	; 0x04
     c9c:	35 81       	ldd	r19, Z+5	; 0x05
     c9e:	46 81       	ldd	r20, Z+6	; 0x06
     ca0:	57 81       	ldd	r21, Z+7	; 0x07
     ca2:	28 17       	cp	r18, r24
     ca4:	39 07       	cpc	r19, r25
     ca6:	4a 07       	cpc	r20, r26
     ca8:	5b 07       	cpc	r21, r27
     caa:	18 f4       	brcc	.+6      	; 0xcb2 <__fpcmp_parts_f+0x8e>
     cac:	11 23       	and	r17, r17
     cae:	41 f0       	breq	.+16     	; 0xcc0 <__fpcmp_parts_f+0x9c>
     cb0:	0a c0       	rjmp	.+20     	; 0xcc6 <__fpcmp_parts_f+0xa2>
     cb2:	82 17       	cp	r24, r18
     cb4:	93 07       	cpc	r25, r19
     cb6:	a4 07       	cpc	r26, r20
     cb8:	b5 07       	cpc	r27, r21
     cba:	40 f4       	brcc	.+16     	; 0xccc <__fpcmp_parts_f+0xa8>
     cbc:	11 23       	and	r17, r17
     cbe:	19 f0       	breq	.+6      	; 0xcc6 <__fpcmp_parts_f+0xa2>
     cc0:	61 e0       	ldi	r22, 0x01	; 1
     cc2:	70 e0       	ldi	r23, 0x00	; 0
     cc4:	05 c0       	rjmp	.+10     	; 0xcd0 <__fpcmp_parts_f+0xac>
     cc6:	6f ef       	ldi	r22, 0xFF	; 255
     cc8:	7f ef       	ldi	r23, 0xFF	; 255
     cca:	02 c0       	rjmp	.+4      	; 0xcd0 <__fpcmp_parts_f+0xac>
     ccc:	60 e0       	ldi	r22, 0x00	; 0
     cce:	70 e0       	ldi	r23, 0x00	; 0
     cd0:	cb 01       	movw	r24, r22
     cd2:	1f 91       	pop	r17
     cd4:	08 95       	ret

00000cd6 <GIE_voidEnableGlobal>:
#include "GIE_REG.h"
#include "GIE_INT.h"


void GIE_voidEnableGlobal()
{
     cd6:	df 93       	push	r29
     cd8:	cf 93       	push	r28
     cda:	cd b7       	in	r28, 0x3d	; 61
     cdc:	de b7       	in	r29, 0x3e	; 62
	//SET_BIT(SREG,SREG_I);
	SET_BIT(SREG,SREG_I);
     cde:	af e5       	ldi	r26, 0x5F	; 95
     ce0:	b0 e0       	ldi	r27, 0x00	; 0
     ce2:	ef e5       	ldi	r30, 0x5F	; 95
     ce4:	f0 e0       	ldi	r31, 0x00	; 0
     ce6:	80 81       	ld	r24, Z
     ce8:	80 68       	ori	r24, 0x80	; 128
     cea:	8c 93       	st	X, r24
}
     cec:	cf 91       	pop	r28
     cee:	df 91       	pop	r29
     cf0:	08 95       	ret

00000cf2 <GIE_voidDisableGlobal>:

void GIE_voidDisableGlobal()
{
     cf2:	df 93       	push	r29
     cf4:	cf 93       	push	r28
     cf6:	cd b7       	in	r28, 0x3d	; 61
     cf8:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG,SREG_I);
     cfa:	af e5       	ldi	r26, 0x5F	; 95
     cfc:	b0 e0       	ldi	r27, 0x00	; 0
     cfe:	ef e5       	ldi	r30, 0x5F	; 95
     d00:	f0 e0       	ldi	r31, 0x00	; 0
     d02:	80 81       	ld	r24, Z
     d04:	8f 77       	andi	r24, 0x7F	; 127
     d06:	8c 93       	st	X, r24
}
     d08:	cf 91       	pop	r28
     d0a:	df 91       	pop	r29
     d0c:	08 95       	ret

00000d0e <EXTI_voidINT0Init>:

/*Define Global array of 3 pointers to functions to carry ISR application addresses*/
static void (*EXTI_pvINTCallBackFunc[3])(void) = {NULL};

void EXTI_voidINT0Init()
{
     d0e:	df 93       	push	r29
     d10:	cf 93       	push	r28
     d12:	cd b7       	in	r28, 0x3d	; 61
     d14:	de b7       	in	r29, 0x3e	; 62
#if EXTI_INT0_SENSE == LOW_LEVEL
	CLR(MCUCR,MCUCR_ISC00);
	CLR(MCUCR,MCUCR_ISC01);

#elif EXTI_INT0_SENSE == ON_CHANGE
	SET_BIT(MCUCR,MCUCR_ISC00);
     d16:	a5 e5       	ldi	r26, 0x55	; 85
     d18:	b0 e0       	ldi	r27, 0x00	; 0
     d1a:	e5 e5       	ldi	r30, 0x55	; 85
     d1c:	f0 e0       	ldi	r31, 0x00	; 0
     d1e:	80 81       	ld	r24, Z
     d20:	81 60       	ori	r24, 0x01	; 1
     d22:	8c 93       	st	X, r24
	CLR_BIT(MCUCR,MCUCR_ISC01);
     d24:	a5 e5       	ldi	r26, 0x55	; 85
     d26:	b0 e0       	ldi	r27, 0x00	; 0
     d28:	e5 e5       	ldi	r30, 0x55	; 85
     d2a:	f0 e0       	ldi	r31, 0x00	; 0
     d2c:	80 81       	ld	r24, Z
     d2e:	8d 7f       	andi	r24, 0xFD	; 253
     d30:	8c 93       	st	X, r24

	/*Check INT0 PIE initial state*/
#if EXTI_INT0_INITIAL_STATE == ENABLED
	SET_BIT(GICR,GICR_INT0);
#elif EXTI_INT0_INITIAL_STATE == DISABLED
	CLR_BIT(GICR,GICR_INT0);
     d32:	ab e5       	ldi	r26, 0x5B	; 91
     d34:	b0 e0       	ldi	r27, 0x00	; 0
     d36:	eb e5       	ldi	r30, 0x5B	; 91
     d38:	f0 e0       	ldi	r31, 0x00	; 0
     d3a:	80 81       	ld	r24, Z
     d3c:	8f 7b       	andi	r24, 0xBF	; 191
     d3e:	8c 93       	st	X, r24
#else
#error " Wrong EXTI_INT0_INITIAL_STATE configuration option"
#endif
}
     d40:	cf 91       	pop	r28
     d42:	df 91       	pop	r29
     d44:	08 95       	ret

00000d46 <EXTI_voidINT1Init>:
void EXTI_voidINT1Init()
{
     d46:	df 93       	push	r29
     d48:	cf 93       	push	r28
     d4a:	cd b7       	in	r28, 0x3d	; 61
     d4c:	de b7       	in	r29, 0x3e	; 62
#if EXTI_INT0_SENSE == LOW_LEVEL
	CLR_BIT(MCUCR,MCUCR_ISC10);
	CLR_BIT(MCUCR,MCUCR_ISC11);

#elif EXTI_INT0_SENSE == ON_CHANGE
	SET_BIT(MCUCR,MCUCR_ISC10);
     d4e:	a5 e5       	ldi	r26, 0x55	; 85
     d50:	b0 e0       	ldi	r27, 0x00	; 0
     d52:	e5 e5       	ldi	r30, 0x55	; 85
     d54:	f0 e0       	ldi	r31, 0x00	; 0
     d56:	80 81       	ld	r24, Z
     d58:	84 60       	ori	r24, 0x04	; 4
     d5a:	8c 93       	st	X, r24
	CLR_BIT(MCUCR,MCUCR_ISC11);
     d5c:	a5 e5       	ldi	r26, 0x55	; 85
     d5e:	b0 e0       	ldi	r27, 0x00	; 0
     d60:	e5 e5       	ldi	r30, 0x55	; 85
     d62:	f0 e0       	ldi	r31, 0x00	; 0
     d64:	80 81       	ld	r24, Z
     d66:	87 7f       	andi	r24, 0xF7	; 247
     d68:	8c 93       	st	X, r24
	#error "Wrong EXTI_INT1_SENSE configuration option"
#endif

	/*Check INT1 PIE initial state*/
#if EXTI_INT1_INITIAL_STATE == ENABLED
	SET_BIT(GICR,GICR_INT1);
     d6a:	ab e5       	ldi	r26, 0x5B	; 91
     d6c:	b0 e0       	ldi	r27, 0x00	; 0
     d6e:	eb e5       	ldi	r30, 0x5B	; 91
     d70:	f0 e0       	ldi	r31, 0x00	; 0
     d72:	80 81       	ld	r24, Z
     d74:	80 68       	ori	r24, 0x80	; 128
     d76:	8c 93       	st	X, r24
#elif EXTI_INT1_INITIAL_STATE == DISABLED
	CLR_BIT(GICR,GICR_INT1);
#else
	#error " Wrong EXTI_INT1_INITIAL_STATE configuration option"
#endif
}
     d78:	cf 91       	pop	r28
     d7a:	df 91       	pop	r29
     d7c:	08 95       	ret

00000d7e <EXTI_voidINT2Init>:
void EXTI_voidINT2Init()
{
     d7e:	df 93       	push	r29
     d80:	cf 93       	push	r28
     d82:	cd b7       	in	r28, 0x3d	; 61
     d84:	de b7       	in	r29, 0x3e	; 62
	//CLR(GICR,GICR_INT2);
	/*Check on INT2 Sense control*/
#if EXTI_INT2_SENSE == FALLING_EDGE
	CLR_BIT(MCUCSR,MCUCSR_ISC2);
     d86:	a4 e5       	ldi	r26, 0x54	; 84
     d88:	b0 e0       	ldi	r27, 0x00	; 0
     d8a:	e4 e5       	ldi	r30, 0x54	; 84
     d8c:	f0 e0       	ldi	r31, 0x00	; 0
     d8e:	80 81       	ld	r24, Z
     d90:	8f 7b       	andi	r24, 0xBF	; 191
     d92:	8c 93       	st	X, r24
	/*Check INT2 PIE initial state*/
#if EXTI_INT2_INITIAL_STATE == ENABLED
	SET_BIT(GICR,GICR_INT2);

#elif EXTI_INT2_INITIAL_STATE == DISABLED
	CLR_BIT(GICR,GICR_INT2);
     d94:	ab e5       	ldi	r26, 0x5B	; 91
     d96:	b0 e0       	ldi	r27, 0x00	; 0
     d98:	eb e5       	ldi	r30, 0x5B	; 91
     d9a:	f0 e0       	ldi	r31, 0x00	; 0
     d9c:	80 81       	ld	r24, Z
     d9e:	8f 7d       	andi	r24, 0xDF	; 223
     da0:	8c 93       	st	X, r24
#else
	#error " Wrong EXTI_INT2_INITIAL_STATE configuration option"
#endif
}
     da2:	cf 91       	pop	r28
     da4:	df 91       	pop	r29
     da6:	08 95       	ret

00000da8 <EXTI_u8SetSenseControl>:
void EXTI_u8SetSenseControl(u8 EXTI_u8Number, u8 EXTI_u8Sense)
{
     da8:	df 93       	push	r29
     daa:	cf 93       	push	r28
     dac:	cd b7       	in	r28, 0x3d	; 61
     dae:	de b7       	in	r29, 0x3e	; 62
     db0:	2a 97       	sbiw	r28, 0x0a	; 10
     db2:	0f b6       	in	r0, 0x3f	; 63
     db4:	f8 94       	cli
     db6:	de bf       	out	0x3e, r29	; 62
     db8:	0f be       	out	0x3f, r0	; 63
     dba:	cd bf       	out	0x3d, r28	; 61
     dbc:	89 83       	std	Y+1, r24	; 0x01
     dbe:	6a 83       	std	Y+2, r22	; 0x02
	switch (EXTI_u8Number)
     dc0:	89 81       	ldd	r24, Y+1	; 0x01
     dc2:	28 2f       	mov	r18, r24
     dc4:	30 e0       	ldi	r19, 0x00	; 0
     dc6:	3a 87       	std	Y+10, r19	; 0x0a
     dc8:	29 87       	std	Y+9, r18	; 0x09
     dca:	89 85       	ldd	r24, Y+9	; 0x09
     dcc:	9a 85       	ldd	r25, Y+10	; 0x0a
     dce:	81 30       	cpi	r24, 0x01	; 1
     dd0:	91 05       	cpc	r25, r1
     dd2:	09 f4       	brne	.+2      	; 0xdd6 <EXTI_u8SetSenseControl+0x2e>
     dd4:	67 c0       	rjmp	.+206    	; 0xea4 <EXTI_u8SetSenseControl+0xfc>
     dd6:	29 85       	ldd	r18, Y+9	; 0x09
     dd8:	3a 85       	ldd	r19, Y+10	; 0x0a
     dda:	22 30       	cpi	r18, 0x02	; 2
     ddc:	31 05       	cpc	r19, r1
     dde:	09 f4       	brne	.+2      	; 0xde2 <EXTI_u8SetSenseControl+0x3a>
     de0:	bd c0       	rjmp	.+378    	; 0xf5c <EXTI_u8SetSenseControl+0x1b4>
     de2:	89 85       	ldd	r24, Y+9	; 0x09
     de4:	9a 85       	ldd	r25, Y+10	; 0x0a
     de6:	00 97       	sbiw	r24, 0x00	; 0
     de8:	09 f0       	breq	.+2      	; 0xdec <EXTI_u8SetSenseControl+0x44>
     dea:	d6 c0       	rjmp	.+428    	; 0xf98 <EXTI_u8SetSenseControl+0x1f0>
	{
	case EXTI_INT0:		/*In case INT0*/
		switch(EXTI_u8Sense)
     dec:	8a 81       	ldd	r24, Y+2	; 0x02
     dee:	28 2f       	mov	r18, r24
     df0:	30 e0       	ldi	r19, 0x00	; 0
     df2:	38 87       	std	Y+8, r19	; 0x08
     df4:	2f 83       	std	Y+7, r18	; 0x07
     df6:	8f 81       	ldd	r24, Y+7	; 0x07
     df8:	98 85       	ldd	r25, Y+8	; 0x08
     dfa:	82 30       	cpi	r24, 0x02	; 2
     dfc:	91 05       	cpc	r25, r1
     dfe:	29 f1       	breq	.+74     	; 0xe4a <EXTI_u8SetSenseControl+0xa2>
     e00:	2f 81       	ldd	r18, Y+7	; 0x07
     e02:	38 85       	ldd	r19, Y+8	; 0x08
     e04:	23 30       	cpi	r18, 0x03	; 3
     e06:	31 05       	cpc	r19, r1
     e08:	34 f4       	brge	.+12     	; 0xe16 <EXTI_u8SetSenseControl+0x6e>
     e0a:	8f 81       	ldd	r24, Y+7	; 0x07
     e0c:	98 85       	ldd	r25, Y+8	; 0x08
     e0e:	81 30       	cpi	r24, 0x01	; 1
     e10:	91 05       	cpc	r25, r1
     e12:	61 f0       	breq	.+24     	; 0xe2c <EXTI_u8SetSenseControl+0x84>
     e14:	c1 c0       	rjmp	.+386    	; 0xf98 <EXTI_u8SetSenseControl+0x1f0>
     e16:	2f 81       	ldd	r18, Y+7	; 0x07
     e18:	38 85       	ldd	r19, Y+8	; 0x08
     e1a:	23 30       	cpi	r18, 0x03	; 3
     e1c:	31 05       	cpc	r19, r1
     e1e:	21 f1       	breq	.+72     	; 0xe68 <EXTI_u8SetSenseControl+0xc0>
     e20:	8f 81       	ldd	r24, Y+7	; 0x07
     e22:	98 85       	ldd	r25, Y+8	; 0x08
     e24:	84 30       	cpi	r24, 0x04	; 4
     e26:	91 05       	cpc	r25, r1
     e28:	71 f1       	breq	.+92     	; 0xe86 <EXTI_u8SetSenseControl+0xde>
     e2a:	b6 c0       	rjmp	.+364    	; 0xf98 <EXTI_u8SetSenseControl+0x1f0>
		{
			case LOW_LEVEL:   CLR_BIT(MCUCR,MCUCR_ISC00); CLR_BIT(MCUCR,MCUCR_ISC01); break;
     e2c:	a5 e5       	ldi	r26, 0x55	; 85
     e2e:	b0 e0       	ldi	r27, 0x00	; 0
     e30:	e5 e5       	ldi	r30, 0x55	; 85
     e32:	f0 e0       	ldi	r31, 0x00	; 0
     e34:	80 81       	ld	r24, Z
     e36:	8e 7f       	andi	r24, 0xFE	; 254
     e38:	8c 93       	st	X, r24
     e3a:	a5 e5       	ldi	r26, 0x55	; 85
     e3c:	b0 e0       	ldi	r27, 0x00	; 0
     e3e:	e5 e5       	ldi	r30, 0x55	; 85
     e40:	f0 e0       	ldi	r31, 0x00	; 0
     e42:	80 81       	ld	r24, Z
     e44:	8d 7f       	andi	r24, 0xFD	; 253
     e46:	8c 93       	st	X, r24
     e48:	a7 c0       	rjmp	.+334    	; 0xf98 <EXTI_u8SetSenseControl+0x1f0>
			case ON_CHANGE:   SET_BIT(MCUCR,MCUCR_ISC00); CLR_BIT(MCUCR,MCUCR_ISC01); break;
     e4a:	a5 e5       	ldi	r26, 0x55	; 85
     e4c:	b0 e0       	ldi	r27, 0x00	; 0
     e4e:	e5 e5       	ldi	r30, 0x55	; 85
     e50:	f0 e0       	ldi	r31, 0x00	; 0
     e52:	80 81       	ld	r24, Z
     e54:	81 60       	ori	r24, 0x01	; 1
     e56:	8c 93       	st	X, r24
     e58:	a5 e5       	ldi	r26, 0x55	; 85
     e5a:	b0 e0       	ldi	r27, 0x00	; 0
     e5c:	e5 e5       	ldi	r30, 0x55	; 85
     e5e:	f0 e0       	ldi	r31, 0x00	; 0
     e60:	80 81       	ld	r24, Z
     e62:	8d 7f       	andi	r24, 0xFD	; 253
     e64:	8c 93       	st	X, r24
     e66:	98 c0       	rjmp	.+304    	; 0xf98 <EXTI_u8SetSenseControl+0x1f0>
			case FALLING_EDGE:CLR_BIT(MCUCR,MCUCR_ISC00); SET_BIT(MCUCR,MCUCR_ISC01); break;
     e68:	a5 e5       	ldi	r26, 0x55	; 85
     e6a:	b0 e0       	ldi	r27, 0x00	; 0
     e6c:	e5 e5       	ldi	r30, 0x55	; 85
     e6e:	f0 e0       	ldi	r31, 0x00	; 0
     e70:	80 81       	ld	r24, Z
     e72:	8e 7f       	andi	r24, 0xFE	; 254
     e74:	8c 93       	st	X, r24
     e76:	a5 e5       	ldi	r26, 0x55	; 85
     e78:	b0 e0       	ldi	r27, 0x00	; 0
     e7a:	e5 e5       	ldi	r30, 0x55	; 85
     e7c:	f0 e0       	ldi	r31, 0x00	; 0
     e7e:	80 81       	ld	r24, Z
     e80:	82 60       	ori	r24, 0x02	; 2
     e82:	8c 93       	st	X, r24
     e84:	89 c0       	rjmp	.+274    	; 0xf98 <EXTI_u8SetSenseControl+0x1f0>
			case RISING_EDGE: SET_BIT(MCUCR,MCUCR_ISC00); SET_BIT(MCUCR,MCUCR_ISC01); break;
     e86:	a5 e5       	ldi	r26, 0x55	; 85
     e88:	b0 e0       	ldi	r27, 0x00	; 0
     e8a:	e5 e5       	ldi	r30, 0x55	; 85
     e8c:	f0 e0       	ldi	r31, 0x00	; 0
     e8e:	80 81       	ld	r24, Z
     e90:	81 60       	ori	r24, 0x01	; 1
     e92:	8c 93       	st	X, r24
     e94:	a5 e5       	ldi	r26, 0x55	; 85
     e96:	b0 e0       	ldi	r27, 0x00	; 0
     e98:	e5 e5       	ldi	r30, 0x55	; 85
     e9a:	f0 e0       	ldi	r31, 0x00	; 0
     e9c:	80 81       	ld	r24, Z
     e9e:	82 60       	ori	r24, 0x02	; 2
     ea0:	8c 93       	st	X, r24
     ea2:	7a c0       	rjmp	.+244    	; 0xf98 <EXTI_u8SetSenseControl+0x1f0>
			default:  break;
		}
		break;			/*Break INT0 case*/
	case EXTI_INT1:	/*In case of INT1*/
		switch(EXTI_u8Sense)
     ea4:	8a 81       	ldd	r24, Y+2	; 0x02
     ea6:	28 2f       	mov	r18, r24
     ea8:	30 e0       	ldi	r19, 0x00	; 0
     eaa:	3e 83       	std	Y+6, r19	; 0x06
     eac:	2d 83       	std	Y+5, r18	; 0x05
     eae:	8d 81       	ldd	r24, Y+5	; 0x05
     eb0:	9e 81       	ldd	r25, Y+6	; 0x06
     eb2:	82 30       	cpi	r24, 0x02	; 2
     eb4:	91 05       	cpc	r25, r1
     eb6:	29 f1       	breq	.+74     	; 0xf02 <EXTI_u8SetSenseControl+0x15a>
     eb8:	2d 81       	ldd	r18, Y+5	; 0x05
     eba:	3e 81       	ldd	r19, Y+6	; 0x06
     ebc:	23 30       	cpi	r18, 0x03	; 3
     ebe:	31 05       	cpc	r19, r1
     ec0:	34 f4       	brge	.+12     	; 0xece <EXTI_u8SetSenseControl+0x126>
     ec2:	8d 81       	ldd	r24, Y+5	; 0x05
     ec4:	9e 81       	ldd	r25, Y+6	; 0x06
     ec6:	81 30       	cpi	r24, 0x01	; 1
     ec8:	91 05       	cpc	r25, r1
     eca:	61 f0       	breq	.+24     	; 0xee4 <EXTI_u8SetSenseControl+0x13c>
     ecc:	65 c0       	rjmp	.+202    	; 0xf98 <EXTI_u8SetSenseControl+0x1f0>
     ece:	2d 81       	ldd	r18, Y+5	; 0x05
     ed0:	3e 81       	ldd	r19, Y+6	; 0x06
     ed2:	23 30       	cpi	r18, 0x03	; 3
     ed4:	31 05       	cpc	r19, r1
     ed6:	21 f1       	breq	.+72     	; 0xf20 <EXTI_u8SetSenseControl+0x178>
     ed8:	8d 81       	ldd	r24, Y+5	; 0x05
     eda:	9e 81       	ldd	r25, Y+6	; 0x06
     edc:	84 30       	cpi	r24, 0x04	; 4
     ede:	91 05       	cpc	r25, r1
     ee0:	71 f1       	breq	.+92     	; 0xf3e <EXTI_u8SetSenseControl+0x196>
     ee2:	5a c0       	rjmp	.+180    	; 0xf98 <EXTI_u8SetSenseControl+0x1f0>
		{
			case LOW_LEVEL:   CLR_BIT(MCUCR,MCUCR_ISC10); CLR_BIT(MCUCR,MCUCR_ISC11); break;
     ee4:	a5 e5       	ldi	r26, 0x55	; 85
     ee6:	b0 e0       	ldi	r27, 0x00	; 0
     ee8:	e5 e5       	ldi	r30, 0x55	; 85
     eea:	f0 e0       	ldi	r31, 0x00	; 0
     eec:	80 81       	ld	r24, Z
     eee:	8b 7f       	andi	r24, 0xFB	; 251
     ef0:	8c 93       	st	X, r24
     ef2:	a5 e5       	ldi	r26, 0x55	; 85
     ef4:	b0 e0       	ldi	r27, 0x00	; 0
     ef6:	e5 e5       	ldi	r30, 0x55	; 85
     ef8:	f0 e0       	ldi	r31, 0x00	; 0
     efa:	80 81       	ld	r24, Z
     efc:	87 7f       	andi	r24, 0xF7	; 247
     efe:	8c 93       	st	X, r24
     f00:	4b c0       	rjmp	.+150    	; 0xf98 <EXTI_u8SetSenseControl+0x1f0>
			case ON_CHANGE:   SET_BIT(MCUCR,MCUCR_ISC10); CLR_BIT(MCUCR,MCUCR_ISC11); break;
     f02:	a5 e5       	ldi	r26, 0x55	; 85
     f04:	b0 e0       	ldi	r27, 0x00	; 0
     f06:	e5 e5       	ldi	r30, 0x55	; 85
     f08:	f0 e0       	ldi	r31, 0x00	; 0
     f0a:	80 81       	ld	r24, Z
     f0c:	84 60       	ori	r24, 0x04	; 4
     f0e:	8c 93       	st	X, r24
     f10:	a5 e5       	ldi	r26, 0x55	; 85
     f12:	b0 e0       	ldi	r27, 0x00	; 0
     f14:	e5 e5       	ldi	r30, 0x55	; 85
     f16:	f0 e0       	ldi	r31, 0x00	; 0
     f18:	80 81       	ld	r24, Z
     f1a:	87 7f       	andi	r24, 0xF7	; 247
     f1c:	8c 93       	st	X, r24
     f1e:	3c c0       	rjmp	.+120    	; 0xf98 <EXTI_u8SetSenseControl+0x1f0>
			case FALLING_EDGE:CLR_BIT(MCUCR,MCUCR_ISC10); SET_BIT(MCUCR,MCUCR_ISC11); break;
     f20:	a5 e5       	ldi	r26, 0x55	; 85
     f22:	b0 e0       	ldi	r27, 0x00	; 0
     f24:	e5 e5       	ldi	r30, 0x55	; 85
     f26:	f0 e0       	ldi	r31, 0x00	; 0
     f28:	80 81       	ld	r24, Z
     f2a:	8b 7f       	andi	r24, 0xFB	; 251
     f2c:	8c 93       	st	X, r24
     f2e:	a5 e5       	ldi	r26, 0x55	; 85
     f30:	b0 e0       	ldi	r27, 0x00	; 0
     f32:	e5 e5       	ldi	r30, 0x55	; 85
     f34:	f0 e0       	ldi	r31, 0x00	; 0
     f36:	80 81       	ld	r24, Z
     f38:	88 60       	ori	r24, 0x08	; 8
     f3a:	8c 93       	st	X, r24
     f3c:	2d c0       	rjmp	.+90     	; 0xf98 <EXTI_u8SetSenseControl+0x1f0>
			case RISING_EDGE: SET_BIT(MCUCR,MCUCR_ISC10); SET_BIT(MCUCR,MCUCR_ISC11); break;
     f3e:	a5 e5       	ldi	r26, 0x55	; 85
     f40:	b0 e0       	ldi	r27, 0x00	; 0
     f42:	e5 e5       	ldi	r30, 0x55	; 85
     f44:	f0 e0       	ldi	r31, 0x00	; 0
     f46:	80 81       	ld	r24, Z
     f48:	84 60       	ori	r24, 0x04	; 4
     f4a:	8c 93       	st	X, r24
     f4c:	a5 e5       	ldi	r26, 0x55	; 85
     f4e:	b0 e0       	ldi	r27, 0x00	; 0
     f50:	e5 e5       	ldi	r30, 0x55	; 85
     f52:	f0 e0       	ldi	r31, 0x00	; 0
     f54:	80 81       	ld	r24, Z
     f56:	88 60       	ori	r24, 0x08	; 8
     f58:	8c 93       	st	X, r24
     f5a:	1e c0       	rjmp	.+60     	; 0xf98 <EXTI_u8SetSenseControl+0x1f0>
			default: break;
		}
		break;		/*Break INT1 case*/
	case EXTI_INT2:	/*In case of INT2*/
		switch(EXTI_u8Sense)
     f5c:	8a 81       	ldd	r24, Y+2	; 0x02
     f5e:	28 2f       	mov	r18, r24
     f60:	30 e0       	ldi	r19, 0x00	; 0
     f62:	3c 83       	std	Y+4, r19	; 0x04
     f64:	2b 83       	std	Y+3, r18	; 0x03
     f66:	8b 81       	ldd	r24, Y+3	; 0x03
     f68:	9c 81       	ldd	r25, Y+4	; 0x04
     f6a:	83 30       	cpi	r24, 0x03	; 3
     f6c:	91 05       	cpc	r25, r1
     f6e:	69 f0       	breq	.+26     	; 0xf8a <EXTI_u8SetSenseControl+0x1e2>
     f70:	2b 81       	ldd	r18, Y+3	; 0x03
     f72:	3c 81       	ldd	r19, Y+4	; 0x04
     f74:	24 30       	cpi	r18, 0x04	; 4
     f76:	31 05       	cpc	r19, r1
     f78:	79 f4       	brne	.+30     	; 0xf98 <EXTI_u8SetSenseControl+0x1f0>
		{
			case RISING_EDGE: SET_BIT(MCUCSR,MCUCSR_ISC2);  break;
     f7a:	a4 e5       	ldi	r26, 0x54	; 84
     f7c:	b0 e0       	ldi	r27, 0x00	; 0
     f7e:	e4 e5       	ldi	r30, 0x54	; 84
     f80:	f0 e0       	ldi	r31, 0x00	; 0
     f82:	80 81       	ld	r24, Z
     f84:	80 64       	ori	r24, 0x40	; 64
     f86:	8c 93       	st	X, r24
     f88:	07 c0       	rjmp	.+14     	; 0xf98 <EXTI_u8SetSenseControl+0x1f0>
			case FALLING_EDGE: CLR_BIT(MCUCSR,MCUCSR_ISC2);  break;
     f8a:	a4 e5       	ldi	r26, 0x54	; 84
     f8c:	b0 e0       	ldi	r27, 0x00	; 0
     f8e:	e4 e5       	ldi	r30, 0x54	; 84
     f90:	f0 e0       	ldi	r31, 0x00	; 0
     f92:	80 81       	ld	r24, Z
     f94:	8f 7b       	andi	r24, 0xBF	; 191
     f96:	8c 93       	st	X, r24
		}
		break;		/*Break INT2 case*/
	default: break;
	}

}
     f98:	2a 96       	adiw	r28, 0x0a	; 10
     f9a:	0f b6       	in	r0, 0x3f	; 63
     f9c:	f8 94       	cli
     f9e:	de bf       	out	0x3e, r29	; 62
     fa0:	0f be       	out	0x3f, r0	; 63
     fa2:	cd bf       	out	0x3d, r28	; 61
     fa4:	cf 91       	pop	r28
     fa6:	df 91       	pop	r29
     fa8:	08 95       	ret

00000faa <EXTI_u8INTSetCallBack>:

void EXTI_u8INTSetCallBack(void (*Copy_pvCallBackFunc)(void), u8 EXTI_u8Number)
{
     faa:	df 93       	push	r29
     fac:	cf 93       	push	r28
     fae:	00 d0       	rcall	.+0      	; 0xfb0 <EXTI_u8INTSetCallBack+0x6>
     fb0:	0f 92       	push	r0
     fb2:	cd b7       	in	r28, 0x3d	; 61
     fb4:	de b7       	in	r29, 0x3e	; 62
     fb6:	9a 83       	std	Y+2, r25	; 0x02
     fb8:	89 83       	std	Y+1, r24	; 0x01
     fba:	6b 83       	std	Y+3, r22	; 0x03
	if(Copy_pvCallBackFunc != NULL)
     fbc:	89 81       	ldd	r24, Y+1	; 0x01
     fbe:	9a 81       	ldd	r25, Y+2	; 0x02
     fc0:	00 97       	sbiw	r24, 0x00	; 0
     fc2:	61 f0       	breq	.+24     	; 0xfdc <EXTI_u8INTSetCallBack+0x32>
	{
		EXTI_pvINTCallBackFunc[EXTI_u8Number]= Copy_pvCallBackFunc;
     fc4:	8b 81       	ldd	r24, Y+3	; 0x03
     fc6:	88 2f       	mov	r24, r24
     fc8:	90 e0       	ldi	r25, 0x00	; 0
     fca:	88 0f       	add	r24, r24
     fcc:	99 1f       	adc	r25, r25
     fce:	fc 01       	movw	r30, r24
     fd0:	e8 50       	subi	r30, 0x08	; 8
     fd2:	fe 4f       	sbci	r31, 0xFE	; 254
     fd4:	89 81       	ldd	r24, Y+1	; 0x01
     fd6:	9a 81       	ldd	r25, Y+2	; 0x02
     fd8:	91 83       	std	Z+1, r25	; 0x01
     fda:	80 83       	st	Z, r24
	}
}
     fdc:	0f 90       	pop	r0
     fde:	0f 90       	pop	r0
     fe0:	0f 90       	pop	r0
     fe2:	cf 91       	pop	r28
     fe4:	df 91       	pop	r29
     fe6:	08 95       	ret

00000fe8 <__vector_1>:

/*ISR of INT0*/
void  __vector_1 (void)	__attribute__((signal));
void  __vector_1 (void)
{
     fe8:	1f 92       	push	r1
     fea:	0f 92       	push	r0
     fec:	0f b6       	in	r0, 0x3f	; 63
     fee:	0f 92       	push	r0
     ff0:	11 24       	eor	r1, r1
     ff2:	2f 93       	push	r18
     ff4:	3f 93       	push	r19
     ff6:	4f 93       	push	r20
     ff8:	5f 93       	push	r21
     ffa:	6f 93       	push	r22
     ffc:	7f 93       	push	r23
     ffe:	8f 93       	push	r24
    1000:	9f 93       	push	r25
    1002:	af 93       	push	r26
    1004:	bf 93       	push	r27
    1006:	ef 93       	push	r30
    1008:	ff 93       	push	r31
    100a:	df 93       	push	r29
    100c:	cf 93       	push	r28
    100e:	cd b7       	in	r28, 0x3d	; 61
    1010:	de b7       	in	r29, 0x3e	; 62
	if(EXTI_pvINTCallBackFunc[EXTI_INT0] != NULL)
    1012:	80 91 f8 01 	lds	r24, 0x01F8
    1016:	90 91 f9 01 	lds	r25, 0x01F9
    101a:	00 97       	sbiw	r24, 0x00	; 0
    101c:	29 f0       	breq	.+10     	; 0x1028 <__vector_1+0x40>
	{
		EXTI_pvINTCallBackFunc[EXTI_INT0]();
    101e:	e0 91 f8 01 	lds	r30, 0x01F8
    1022:	f0 91 f9 01 	lds	r31, 0x01F9
    1026:	09 95       	icall
	}

}
    1028:	cf 91       	pop	r28
    102a:	df 91       	pop	r29
    102c:	ff 91       	pop	r31
    102e:	ef 91       	pop	r30
    1030:	bf 91       	pop	r27
    1032:	af 91       	pop	r26
    1034:	9f 91       	pop	r25
    1036:	8f 91       	pop	r24
    1038:	7f 91       	pop	r23
    103a:	6f 91       	pop	r22
    103c:	5f 91       	pop	r21
    103e:	4f 91       	pop	r20
    1040:	3f 91       	pop	r19
    1042:	2f 91       	pop	r18
    1044:	0f 90       	pop	r0
    1046:	0f be       	out	0x3f, r0	; 63
    1048:	0f 90       	pop	r0
    104a:	1f 90       	pop	r1
    104c:	18 95       	reti

0000104e <__vector_2>:
/*ISR of INT1*/
void  __vector_2 (void)	__attribute__((signal));
void  __vector_2 (void)
{
    104e:	1f 92       	push	r1
    1050:	0f 92       	push	r0
    1052:	0f b6       	in	r0, 0x3f	; 63
    1054:	0f 92       	push	r0
    1056:	11 24       	eor	r1, r1
    1058:	2f 93       	push	r18
    105a:	3f 93       	push	r19
    105c:	4f 93       	push	r20
    105e:	5f 93       	push	r21
    1060:	6f 93       	push	r22
    1062:	7f 93       	push	r23
    1064:	8f 93       	push	r24
    1066:	9f 93       	push	r25
    1068:	af 93       	push	r26
    106a:	bf 93       	push	r27
    106c:	ef 93       	push	r30
    106e:	ff 93       	push	r31
    1070:	df 93       	push	r29
    1072:	cf 93       	push	r28
    1074:	cd b7       	in	r28, 0x3d	; 61
    1076:	de b7       	in	r29, 0x3e	; 62
	if(EXTI_pvINTCallBackFunc[EXTI_INT1] != NULL)
    1078:	80 91 fa 01 	lds	r24, 0x01FA
    107c:	90 91 fb 01 	lds	r25, 0x01FB
    1080:	00 97       	sbiw	r24, 0x00	; 0
    1082:	29 f0       	breq	.+10     	; 0x108e <__vector_2+0x40>
	{
		EXTI_pvINTCallBackFunc[EXTI_INT1]();
    1084:	e0 91 fa 01 	lds	r30, 0x01FA
    1088:	f0 91 fb 01 	lds	r31, 0x01FB
    108c:	09 95       	icall
	}
}
    108e:	cf 91       	pop	r28
    1090:	df 91       	pop	r29
    1092:	ff 91       	pop	r31
    1094:	ef 91       	pop	r30
    1096:	bf 91       	pop	r27
    1098:	af 91       	pop	r26
    109a:	9f 91       	pop	r25
    109c:	8f 91       	pop	r24
    109e:	7f 91       	pop	r23
    10a0:	6f 91       	pop	r22
    10a2:	5f 91       	pop	r21
    10a4:	4f 91       	pop	r20
    10a6:	3f 91       	pop	r19
    10a8:	2f 91       	pop	r18
    10aa:	0f 90       	pop	r0
    10ac:	0f be       	out	0x3f, r0	; 63
    10ae:	0f 90       	pop	r0
    10b0:	1f 90       	pop	r1
    10b2:	18 95       	reti

000010b4 <__vector_3>:
/*ISR of INT2*/
void  __vector_3 (void)	__attribute__((signal));
void  __vector_3 (void)
{
    10b4:	1f 92       	push	r1
    10b6:	0f 92       	push	r0
    10b8:	0f b6       	in	r0, 0x3f	; 63
    10ba:	0f 92       	push	r0
    10bc:	11 24       	eor	r1, r1
    10be:	2f 93       	push	r18
    10c0:	3f 93       	push	r19
    10c2:	4f 93       	push	r20
    10c4:	5f 93       	push	r21
    10c6:	6f 93       	push	r22
    10c8:	7f 93       	push	r23
    10ca:	8f 93       	push	r24
    10cc:	9f 93       	push	r25
    10ce:	af 93       	push	r26
    10d0:	bf 93       	push	r27
    10d2:	ef 93       	push	r30
    10d4:	ff 93       	push	r31
    10d6:	df 93       	push	r29
    10d8:	cf 93       	push	r28
    10da:	cd b7       	in	r28, 0x3d	; 61
    10dc:	de b7       	in	r29, 0x3e	; 62
	if(EXTI_pvINTCallBackFunc[EXTI_INT2] != NULL)
    10de:	80 91 fc 01 	lds	r24, 0x01FC
    10e2:	90 91 fd 01 	lds	r25, 0x01FD
    10e6:	00 97       	sbiw	r24, 0x00	; 0
    10e8:	29 f0       	breq	.+10     	; 0x10f4 <__vector_3+0x40>
	{
		EXTI_pvINTCallBackFunc[EXTI_INT0]();
    10ea:	e0 91 f8 01 	lds	r30, 0x01F8
    10ee:	f0 91 f9 01 	lds	r31, 0x01F9
    10f2:	09 95       	icall
	}

}
    10f4:	cf 91       	pop	r28
    10f6:	df 91       	pop	r29
    10f8:	ff 91       	pop	r31
    10fa:	ef 91       	pop	r30
    10fc:	bf 91       	pop	r27
    10fe:	af 91       	pop	r26
    1100:	9f 91       	pop	r25
    1102:	8f 91       	pop	r24
    1104:	7f 91       	pop	r23
    1106:	6f 91       	pop	r22
    1108:	5f 91       	pop	r21
    110a:	4f 91       	pop	r20
    110c:	3f 91       	pop	r19
    110e:	2f 91       	pop	r18
    1110:	0f 90       	pop	r0
    1112:	0f be       	out	0x3f, r0	; 63
    1114:	0f 90       	pop	r0
    1116:	1f 90       	pop	r1
    1118:	18 95       	reti

0000111a <MDIO_voidSetPinMode>:
#include "DIO_private.h"



void MDIO_voidSetPinMode(u8 copy_u8PinId , u8 copy_u8PortId , u8 copy_u8PinMode)
{
    111a:	df 93       	push	r29
    111c:	cf 93       	push	r28
    111e:	cd b7       	in	r28, 0x3d	; 61
    1120:	de b7       	in	r29, 0x3e	; 62
    1122:	27 97       	sbiw	r28, 0x07	; 7
    1124:	0f b6       	in	r0, 0x3f	; 63
    1126:	f8 94       	cli
    1128:	de bf       	out	0x3e, r29	; 62
    112a:	0f be       	out	0x3f, r0	; 63
    112c:	cd bf       	out	0x3d, r28	; 61
    112e:	89 83       	std	Y+1, r24	; 0x01
    1130:	6a 83       	std	Y+2, r22	; 0x02
    1132:	4b 83       	std	Y+3, r20	; 0x03
	/*check that PinId and PortId are in Range*/
	if(copy_u8PinId <= DIO_PIN7 && copy_u8PortId <= DIO_PORTD)
    1134:	89 81       	ldd	r24, Y+1	; 0x01
    1136:	88 30       	cpi	r24, 0x08	; 8
    1138:	08 f0       	brcs	.+2      	; 0x113c <MDIO_voidSetPinMode+0x22>
    113a:	ee c0       	rjmp	.+476    	; 0x1318 <MDIO_voidSetPinMode+0x1fe>
    113c:	8a 81       	ldd	r24, Y+2	; 0x02
    113e:	84 30       	cpi	r24, 0x04	; 4
    1140:	08 f0       	brcs	.+2      	; 0x1144 <MDIO_voidSetPinMode+0x2a>
    1142:	ea c0       	rjmp	.+468    	; 0x1318 <MDIO_voidSetPinMode+0x1fe>
	{
		/*Direction Mode of Pin is OUTPUT*/
		if(copy_u8PinMode == DIO_OUTPUT)
    1144:	8b 81       	ldd	r24, Y+3	; 0x03
    1146:	81 30       	cpi	r24, 0x01	; 1
    1148:	09 f0       	breq	.+2      	; 0x114c <MDIO_voidSetPinMode+0x32>
    114a:	6f c0       	rjmp	.+222    	; 0x122a <MDIO_voidSetPinMode+0x110>
		{
			/*Switch on PortId*/
			switch(copy_u8PortId)
    114c:	8a 81       	ldd	r24, Y+2	; 0x02
    114e:	28 2f       	mov	r18, r24
    1150:	30 e0       	ldi	r19, 0x00	; 0
    1152:	3f 83       	std	Y+7, r19	; 0x07
    1154:	2e 83       	std	Y+6, r18	; 0x06
    1156:	8e 81       	ldd	r24, Y+6	; 0x06
    1158:	9f 81       	ldd	r25, Y+7	; 0x07
    115a:	81 30       	cpi	r24, 0x01	; 1
    115c:	91 05       	cpc	r25, r1
    115e:	49 f1       	breq	.+82     	; 0x11b2 <MDIO_voidSetPinMode+0x98>
    1160:	2e 81       	ldd	r18, Y+6	; 0x06
    1162:	3f 81       	ldd	r19, Y+7	; 0x07
    1164:	22 30       	cpi	r18, 0x02	; 2
    1166:	31 05       	cpc	r19, r1
    1168:	2c f4       	brge	.+10     	; 0x1174 <MDIO_voidSetPinMode+0x5a>
    116a:	8e 81       	ldd	r24, Y+6	; 0x06
    116c:	9f 81       	ldd	r25, Y+7	; 0x07
    116e:	00 97       	sbiw	r24, 0x00	; 0
    1170:	61 f0       	breq	.+24     	; 0x118a <MDIO_voidSetPinMode+0x70>
    1172:	d2 c0       	rjmp	.+420    	; 0x1318 <MDIO_voidSetPinMode+0x1fe>
    1174:	2e 81       	ldd	r18, Y+6	; 0x06
    1176:	3f 81       	ldd	r19, Y+7	; 0x07
    1178:	22 30       	cpi	r18, 0x02	; 2
    117a:	31 05       	cpc	r19, r1
    117c:	71 f1       	breq	.+92     	; 0x11da <MDIO_voidSetPinMode+0xc0>
    117e:	8e 81       	ldd	r24, Y+6	; 0x06
    1180:	9f 81       	ldd	r25, Y+7	; 0x07
    1182:	83 30       	cpi	r24, 0x03	; 3
    1184:	91 05       	cpc	r25, r1
    1186:	e9 f1       	breq	.+122    	; 0x1202 <MDIO_voidSetPinMode+0xe8>
    1188:	c7 c0       	rjmp	.+398    	; 0x1318 <MDIO_voidSetPinMode+0x1fe>
			{
			/*case PORTA set the bit number PinId in DDRA register */
			case DIO_PORTA:	SET_BIT(DDRA_REG,copy_u8PinId);break;
    118a:	aa e3       	ldi	r26, 0x3A	; 58
    118c:	b0 e0       	ldi	r27, 0x00	; 0
    118e:	ea e3       	ldi	r30, 0x3A	; 58
    1190:	f0 e0       	ldi	r31, 0x00	; 0
    1192:	80 81       	ld	r24, Z
    1194:	48 2f       	mov	r20, r24
    1196:	89 81       	ldd	r24, Y+1	; 0x01
    1198:	28 2f       	mov	r18, r24
    119a:	30 e0       	ldi	r19, 0x00	; 0
    119c:	81 e0       	ldi	r24, 0x01	; 1
    119e:	90 e0       	ldi	r25, 0x00	; 0
    11a0:	02 2e       	mov	r0, r18
    11a2:	02 c0       	rjmp	.+4      	; 0x11a8 <MDIO_voidSetPinMode+0x8e>
    11a4:	88 0f       	add	r24, r24
    11a6:	99 1f       	adc	r25, r25
    11a8:	0a 94       	dec	r0
    11aa:	e2 f7       	brpl	.-8      	; 0x11a4 <MDIO_voidSetPinMode+0x8a>
    11ac:	84 2b       	or	r24, r20
    11ae:	8c 93       	st	X, r24
    11b0:	b3 c0       	rjmp	.+358    	; 0x1318 <MDIO_voidSetPinMode+0x1fe>
			/*case PORTB set the bit number PinId in DDRB register */
			case DIO_PORTB:	SET_BIT(DDRB_REG,copy_u8PinId);break;
    11b2:	a7 e3       	ldi	r26, 0x37	; 55
    11b4:	b0 e0       	ldi	r27, 0x00	; 0
    11b6:	e7 e3       	ldi	r30, 0x37	; 55
    11b8:	f0 e0       	ldi	r31, 0x00	; 0
    11ba:	80 81       	ld	r24, Z
    11bc:	48 2f       	mov	r20, r24
    11be:	89 81       	ldd	r24, Y+1	; 0x01
    11c0:	28 2f       	mov	r18, r24
    11c2:	30 e0       	ldi	r19, 0x00	; 0
    11c4:	81 e0       	ldi	r24, 0x01	; 1
    11c6:	90 e0       	ldi	r25, 0x00	; 0
    11c8:	02 2e       	mov	r0, r18
    11ca:	02 c0       	rjmp	.+4      	; 0x11d0 <MDIO_voidSetPinMode+0xb6>
    11cc:	88 0f       	add	r24, r24
    11ce:	99 1f       	adc	r25, r25
    11d0:	0a 94       	dec	r0
    11d2:	e2 f7       	brpl	.-8      	; 0x11cc <MDIO_voidSetPinMode+0xb2>
    11d4:	84 2b       	or	r24, r20
    11d6:	8c 93       	st	X, r24
    11d8:	9f c0       	rjmp	.+318    	; 0x1318 <MDIO_voidSetPinMode+0x1fe>
			/*case PORTC set the bit number PinId in DDRC register */
			case DIO_PORTC:	SET_BIT(DDRC_REG,copy_u8PinId);break;
    11da:	a4 e3       	ldi	r26, 0x34	; 52
    11dc:	b0 e0       	ldi	r27, 0x00	; 0
    11de:	e4 e3       	ldi	r30, 0x34	; 52
    11e0:	f0 e0       	ldi	r31, 0x00	; 0
    11e2:	80 81       	ld	r24, Z
    11e4:	48 2f       	mov	r20, r24
    11e6:	89 81       	ldd	r24, Y+1	; 0x01
    11e8:	28 2f       	mov	r18, r24
    11ea:	30 e0       	ldi	r19, 0x00	; 0
    11ec:	81 e0       	ldi	r24, 0x01	; 1
    11ee:	90 e0       	ldi	r25, 0x00	; 0
    11f0:	02 2e       	mov	r0, r18
    11f2:	02 c0       	rjmp	.+4      	; 0x11f8 <MDIO_voidSetPinMode+0xde>
    11f4:	88 0f       	add	r24, r24
    11f6:	99 1f       	adc	r25, r25
    11f8:	0a 94       	dec	r0
    11fa:	e2 f7       	brpl	.-8      	; 0x11f4 <MDIO_voidSetPinMode+0xda>
    11fc:	84 2b       	or	r24, r20
    11fe:	8c 93       	st	X, r24
    1200:	8b c0       	rjmp	.+278    	; 0x1318 <MDIO_voidSetPinMode+0x1fe>
			/*case PORTD set the bit number PinId in DDRD register */
			case DIO_PORTD:	SET_BIT(DDRD_REG,copy_u8PinId);break;
    1202:	a1 e3       	ldi	r26, 0x31	; 49
    1204:	b0 e0       	ldi	r27, 0x00	; 0
    1206:	e1 e3       	ldi	r30, 0x31	; 49
    1208:	f0 e0       	ldi	r31, 0x00	; 0
    120a:	80 81       	ld	r24, Z
    120c:	48 2f       	mov	r20, r24
    120e:	89 81       	ldd	r24, Y+1	; 0x01
    1210:	28 2f       	mov	r18, r24
    1212:	30 e0       	ldi	r19, 0x00	; 0
    1214:	81 e0       	ldi	r24, 0x01	; 1
    1216:	90 e0       	ldi	r25, 0x00	; 0
    1218:	02 2e       	mov	r0, r18
    121a:	02 c0       	rjmp	.+4      	; 0x1220 <MDIO_voidSetPinMode+0x106>
    121c:	88 0f       	add	r24, r24
    121e:	99 1f       	adc	r25, r25
    1220:	0a 94       	dec	r0
    1222:	e2 f7       	brpl	.-8      	; 0x121c <MDIO_voidSetPinMode+0x102>
    1224:	84 2b       	or	r24, r20
    1226:	8c 93       	st	X, r24
    1228:	77 c0       	rjmp	.+238    	; 0x1318 <MDIO_voidSetPinMode+0x1fe>
			}
		}
		/*Direction Mode of Pin is INPUT*/
		else if(copy_u8PinMode == DIO_INPUT)
    122a:	8b 81       	ldd	r24, Y+3	; 0x03
    122c:	88 23       	and	r24, r24
    122e:	09 f0       	breq	.+2      	; 0x1232 <MDIO_voidSetPinMode+0x118>
    1230:	73 c0       	rjmp	.+230    	; 0x1318 <MDIO_voidSetPinMode+0x1fe>
		{
			/*Switch on PortId*/
			switch(copy_u8PortId)
    1232:	8a 81       	ldd	r24, Y+2	; 0x02
    1234:	28 2f       	mov	r18, r24
    1236:	30 e0       	ldi	r19, 0x00	; 0
    1238:	3d 83       	std	Y+5, r19	; 0x05
    123a:	2c 83       	std	Y+4, r18	; 0x04
    123c:	8c 81       	ldd	r24, Y+4	; 0x04
    123e:	9d 81       	ldd	r25, Y+5	; 0x05
    1240:	81 30       	cpi	r24, 0x01	; 1
    1242:	91 05       	cpc	r25, r1
    1244:	59 f1       	breq	.+86     	; 0x129c <MDIO_voidSetPinMode+0x182>
    1246:	2c 81       	ldd	r18, Y+4	; 0x04
    1248:	3d 81       	ldd	r19, Y+5	; 0x05
    124a:	22 30       	cpi	r18, 0x02	; 2
    124c:	31 05       	cpc	r19, r1
    124e:	2c f4       	brge	.+10     	; 0x125a <MDIO_voidSetPinMode+0x140>
    1250:	8c 81       	ldd	r24, Y+4	; 0x04
    1252:	9d 81       	ldd	r25, Y+5	; 0x05
    1254:	00 97       	sbiw	r24, 0x00	; 0
    1256:	69 f0       	breq	.+26     	; 0x1272 <MDIO_voidSetPinMode+0x158>
    1258:	5f c0       	rjmp	.+190    	; 0x1318 <MDIO_voidSetPinMode+0x1fe>
    125a:	2c 81       	ldd	r18, Y+4	; 0x04
    125c:	3d 81       	ldd	r19, Y+5	; 0x05
    125e:	22 30       	cpi	r18, 0x02	; 2
    1260:	31 05       	cpc	r19, r1
    1262:	89 f1       	breq	.+98     	; 0x12c6 <MDIO_voidSetPinMode+0x1ac>
    1264:	8c 81       	ldd	r24, Y+4	; 0x04
    1266:	9d 81       	ldd	r25, Y+5	; 0x05
    1268:	83 30       	cpi	r24, 0x03	; 3
    126a:	91 05       	cpc	r25, r1
    126c:	09 f4       	brne	.+2      	; 0x1270 <MDIO_voidSetPinMode+0x156>
    126e:	40 c0       	rjmp	.+128    	; 0x12f0 <MDIO_voidSetPinMode+0x1d6>
    1270:	53 c0       	rjmp	.+166    	; 0x1318 <MDIO_voidSetPinMode+0x1fe>
			{
			/*case PORTA Clear the bit number PinId in DDRA register */
			case DIO_PORTA:	CLR_BIT(DDRA_REG,copy_u8PinId);break;
    1272:	aa e3       	ldi	r26, 0x3A	; 58
    1274:	b0 e0       	ldi	r27, 0x00	; 0
    1276:	ea e3       	ldi	r30, 0x3A	; 58
    1278:	f0 e0       	ldi	r31, 0x00	; 0
    127a:	80 81       	ld	r24, Z
    127c:	48 2f       	mov	r20, r24
    127e:	89 81       	ldd	r24, Y+1	; 0x01
    1280:	28 2f       	mov	r18, r24
    1282:	30 e0       	ldi	r19, 0x00	; 0
    1284:	81 e0       	ldi	r24, 0x01	; 1
    1286:	90 e0       	ldi	r25, 0x00	; 0
    1288:	02 2e       	mov	r0, r18
    128a:	02 c0       	rjmp	.+4      	; 0x1290 <MDIO_voidSetPinMode+0x176>
    128c:	88 0f       	add	r24, r24
    128e:	99 1f       	adc	r25, r25
    1290:	0a 94       	dec	r0
    1292:	e2 f7       	brpl	.-8      	; 0x128c <MDIO_voidSetPinMode+0x172>
    1294:	80 95       	com	r24
    1296:	84 23       	and	r24, r20
    1298:	8c 93       	st	X, r24
    129a:	3e c0       	rjmp	.+124    	; 0x1318 <MDIO_voidSetPinMode+0x1fe>
			/*case PORTB Clear the bit number PinId in DDRB register */
			case DIO_PORTB:	CLR_BIT(DDRB_REG,copy_u8PinId);break;
    129c:	a7 e3       	ldi	r26, 0x37	; 55
    129e:	b0 e0       	ldi	r27, 0x00	; 0
    12a0:	e7 e3       	ldi	r30, 0x37	; 55
    12a2:	f0 e0       	ldi	r31, 0x00	; 0
    12a4:	80 81       	ld	r24, Z
    12a6:	48 2f       	mov	r20, r24
    12a8:	89 81       	ldd	r24, Y+1	; 0x01
    12aa:	28 2f       	mov	r18, r24
    12ac:	30 e0       	ldi	r19, 0x00	; 0
    12ae:	81 e0       	ldi	r24, 0x01	; 1
    12b0:	90 e0       	ldi	r25, 0x00	; 0
    12b2:	02 2e       	mov	r0, r18
    12b4:	02 c0       	rjmp	.+4      	; 0x12ba <MDIO_voidSetPinMode+0x1a0>
    12b6:	88 0f       	add	r24, r24
    12b8:	99 1f       	adc	r25, r25
    12ba:	0a 94       	dec	r0
    12bc:	e2 f7       	brpl	.-8      	; 0x12b6 <MDIO_voidSetPinMode+0x19c>
    12be:	80 95       	com	r24
    12c0:	84 23       	and	r24, r20
    12c2:	8c 93       	st	X, r24
    12c4:	29 c0       	rjmp	.+82     	; 0x1318 <MDIO_voidSetPinMode+0x1fe>
			/*case PORTC Clear the bit number PinId in DDRC register */
			case DIO_PORTC:	CLR_BIT(DDRC_REG,copy_u8PinId);break;
    12c6:	a4 e3       	ldi	r26, 0x34	; 52
    12c8:	b0 e0       	ldi	r27, 0x00	; 0
    12ca:	e4 e3       	ldi	r30, 0x34	; 52
    12cc:	f0 e0       	ldi	r31, 0x00	; 0
    12ce:	80 81       	ld	r24, Z
    12d0:	48 2f       	mov	r20, r24
    12d2:	89 81       	ldd	r24, Y+1	; 0x01
    12d4:	28 2f       	mov	r18, r24
    12d6:	30 e0       	ldi	r19, 0x00	; 0
    12d8:	81 e0       	ldi	r24, 0x01	; 1
    12da:	90 e0       	ldi	r25, 0x00	; 0
    12dc:	02 2e       	mov	r0, r18
    12de:	02 c0       	rjmp	.+4      	; 0x12e4 <MDIO_voidSetPinMode+0x1ca>
    12e0:	88 0f       	add	r24, r24
    12e2:	99 1f       	adc	r25, r25
    12e4:	0a 94       	dec	r0
    12e6:	e2 f7       	brpl	.-8      	; 0x12e0 <MDIO_voidSetPinMode+0x1c6>
    12e8:	80 95       	com	r24
    12ea:	84 23       	and	r24, r20
    12ec:	8c 93       	st	X, r24
    12ee:	14 c0       	rjmp	.+40     	; 0x1318 <MDIO_voidSetPinMode+0x1fe>
			/*case PORTD Clear the bit number PinId in DDRD register */
			case DIO_PORTD:	CLR_BIT(DDRD_REG,copy_u8PinId);break;
    12f0:	a1 e3       	ldi	r26, 0x31	; 49
    12f2:	b0 e0       	ldi	r27, 0x00	; 0
    12f4:	e1 e3       	ldi	r30, 0x31	; 49
    12f6:	f0 e0       	ldi	r31, 0x00	; 0
    12f8:	80 81       	ld	r24, Z
    12fa:	48 2f       	mov	r20, r24
    12fc:	89 81       	ldd	r24, Y+1	; 0x01
    12fe:	28 2f       	mov	r18, r24
    1300:	30 e0       	ldi	r19, 0x00	; 0
    1302:	81 e0       	ldi	r24, 0x01	; 1
    1304:	90 e0       	ldi	r25, 0x00	; 0
    1306:	02 2e       	mov	r0, r18
    1308:	02 c0       	rjmp	.+4      	; 0x130e <MDIO_voidSetPinMode+0x1f4>
    130a:	88 0f       	add	r24, r24
    130c:	99 1f       	adc	r25, r25
    130e:	0a 94       	dec	r0
    1310:	e2 f7       	brpl	.-8      	; 0x130a <MDIO_voidSetPinMode+0x1f0>
    1312:	80 95       	com	r24
    1314:	84 23       	and	r24, r20
    1316:	8c 93       	st	X, r24
	else
	{
		//report error massage
	}
	
}
    1318:	27 96       	adiw	r28, 0x07	; 7
    131a:	0f b6       	in	r0, 0x3f	; 63
    131c:	f8 94       	cli
    131e:	de bf       	out	0x3e, r29	; 62
    1320:	0f be       	out	0x3f, r0	; 63
    1322:	cd bf       	out	0x3d, r28	; 61
    1324:	cf 91       	pop	r28
    1326:	df 91       	pop	r29
    1328:	08 95       	ret

0000132a <MDIO_voidSetPinValue>:


void MDIO_voidSetPinValue(u8 copy_u8PinId , u8 copy_u8PortId , u8 copy_u8PinValue)
{
    132a:	df 93       	push	r29
    132c:	cf 93       	push	r28
    132e:	cd b7       	in	r28, 0x3d	; 61
    1330:	de b7       	in	r29, 0x3e	; 62
    1332:	27 97       	sbiw	r28, 0x07	; 7
    1334:	0f b6       	in	r0, 0x3f	; 63
    1336:	f8 94       	cli
    1338:	de bf       	out	0x3e, r29	; 62
    133a:	0f be       	out	0x3f, r0	; 63
    133c:	cd bf       	out	0x3d, r28	; 61
    133e:	89 83       	std	Y+1, r24	; 0x01
    1340:	6a 83       	std	Y+2, r22	; 0x02
    1342:	4b 83       	std	Y+3, r20	; 0x03
	/*check that PinId and PortId are in Range*/
	if(copy_u8PinId <= DIO_PIN7 && copy_u8PortId <= DIO_PORTD)
    1344:	89 81       	ldd	r24, Y+1	; 0x01
    1346:	88 30       	cpi	r24, 0x08	; 8
    1348:	08 f0       	brcs	.+2      	; 0x134c <MDIO_voidSetPinValue+0x22>
    134a:	ee c0       	rjmp	.+476    	; 0x1528 <MDIO_voidSetPinValue+0x1fe>
    134c:	8a 81       	ldd	r24, Y+2	; 0x02
    134e:	84 30       	cpi	r24, 0x04	; 4
    1350:	08 f0       	brcs	.+2      	; 0x1354 <MDIO_voidSetPinValue+0x2a>
    1352:	ea c0       	rjmp	.+468    	; 0x1528 <MDIO_voidSetPinValue+0x1fe>
	{
		/*Value is HIGH*/
		if(copy_u8PinValue == DIO_HIGH)
    1354:	8b 81       	ldd	r24, Y+3	; 0x03
    1356:	81 30       	cpi	r24, 0x01	; 1
    1358:	09 f0       	breq	.+2      	; 0x135c <MDIO_voidSetPinValue+0x32>
    135a:	6f c0       	rjmp	.+222    	; 0x143a <MDIO_voidSetPinValue+0x110>
		{
			/*Switch on PortId*/
			switch(copy_u8PortId)
    135c:	8a 81       	ldd	r24, Y+2	; 0x02
    135e:	28 2f       	mov	r18, r24
    1360:	30 e0       	ldi	r19, 0x00	; 0
    1362:	3f 83       	std	Y+7, r19	; 0x07
    1364:	2e 83       	std	Y+6, r18	; 0x06
    1366:	8e 81       	ldd	r24, Y+6	; 0x06
    1368:	9f 81       	ldd	r25, Y+7	; 0x07
    136a:	81 30       	cpi	r24, 0x01	; 1
    136c:	91 05       	cpc	r25, r1
    136e:	49 f1       	breq	.+82     	; 0x13c2 <MDIO_voidSetPinValue+0x98>
    1370:	2e 81       	ldd	r18, Y+6	; 0x06
    1372:	3f 81       	ldd	r19, Y+7	; 0x07
    1374:	22 30       	cpi	r18, 0x02	; 2
    1376:	31 05       	cpc	r19, r1
    1378:	2c f4       	brge	.+10     	; 0x1384 <MDIO_voidSetPinValue+0x5a>
    137a:	8e 81       	ldd	r24, Y+6	; 0x06
    137c:	9f 81       	ldd	r25, Y+7	; 0x07
    137e:	00 97       	sbiw	r24, 0x00	; 0
    1380:	61 f0       	breq	.+24     	; 0x139a <MDIO_voidSetPinValue+0x70>
    1382:	d2 c0       	rjmp	.+420    	; 0x1528 <MDIO_voidSetPinValue+0x1fe>
    1384:	2e 81       	ldd	r18, Y+6	; 0x06
    1386:	3f 81       	ldd	r19, Y+7	; 0x07
    1388:	22 30       	cpi	r18, 0x02	; 2
    138a:	31 05       	cpc	r19, r1
    138c:	71 f1       	breq	.+92     	; 0x13ea <MDIO_voidSetPinValue+0xc0>
    138e:	8e 81       	ldd	r24, Y+6	; 0x06
    1390:	9f 81       	ldd	r25, Y+7	; 0x07
    1392:	83 30       	cpi	r24, 0x03	; 3
    1394:	91 05       	cpc	r25, r1
    1396:	e9 f1       	breq	.+122    	; 0x1412 <MDIO_voidSetPinValue+0xe8>
    1398:	c7 c0       	rjmp	.+398    	; 0x1528 <MDIO_voidSetPinValue+0x1fe>
			{
			/*case PORTA SET the bit number PinId in PORTA register */
			case DIO_PORTA:	SET_BIT(PORTA_REG,copy_u8PinId);break;
    139a:	ab e3       	ldi	r26, 0x3B	; 59
    139c:	b0 e0       	ldi	r27, 0x00	; 0
    139e:	eb e3       	ldi	r30, 0x3B	; 59
    13a0:	f0 e0       	ldi	r31, 0x00	; 0
    13a2:	80 81       	ld	r24, Z
    13a4:	48 2f       	mov	r20, r24
    13a6:	89 81       	ldd	r24, Y+1	; 0x01
    13a8:	28 2f       	mov	r18, r24
    13aa:	30 e0       	ldi	r19, 0x00	; 0
    13ac:	81 e0       	ldi	r24, 0x01	; 1
    13ae:	90 e0       	ldi	r25, 0x00	; 0
    13b0:	02 2e       	mov	r0, r18
    13b2:	02 c0       	rjmp	.+4      	; 0x13b8 <MDIO_voidSetPinValue+0x8e>
    13b4:	88 0f       	add	r24, r24
    13b6:	99 1f       	adc	r25, r25
    13b8:	0a 94       	dec	r0
    13ba:	e2 f7       	brpl	.-8      	; 0x13b4 <MDIO_voidSetPinValue+0x8a>
    13bc:	84 2b       	or	r24, r20
    13be:	8c 93       	st	X, r24
    13c0:	b3 c0       	rjmp	.+358    	; 0x1528 <MDIO_voidSetPinValue+0x1fe>
			/*case PORTB SET the bit number PinId in PORTB register */
			case DIO_PORTB:	SET_BIT(PORTB_REG,copy_u8PinId);break;
    13c2:	a8 e3       	ldi	r26, 0x38	; 56
    13c4:	b0 e0       	ldi	r27, 0x00	; 0
    13c6:	e8 e3       	ldi	r30, 0x38	; 56
    13c8:	f0 e0       	ldi	r31, 0x00	; 0
    13ca:	80 81       	ld	r24, Z
    13cc:	48 2f       	mov	r20, r24
    13ce:	89 81       	ldd	r24, Y+1	; 0x01
    13d0:	28 2f       	mov	r18, r24
    13d2:	30 e0       	ldi	r19, 0x00	; 0
    13d4:	81 e0       	ldi	r24, 0x01	; 1
    13d6:	90 e0       	ldi	r25, 0x00	; 0
    13d8:	02 2e       	mov	r0, r18
    13da:	02 c0       	rjmp	.+4      	; 0x13e0 <MDIO_voidSetPinValue+0xb6>
    13dc:	88 0f       	add	r24, r24
    13de:	99 1f       	adc	r25, r25
    13e0:	0a 94       	dec	r0
    13e2:	e2 f7       	brpl	.-8      	; 0x13dc <MDIO_voidSetPinValue+0xb2>
    13e4:	84 2b       	or	r24, r20
    13e6:	8c 93       	st	X, r24
    13e8:	9f c0       	rjmp	.+318    	; 0x1528 <MDIO_voidSetPinValue+0x1fe>
			/*case PORTC SET the bit number PinId in PORTC register */
			case DIO_PORTC:	SET_BIT(PORTC_REG,copy_u8PinId);break;
    13ea:	a5 e3       	ldi	r26, 0x35	; 53
    13ec:	b0 e0       	ldi	r27, 0x00	; 0
    13ee:	e5 e3       	ldi	r30, 0x35	; 53
    13f0:	f0 e0       	ldi	r31, 0x00	; 0
    13f2:	80 81       	ld	r24, Z
    13f4:	48 2f       	mov	r20, r24
    13f6:	89 81       	ldd	r24, Y+1	; 0x01
    13f8:	28 2f       	mov	r18, r24
    13fa:	30 e0       	ldi	r19, 0x00	; 0
    13fc:	81 e0       	ldi	r24, 0x01	; 1
    13fe:	90 e0       	ldi	r25, 0x00	; 0
    1400:	02 2e       	mov	r0, r18
    1402:	02 c0       	rjmp	.+4      	; 0x1408 <MDIO_voidSetPinValue+0xde>
    1404:	88 0f       	add	r24, r24
    1406:	99 1f       	adc	r25, r25
    1408:	0a 94       	dec	r0
    140a:	e2 f7       	brpl	.-8      	; 0x1404 <MDIO_voidSetPinValue+0xda>
    140c:	84 2b       	or	r24, r20
    140e:	8c 93       	st	X, r24
    1410:	8b c0       	rjmp	.+278    	; 0x1528 <MDIO_voidSetPinValue+0x1fe>
			/*case PORTD SET the bit number PinId in PORTD register */
			case DIO_PORTD:	SET_BIT(PORTD_REG,copy_u8PinId);break;
    1412:	a2 e3       	ldi	r26, 0x32	; 50
    1414:	b0 e0       	ldi	r27, 0x00	; 0
    1416:	e2 e3       	ldi	r30, 0x32	; 50
    1418:	f0 e0       	ldi	r31, 0x00	; 0
    141a:	80 81       	ld	r24, Z
    141c:	48 2f       	mov	r20, r24
    141e:	89 81       	ldd	r24, Y+1	; 0x01
    1420:	28 2f       	mov	r18, r24
    1422:	30 e0       	ldi	r19, 0x00	; 0
    1424:	81 e0       	ldi	r24, 0x01	; 1
    1426:	90 e0       	ldi	r25, 0x00	; 0
    1428:	02 2e       	mov	r0, r18
    142a:	02 c0       	rjmp	.+4      	; 0x1430 <MDIO_voidSetPinValue+0x106>
    142c:	88 0f       	add	r24, r24
    142e:	99 1f       	adc	r25, r25
    1430:	0a 94       	dec	r0
    1432:	e2 f7       	brpl	.-8      	; 0x142c <MDIO_voidSetPinValue+0x102>
    1434:	84 2b       	or	r24, r20
    1436:	8c 93       	st	X, r24
    1438:	77 c0       	rjmp	.+238    	; 0x1528 <MDIO_voidSetPinValue+0x1fe>
			}
		}
		/*Value is LOW*/
		else if(copy_u8PinValue == DIO_LOW)
    143a:	8b 81       	ldd	r24, Y+3	; 0x03
    143c:	88 23       	and	r24, r24
    143e:	09 f0       	breq	.+2      	; 0x1442 <MDIO_voidSetPinValue+0x118>
    1440:	73 c0       	rjmp	.+230    	; 0x1528 <MDIO_voidSetPinValue+0x1fe>
		{
			/*Switch on PortId*/
			switch(copy_u8PortId)
    1442:	8a 81       	ldd	r24, Y+2	; 0x02
    1444:	28 2f       	mov	r18, r24
    1446:	30 e0       	ldi	r19, 0x00	; 0
    1448:	3d 83       	std	Y+5, r19	; 0x05
    144a:	2c 83       	std	Y+4, r18	; 0x04
    144c:	8c 81       	ldd	r24, Y+4	; 0x04
    144e:	9d 81       	ldd	r25, Y+5	; 0x05
    1450:	81 30       	cpi	r24, 0x01	; 1
    1452:	91 05       	cpc	r25, r1
    1454:	59 f1       	breq	.+86     	; 0x14ac <MDIO_voidSetPinValue+0x182>
    1456:	2c 81       	ldd	r18, Y+4	; 0x04
    1458:	3d 81       	ldd	r19, Y+5	; 0x05
    145a:	22 30       	cpi	r18, 0x02	; 2
    145c:	31 05       	cpc	r19, r1
    145e:	2c f4       	brge	.+10     	; 0x146a <MDIO_voidSetPinValue+0x140>
    1460:	8c 81       	ldd	r24, Y+4	; 0x04
    1462:	9d 81       	ldd	r25, Y+5	; 0x05
    1464:	00 97       	sbiw	r24, 0x00	; 0
    1466:	69 f0       	breq	.+26     	; 0x1482 <MDIO_voidSetPinValue+0x158>
    1468:	5f c0       	rjmp	.+190    	; 0x1528 <MDIO_voidSetPinValue+0x1fe>
    146a:	2c 81       	ldd	r18, Y+4	; 0x04
    146c:	3d 81       	ldd	r19, Y+5	; 0x05
    146e:	22 30       	cpi	r18, 0x02	; 2
    1470:	31 05       	cpc	r19, r1
    1472:	89 f1       	breq	.+98     	; 0x14d6 <MDIO_voidSetPinValue+0x1ac>
    1474:	8c 81       	ldd	r24, Y+4	; 0x04
    1476:	9d 81       	ldd	r25, Y+5	; 0x05
    1478:	83 30       	cpi	r24, 0x03	; 3
    147a:	91 05       	cpc	r25, r1
    147c:	09 f4       	brne	.+2      	; 0x1480 <MDIO_voidSetPinValue+0x156>
    147e:	40 c0       	rjmp	.+128    	; 0x1500 <MDIO_voidSetPinValue+0x1d6>
    1480:	53 c0       	rjmp	.+166    	; 0x1528 <MDIO_voidSetPinValue+0x1fe>
			{
			/*case PORTA Clear the bit number PinId in PORTA register */
			case DIO_PORTA:	CLR_BIT(PORTA_REG,copy_u8PinId);break;
    1482:	ab e3       	ldi	r26, 0x3B	; 59
    1484:	b0 e0       	ldi	r27, 0x00	; 0
    1486:	eb e3       	ldi	r30, 0x3B	; 59
    1488:	f0 e0       	ldi	r31, 0x00	; 0
    148a:	80 81       	ld	r24, Z
    148c:	48 2f       	mov	r20, r24
    148e:	89 81       	ldd	r24, Y+1	; 0x01
    1490:	28 2f       	mov	r18, r24
    1492:	30 e0       	ldi	r19, 0x00	; 0
    1494:	81 e0       	ldi	r24, 0x01	; 1
    1496:	90 e0       	ldi	r25, 0x00	; 0
    1498:	02 2e       	mov	r0, r18
    149a:	02 c0       	rjmp	.+4      	; 0x14a0 <MDIO_voidSetPinValue+0x176>
    149c:	88 0f       	add	r24, r24
    149e:	99 1f       	adc	r25, r25
    14a0:	0a 94       	dec	r0
    14a2:	e2 f7       	brpl	.-8      	; 0x149c <MDIO_voidSetPinValue+0x172>
    14a4:	80 95       	com	r24
    14a6:	84 23       	and	r24, r20
    14a8:	8c 93       	st	X, r24
    14aa:	3e c0       	rjmp	.+124    	; 0x1528 <MDIO_voidSetPinValue+0x1fe>
			/*case PORTB Clear the bit number PinId in PORTB register */
			case DIO_PORTB:	CLR_BIT(PORTB_REG,copy_u8PinId);break;
    14ac:	a8 e3       	ldi	r26, 0x38	; 56
    14ae:	b0 e0       	ldi	r27, 0x00	; 0
    14b0:	e8 e3       	ldi	r30, 0x38	; 56
    14b2:	f0 e0       	ldi	r31, 0x00	; 0
    14b4:	80 81       	ld	r24, Z
    14b6:	48 2f       	mov	r20, r24
    14b8:	89 81       	ldd	r24, Y+1	; 0x01
    14ba:	28 2f       	mov	r18, r24
    14bc:	30 e0       	ldi	r19, 0x00	; 0
    14be:	81 e0       	ldi	r24, 0x01	; 1
    14c0:	90 e0       	ldi	r25, 0x00	; 0
    14c2:	02 2e       	mov	r0, r18
    14c4:	02 c0       	rjmp	.+4      	; 0x14ca <MDIO_voidSetPinValue+0x1a0>
    14c6:	88 0f       	add	r24, r24
    14c8:	99 1f       	adc	r25, r25
    14ca:	0a 94       	dec	r0
    14cc:	e2 f7       	brpl	.-8      	; 0x14c6 <MDIO_voidSetPinValue+0x19c>
    14ce:	80 95       	com	r24
    14d0:	84 23       	and	r24, r20
    14d2:	8c 93       	st	X, r24
    14d4:	29 c0       	rjmp	.+82     	; 0x1528 <MDIO_voidSetPinValue+0x1fe>
			/*case PORTC Clear the bit number PinId in PORTC register */
			case DIO_PORTC:	CLR_BIT(PORTC_REG,copy_u8PinId);break;
    14d6:	a5 e3       	ldi	r26, 0x35	; 53
    14d8:	b0 e0       	ldi	r27, 0x00	; 0
    14da:	e5 e3       	ldi	r30, 0x35	; 53
    14dc:	f0 e0       	ldi	r31, 0x00	; 0
    14de:	80 81       	ld	r24, Z
    14e0:	48 2f       	mov	r20, r24
    14e2:	89 81       	ldd	r24, Y+1	; 0x01
    14e4:	28 2f       	mov	r18, r24
    14e6:	30 e0       	ldi	r19, 0x00	; 0
    14e8:	81 e0       	ldi	r24, 0x01	; 1
    14ea:	90 e0       	ldi	r25, 0x00	; 0
    14ec:	02 2e       	mov	r0, r18
    14ee:	02 c0       	rjmp	.+4      	; 0x14f4 <MDIO_voidSetPinValue+0x1ca>
    14f0:	88 0f       	add	r24, r24
    14f2:	99 1f       	adc	r25, r25
    14f4:	0a 94       	dec	r0
    14f6:	e2 f7       	brpl	.-8      	; 0x14f0 <MDIO_voidSetPinValue+0x1c6>
    14f8:	80 95       	com	r24
    14fa:	84 23       	and	r24, r20
    14fc:	8c 93       	st	X, r24
    14fe:	14 c0       	rjmp	.+40     	; 0x1528 <MDIO_voidSetPinValue+0x1fe>
			/*case PORTD Clear the bit number PinId in PORTD register */
			case DIO_PORTD:	CLR_BIT(PORTD_REG,copy_u8PinId);break;
    1500:	a2 e3       	ldi	r26, 0x32	; 50
    1502:	b0 e0       	ldi	r27, 0x00	; 0
    1504:	e2 e3       	ldi	r30, 0x32	; 50
    1506:	f0 e0       	ldi	r31, 0x00	; 0
    1508:	80 81       	ld	r24, Z
    150a:	48 2f       	mov	r20, r24
    150c:	89 81       	ldd	r24, Y+1	; 0x01
    150e:	28 2f       	mov	r18, r24
    1510:	30 e0       	ldi	r19, 0x00	; 0
    1512:	81 e0       	ldi	r24, 0x01	; 1
    1514:	90 e0       	ldi	r25, 0x00	; 0
    1516:	02 2e       	mov	r0, r18
    1518:	02 c0       	rjmp	.+4      	; 0x151e <MDIO_voidSetPinValue+0x1f4>
    151a:	88 0f       	add	r24, r24
    151c:	99 1f       	adc	r25, r25
    151e:	0a 94       	dec	r0
    1520:	e2 f7       	brpl	.-8      	; 0x151a <MDIO_voidSetPinValue+0x1f0>
    1522:	80 95       	com	r24
    1524:	84 23       	and	r24, r20
    1526:	8c 93       	st	X, r24
	}
	else
	{
		//report error massage
	}	
}
    1528:	27 96       	adiw	r28, 0x07	; 7
    152a:	0f b6       	in	r0, 0x3f	; 63
    152c:	f8 94       	cli
    152e:	de bf       	out	0x3e, r29	; 62
    1530:	0f be       	out	0x3f, r0	; 63
    1532:	cd bf       	out	0x3d, r28	; 61
    1534:	cf 91       	pop	r28
    1536:	df 91       	pop	r29
    1538:	08 95       	ret

0000153a <MDIO_voidTogPinValue>:

void MDIO_voidTogPinValue(u8 copy_u8PinId , u8 copy_u8PortId)
{
    153a:	df 93       	push	r29
    153c:	cf 93       	push	r28
    153e:	00 d0       	rcall	.+0      	; 0x1540 <MDIO_voidTogPinValue+0x6>
    1540:	00 d0       	rcall	.+0      	; 0x1542 <MDIO_voidTogPinValue+0x8>
    1542:	cd b7       	in	r28, 0x3d	; 61
    1544:	de b7       	in	r29, 0x3e	; 62
    1546:	89 83       	std	Y+1, r24	; 0x01
    1548:	6a 83       	std	Y+2, r22	; 0x02
	/*check that PinId and PortId are in Range*/
	if(copy_u8PinId <= DIO_PIN7 && copy_u8PortId <= DIO_PORTD)
    154a:	89 81       	ldd	r24, Y+1	; 0x01
    154c:	88 30       	cpi	r24, 0x08	; 8
    154e:	08 f0       	brcs	.+2      	; 0x1552 <MDIO_voidTogPinValue+0x18>
    1550:	72 c0       	rjmp	.+228    	; 0x1636 <MDIO_voidTogPinValue+0xfc>
    1552:	8a 81       	ldd	r24, Y+2	; 0x02
    1554:	84 30       	cpi	r24, 0x04	; 4
    1556:	08 f0       	brcs	.+2      	; 0x155a <MDIO_voidTogPinValue+0x20>
    1558:	6e c0       	rjmp	.+220    	; 0x1636 <MDIO_voidTogPinValue+0xfc>
	{
		/*Switch on PortId*/
		switch(copy_u8PortId)
    155a:	8a 81       	ldd	r24, Y+2	; 0x02
    155c:	28 2f       	mov	r18, r24
    155e:	30 e0       	ldi	r19, 0x00	; 0
    1560:	3c 83       	std	Y+4, r19	; 0x04
    1562:	2b 83       	std	Y+3, r18	; 0x03
    1564:	8b 81       	ldd	r24, Y+3	; 0x03
    1566:	9c 81       	ldd	r25, Y+4	; 0x04
    1568:	81 30       	cpi	r24, 0x01	; 1
    156a:	91 05       	cpc	r25, r1
    156c:	49 f1       	breq	.+82     	; 0x15c0 <MDIO_voidTogPinValue+0x86>
    156e:	2b 81       	ldd	r18, Y+3	; 0x03
    1570:	3c 81       	ldd	r19, Y+4	; 0x04
    1572:	22 30       	cpi	r18, 0x02	; 2
    1574:	31 05       	cpc	r19, r1
    1576:	2c f4       	brge	.+10     	; 0x1582 <MDIO_voidTogPinValue+0x48>
    1578:	8b 81       	ldd	r24, Y+3	; 0x03
    157a:	9c 81       	ldd	r25, Y+4	; 0x04
    157c:	00 97       	sbiw	r24, 0x00	; 0
    157e:	61 f0       	breq	.+24     	; 0x1598 <MDIO_voidTogPinValue+0x5e>
    1580:	5a c0       	rjmp	.+180    	; 0x1636 <MDIO_voidTogPinValue+0xfc>
    1582:	2b 81       	ldd	r18, Y+3	; 0x03
    1584:	3c 81       	ldd	r19, Y+4	; 0x04
    1586:	22 30       	cpi	r18, 0x02	; 2
    1588:	31 05       	cpc	r19, r1
    158a:	71 f1       	breq	.+92     	; 0x15e8 <MDIO_voidTogPinValue+0xae>
    158c:	8b 81       	ldd	r24, Y+3	; 0x03
    158e:	9c 81       	ldd	r25, Y+4	; 0x04
    1590:	83 30       	cpi	r24, 0x03	; 3
    1592:	91 05       	cpc	r25, r1
    1594:	e9 f1       	breq	.+122    	; 0x1610 <MDIO_voidTogPinValue+0xd6>
    1596:	4f c0       	rjmp	.+158    	; 0x1636 <MDIO_voidTogPinValue+0xfc>
		{
		/*case PORTA Toggle the bit number PinId in PORTA register*/
		case DIO_PORTA:	TOG_BIT(PORTA_REG,copy_u8PinId);break;
    1598:	ab e3       	ldi	r26, 0x3B	; 59
    159a:	b0 e0       	ldi	r27, 0x00	; 0
    159c:	eb e3       	ldi	r30, 0x3B	; 59
    159e:	f0 e0       	ldi	r31, 0x00	; 0
    15a0:	80 81       	ld	r24, Z
    15a2:	48 2f       	mov	r20, r24
    15a4:	89 81       	ldd	r24, Y+1	; 0x01
    15a6:	28 2f       	mov	r18, r24
    15a8:	30 e0       	ldi	r19, 0x00	; 0
    15aa:	81 e0       	ldi	r24, 0x01	; 1
    15ac:	90 e0       	ldi	r25, 0x00	; 0
    15ae:	02 2e       	mov	r0, r18
    15b0:	02 c0       	rjmp	.+4      	; 0x15b6 <MDIO_voidTogPinValue+0x7c>
    15b2:	88 0f       	add	r24, r24
    15b4:	99 1f       	adc	r25, r25
    15b6:	0a 94       	dec	r0
    15b8:	e2 f7       	brpl	.-8      	; 0x15b2 <MDIO_voidTogPinValue+0x78>
    15ba:	84 27       	eor	r24, r20
    15bc:	8c 93       	st	X, r24
    15be:	3b c0       	rjmp	.+118    	; 0x1636 <MDIO_voidTogPinValue+0xfc>
		/*case PORTB Toggle the bit number PinId in PORTB register*/
		case DIO_PORTB:	TOG_BIT(PORTB_REG,copy_u8PinId);break;
    15c0:	a8 e3       	ldi	r26, 0x38	; 56
    15c2:	b0 e0       	ldi	r27, 0x00	; 0
    15c4:	e8 e3       	ldi	r30, 0x38	; 56
    15c6:	f0 e0       	ldi	r31, 0x00	; 0
    15c8:	80 81       	ld	r24, Z
    15ca:	48 2f       	mov	r20, r24
    15cc:	89 81       	ldd	r24, Y+1	; 0x01
    15ce:	28 2f       	mov	r18, r24
    15d0:	30 e0       	ldi	r19, 0x00	; 0
    15d2:	81 e0       	ldi	r24, 0x01	; 1
    15d4:	90 e0       	ldi	r25, 0x00	; 0
    15d6:	02 2e       	mov	r0, r18
    15d8:	02 c0       	rjmp	.+4      	; 0x15de <MDIO_voidTogPinValue+0xa4>
    15da:	88 0f       	add	r24, r24
    15dc:	99 1f       	adc	r25, r25
    15de:	0a 94       	dec	r0
    15e0:	e2 f7       	brpl	.-8      	; 0x15da <MDIO_voidTogPinValue+0xa0>
    15e2:	84 27       	eor	r24, r20
    15e4:	8c 93       	st	X, r24
    15e6:	27 c0       	rjmp	.+78     	; 0x1636 <MDIO_voidTogPinValue+0xfc>
		/*case PORTC Toggle the bit number PinId in PORTC register*/
		case DIO_PORTC:	TOG_BIT(PORTC_REG,copy_u8PinId);break;
    15e8:	a5 e3       	ldi	r26, 0x35	; 53
    15ea:	b0 e0       	ldi	r27, 0x00	; 0
    15ec:	e5 e3       	ldi	r30, 0x35	; 53
    15ee:	f0 e0       	ldi	r31, 0x00	; 0
    15f0:	80 81       	ld	r24, Z
    15f2:	48 2f       	mov	r20, r24
    15f4:	89 81       	ldd	r24, Y+1	; 0x01
    15f6:	28 2f       	mov	r18, r24
    15f8:	30 e0       	ldi	r19, 0x00	; 0
    15fa:	81 e0       	ldi	r24, 0x01	; 1
    15fc:	90 e0       	ldi	r25, 0x00	; 0
    15fe:	02 2e       	mov	r0, r18
    1600:	02 c0       	rjmp	.+4      	; 0x1606 <MDIO_voidTogPinValue+0xcc>
    1602:	88 0f       	add	r24, r24
    1604:	99 1f       	adc	r25, r25
    1606:	0a 94       	dec	r0
    1608:	e2 f7       	brpl	.-8      	; 0x1602 <MDIO_voidTogPinValue+0xc8>
    160a:	84 27       	eor	r24, r20
    160c:	8c 93       	st	X, r24
    160e:	13 c0       	rjmp	.+38     	; 0x1636 <MDIO_voidTogPinValue+0xfc>
		/*case PORTD Toggle the bit number PinId in PORTD register*/
		case DIO_PORTD:	TOG_BIT(PORTD_REG,copy_u8PinId);break;
    1610:	a2 e3       	ldi	r26, 0x32	; 50
    1612:	b0 e0       	ldi	r27, 0x00	; 0
    1614:	e2 e3       	ldi	r30, 0x32	; 50
    1616:	f0 e0       	ldi	r31, 0x00	; 0
    1618:	80 81       	ld	r24, Z
    161a:	48 2f       	mov	r20, r24
    161c:	89 81       	ldd	r24, Y+1	; 0x01
    161e:	28 2f       	mov	r18, r24
    1620:	30 e0       	ldi	r19, 0x00	; 0
    1622:	81 e0       	ldi	r24, 0x01	; 1
    1624:	90 e0       	ldi	r25, 0x00	; 0
    1626:	02 2e       	mov	r0, r18
    1628:	02 c0       	rjmp	.+4      	; 0x162e <MDIO_voidTogPinValue+0xf4>
    162a:	88 0f       	add	r24, r24
    162c:	99 1f       	adc	r25, r25
    162e:	0a 94       	dec	r0
    1630:	e2 f7       	brpl	.-8      	; 0x162a <MDIO_voidTogPinValue+0xf0>
    1632:	84 27       	eor	r24, r20
    1634:	8c 93       	st	X, r24
	}
	else
	{
		//report error massage
	}	
}
    1636:	0f 90       	pop	r0
    1638:	0f 90       	pop	r0
    163a:	0f 90       	pop	r0
    163c:	0f 90       	pop	r0
    163e:	cf 91       	pop	r28
    1640:	df 91       	pop	r29
    1642:	08 95       	ret

00001644 <MDIO_u8GetPinValue>:

u8 MDIO_u8GetPinValue(u8 copy_u8PinId , u8 copy_u8PortId)
{
    1644:	df 93       	push	r29
    1646:	cf 93       	push	r28
    1648:	00 d0       	rcall	.+0      	; 0x164a <MDIO_u8GetPinValue+0x6>
    164a:	00 d0       	rcall	.+0      	; 0x164c <MDIO_u8GetPinValue+0x8>
    164c:	0f 92       	push	r0
    164e:	cd b7       	in	r28, 0x3d	; 61
    1650:	de b7       	in	r29, 0x3e	; 62
    1652:	8a 83       	std	Y+2, r24	; 0x02
    1654:	6b 83       	std	Y+3, r22	; 0x03
	/*8_bit variable which hold and return The Value of Pin */
	u8 Local_u8Pinvalue;
	/*check that PinId and PortId are in Range*/
	if(copy_u8PinId <= DIO_PIN7 && copy_u8PortId <= DIO_PORTD)
    1656:	8a 81       	ldd	r24, Y+2	; 0x02
    1658:	88 30       	cpi	r24, 0x08	; 8
    165a:	08 f0       	brcs	.+2      	; 0x165e <MDIO_u8GetPinValue+0x1a>
    165c:	6a c0       	rjmp	.+212    	; 0x1732 <MDIO_u8GetPinValue+0xee>
    165e:	8b 81       	ldd	r24, Y+3	; 0x03
    1660:	84 30       	cpi	r24, 0x04	; 4
    1662:	08 f0       	brcs	.+2      	; 0x1666 <MDIO_u8GetPinValue+0x22>
    1664:	66 c0       	rjmp	.+204    	; 0x1732 <MDIO_u8GetPinValue+0xee>
	{
		/*Switch on PortId*/
		switch(copy_u8PortId)
    1666:	8b 81       	ldd	r24, Y+3	; 0x03
    1668:	28 2f       	mov	r18, r24
    166a:	30 e0       	ldi	r19, 0x00	; 0
    166c:	3d 83       	std	Y+5, r19	; 0x05
    166e:	2c 83       	std	Y+4, r18	; 0x04
    1670:	8c 81       	ldd	r24, Y+4	; 0x04
    1672:	9d 81       	ldd	r25, Y+5	; 0x05
    1674:	81 30       	cpi	r24, 0x01	; 1
    1676:	91 05       	cpc	r25, r1
    1678:	39 f1       	breq	.+78     	; 0x16c8 <MDIO_u8GetPinValue+0x84>
    167a:	2c 81       	ldd	r18, Y+4	; 0x04
    167c:	3d 81       	ldd	r19, Y+5	; 0x05
    167e:	22 30       	cpi	r18, 0x02	; 2
    1680:	31 05       	cpc	r19, r1
    1682:	2c f4       	brge	.+10     	; 0x168e <MDIO_u8GetPinValue+0x4a>
    1684:	8c 81       	ldd	r24, Y+4	; 0x04
    1686:	9d 81       	ldd	r25, Y+5	; 0x05
    1688:	00 97       	sbiw	r24, 0x00	; 0
    168a:	61 f0       	breq	.+24     	; 0x16a4 <MDIO_u8GetPinValue+0x60>
    168c:	52 c0       	rjmp	.+164    	; 0x1732 <MDIO_u8GetPinValue+0xee>
    168e:	2c 81       	ldd	r18, Y+4	; 0x04
    1690:	3d 81       	ldd	r19, Y+5	; 0x05
    1692:	22 30       	cpi	r18, 0x02	; 2
    1694:	31 05       	cpc	r19, r1
    1696:	51 f1       	breq	.+84     	; 0x16ec <MDIO_u8GetPinValue+0xa8>
    1698:	8c 81       	ldd	r24, Y+4	; 0x04
    169a:	9d 81       	ldd	r25, Y+5	; 0x05
    169c:	83 30       	cpi	r24, 0x03	; 3
    169e:	91 05       	cpc	r25, r1
    16a0:	b9 f1       	breq	.+110    	; 0x1710 <MDIO_u8GetPinValue+0xcc>
    16a2:	47 c0       	rjmp	.+142    	; 0x1732 <MDIO_u8GetPinValue+0xee>
		{
		/*case PORTA Get Bit Number PinId from PINA register and assign it to Local_u8Pinvalue variable*/
		case DIO_PORTA:	Local_u8Pinvalue = GET_BIT(PINA_REG,copy_u8PinId);break;
    16a4:	e9 e3       	ldi	r30, 0x39	; 57
    16a6:	f0 e0       	ldi	r31, 0x00	; 0
    16a8:	80 81       	ld	r24, Z
    16aa:	48 2f       	mov	r20, r24
    16ac:	8a 81       	ldd	r24, Y+2	; 0x02
    16ae:	28 2f       	mov	r18, r24
    16b0:	30 e0       	ldi	r19, 0x00	; 0
    16b2:	81 e0       	ldi	r24, 0x01	; 1
    16b4:	90 e0       	ldi	r25, 0x00	; 0
    16b6:	02 2e       	mov	r0, r18
    16b8:	02 c0       	rjmp	.+4      	; 0x16be <MDIO_u8GetPinValue+0x7a>
    16ba:	88 0f       	add	r24, r24
    16bc:	99 1f       	adc	r25, r25
    16be:	0a 94       	dec	r0
    16c0:	e2 f7       	brpl	.-8      	; 0x16ba <MDIO_u8GetPinValue+0x76>
    16c2:	84 23       	and	r24, r20
    16c4:	89 83       	std	Y+1, r24	; 0x01
    16c6:	35 c0       	rjmp	.+106    	; 0x1732 <MDIO_u8GetPinValue+0xee>
		/*case PORTB Get Bit Number PinId from PINB register and assign it to Local_u8Pinvalue variable*/
		case DIO_PORTB:	Local_u8Pinvalue = GET_BIT(PINB_REG,copy_u8PinId);break;
    16c8:	e6 e3       	ldi	r30, 0x36	; 54
    16ca:	f0 e0       	ldi	r31, 0x00	; 0
    16cc:	80 81       	ld	r24, Z
    16ce:	48 2f       	mov	r20, r24
    16d0:	8a 81       	ldd	r24, Y+2	; 0x02
    16d2:	28 2f       	mov	r18, r24
    16d4:	30 e0       	ldi	r19, 0x00	; 0
    16d6:	81 e0       	ldi	r24, 0x01	; 1
    16d8:	90 e0       	ldi	r25, 0x00	; 0
    16da:	02 2e       	mov	r0, r18
    16dc:	02 c0       	rjmp	.+4      	; 0x16e2 <MDIO_u8GetPinValue+0x9e>
    16de:	88 0f       	add	r24, r24
    16e0:	99 1f       	adc	r25, r25
    16e2:	0a 94       	dec	r0
    16e4:	e2 f7       	brpl	.-8      	; 0x16de <MDIO_u8GetPinValue+0x9a>
    16e6:	84 23       	and	r24, r20
    16e8:	89 83       	std	Y+1, r24	; 0x01
    16ea:	23 c0       	rjmp	.+70     	; 0x1732 <MDIO_u8GetPinValue+0xee>
		/*case PORTC Get Bit Number PinId from PINC register and assign it to Local_u8Pinvalue variable*/
		case DIO_PORTC: Local_u8Pinvalue = GET_BIT(PINC_REG,copy_u8PinId);break;
    16ec:	e3 e3       	ldi	r30, 0x33	; 51
    16ee:	f0 e0       	ldi	r31, 0x00	; 0
    16f0:	80 81       	ld	r24, Z
    16f2:	48 2f       	mov	r20, r24
    16f4:	8a 81       	ldd	r24, Y+2	; 0x02
    16f6:	28 2f       	mov	r18, r24
    16f8:	30 e0       	ldi	r19, 0x00	; 0
    16fa:	81 e0       	ldi	r24, 0x01	; 1
    16fc:	90 e0       	ldi	r25, 0x00	; 0
    16fe:	02 2e       	mov	r0, r18
    1700:	02 c0       	rjmp	.+4      	; 0x1706 <MDIO_u8GetPinValue+0xc2>
    1702:	88 0f       	add	r24, r24
    1704:	99 1f       	adc	r25, r25
    1706:	0a 94       	dec	r0
    1708:	e2 f7       	brpl	.-8      	; 0x1702 <MDIO_u8GetPinValue+0xbe>
    170a:	84 23       	and	r24, r20
    170c:	89 83       	std	Y+1, r24	; 0x01
    170e:	11 c0       	rjmp	.+34     	; 0x1732 <MDIO_u8GetPinValue+0xee>
		/*case PORTD Get Bit Number PinId from PIND register and assign it to Local_u8Pinvalue variable*/
		case DIO_PORTD: Local_u8Pinvalue = GET_BIT(PIND_REG,copy_u8PinId);break;
    1710:	e0 e3       	ldi	r30, 0x30	; 48
    1712:	f0 e0       	ldi	r31, 0x00	; 0
    1714:	80 81       	ld	r24, Z
    1716:	48 2f       	mov	r20, r24
    1718:	8a 81       	ldd	r24, Y+2	; 0x02
    171a:	28 2f       	mov	r18, r24
    171c:	30 e0       	ldi	r19, 0x00	; 0
    171e:	81 e0       	ldi	r24, 0x01	; 1
    1720:	90 e0       	ldi	r25, 0x00	; 0
    1722:	02 2e       	mov	r0, r18
    1724:	02 c0       	rjmp	.+4      	; 0x172a <MDIO_u8GetPinValue+0xe6>
    1726:	88 0f       	add	r24, r24
    1728:	99 1f       	adc	r25, r25
    172a:	0a 94       	dec	r0
    172c:	e2 f7       	brpl	.-8      	; 0x1726 <MDIO_u8GetPinValue+0xe2>
    172e:	84 23       	and	r24, r20
    1730:	89 83       	std	Y+1, r24	; 0x01
	else
	{
		//report error massage
	}
	/*return the pin value*/
	return Local_u8Pinvalue;
    1732:	89 81       	ldd	r24, Y+1	; 0x01
}
    1734:	0f 90       	pop	r0
    1736:	0f 90       	pop	r0
    1738:	0f 90       	pop	r0
    173a:	0f 90       	pop	r0
    173c:	0f 90       	pop	r0
    173e:	cf 91       	pop	r28
    1740:	df 91       	pop	r29
    1742:	08 95       	ret

00001744 <MDIO_voidSetPortMode>:

void MDIO_voidSetPortMode(u8 copy_u8PortId , u8 copy_u8PortMode)
{
    1744:	df 93       	push	r29
    1746:	cf 93       	push	r28
    1748:	00 d0       	rcall	.+0      	; 0x174a <MDIO_voidSetPortMode+0x6>
    174a:	00 d0       	rcall	.+0      	; 0x174c <MDIO_voidSetPortMode+0x8>
    174c:	cd b7       	in	r28, 0x3d	; 61
    174e:	de b7       	in	r29, 0x3e	; 62
    1750:	89 83       	std	Y+1, r24	; 0x01
    1752:	6a 83       	std	Y+2, r22	; 0x02
	/*check that PortId is in Range*/
	if(copy_u8PortId <= DIO_PORTD)
    1754:	89 81       	ldd	r24, Y+1	; 0x01
    1756:	84 30       	cpi	r24, 0x04	; 4
    1758:	90 f5       	brcc	.+100    	; 0x17be <MDIO_voidSetPortMode+0x7a>
	{
		/*switch on PortId*/
		switch(copy_u8PortId)
    175a:	89 81       	ldd	r24, Y+1	; 0x01
    175c:	28 2f       	mov	r18, r24
    175e:	30 e0       	ldi	r19, 0x00	; 0
    1760:	3c 83       	std	Y+4, r19	; 0x04
    1762:	2b 83       	std	Y+3, r18	; 0x03
    1764:	8b 81       	ldd	r24, Y+3	; 0x03
    1766:	9c 81       	ldd	r25, Y+4	; 0x04
    1768:	81 30       	cpi	r24, 0x01	; 1
    176a:	91 05       	cpc	r25, r1
    176c:	d1 f0       	breq	.+52     	; 0x17a2 <MDIO_voidSetPortMode+0x5e>
    176e:	2b 81       	ldd	r18, Y+3	; 0x03
    1770:	3c 81       	ldd	r19, Y+4	; 0x04
    1772:	22 30       	cpi	r18, 0x02	; 2
    1774:	31 05       	cpc	r19, r1
    1776:	2c f4       	brge	.+10     	; 0x1782 <MDIO_voidSetPortMode+0x3e>
    1778:	8b 81       	ldd	r24, Y+3	; 0x03
    177a:	9c 81       	ldd	r25, Y+4	; 0x04
    177c:	00 97       	sbiw	r24, 0x00	; 0
    177e:	61 f0       	breq	.+24     	; 0x1798 <MDIO_voidSetPortMode+0x54>
    1780:	1e c0       	rjmp	.+60     	; 0x17be <MDIO_voidSetPortMode+0x7a>
    1782:	2b 81       	ldd	r18, Y+3	; 0x03
    1784:	3c 81       	ldd	r19, Y+4	; 0x04
    1786:	22 30       	cpi	r18, 0x02	; 2
    1788:	31 05       	cpc	r19, r1
    178a:	81 f0       	breq	.+32     	; 0x17ac <MDIO_voidSetPortMode+0x68>
    178c:	8b 81       	ldd	r24, Y+3	; 0x03
    178e:	9c 81       	ldd	r25, Y+4	; 0x04
    1790:	83 30       	cpi	r24, 0x03	; 3
    1792:	91 05       	cpc	r25, r1
    1794:	81 f0       	breq	.+32     	; 0x17b6 <MDIO_voidSetPortMode+0x72>
    1796:	13 c0       	rjmp	.+38     	; 0x17be <MDIO_voidSetPortMode+0x7a>
		{
			/*case PORTA Assign The Value to PORTA register*/
			case DIO_PORTA:	ASSIGN_REG(DDRA_REG,copy_u8PortMode);break;
    1798:	ea e3       	ldi	r30, 0x3A	; 58
    179a:	f0 e0       	ldi	r31, 0x00	; 0
    179c:	8a 81       	ldd	r24, Y+2	; 0x02
    179e:	80 83       	st	Z, r24
    17a0:	0e c0       	rjmp	.+28     	; 0x17be <MDIO_voidSetPortMode+0x7a>
			/*case PORTB Assign The Value to PORTB register*/
			case DIO_PORTB:	ASSIGN_REG(DDRB_REG,copy_u8PortMode);break;
    17a2:	e7 e3       	ldi	r30, 0x37	; 55
    17a4:	f0 e0       	ldi	r31, 0x00	; 0
    17a6:	8a 81       	ldd	r24, Y+2	; 0x02
    17a8:	80 83       	st	Z, r24
    17aa:	09 c0       	rjmp	.+18     	; 0x17be <MDIO_voidSetPortMode+0x7a>
			/*case PORTC Assign The Value to PORTC register*/
			case DIO_PORTC:	ASSIGN_REG(DDRC_REG,copy_u8PortMode);break;
    17ac:	e4 e3       	ldi	r30, 0x34	; 52
    17ae:	f0 e0       	ldi	r31, 0x00	; 0
    17b0:	8a 81       	ldd	r24, Y+2	; 0x02
    17b2:	80 83       	st	Z, r24
    17b4:	04 c0       	rjmp	.+8      	; 0x17be <MDIO_voidSetPortMode+0x7a>
			/*case PORTD Assign The Value to PORTD register*/
			case DIO_PORTD: ASSIGN_REG(DDRD_REG,copy_u8PortMode);break;
    17b6:	e1 e3       	ldi	r30, 0x31	; 49
    17b8:	f0 e0       	ldi	r31, 0x00	; 0
    17ba:	8a 81       	ldd	r24, Y+2	; 0x02
    17bc:	80 83       	st	Z, r24
	}
	else
	{
		//report error massage
	}
}
    17be:	0f 90       	pop	r0
    17c0:	0f 90       	pop	r0
    17c2:	0f 90       	pop	r0
    17c4:	0f 90       	pop	r0
    17c6:	cf 91       	pop	r28
    17c8:	df 91       	pop	r29
    17ca:	08 95       	ret

000017cc <MDIO_voidSetPortValue>:

void MDIO_voidSetPortValue(u8 copy_u8PortId , u8 copy_u8PortValue)
{
    17cc:	df 93       	push	r29
    17ce:	cf 93       	push	r28
    17d0:	00 d0       	rcall	.+0      	; 0x17d2 <MDIO_voidSetPortValue+0x6>
    17d2:	00 d0       	rcall	.+0      	; 0x17d4 <MDIO_voidSetPortValue+0x8>
    17d4:	cd b7       	in	r28, 0x3d	; 61
    17d6:	de b7       	in	r29, 0x3e	; 62
    17d8:	89 83       	std	Y+1, r24	; 0x01
    17da:	6a 83       	std	Y+2, r22	; 0x02
	/*check that PortId is in Range*/
	if(copy_u8PortId <= DIO_PORTD)
    17dc:	89 81       	ldd	r24, Y+1	; 0x01
    17de:	84 30       	cpi	r24, 0x04	; 4
    17e0:	90 f5       	brcc	.+100    	; 0x1846 <MDIO_voidSetPortValue+0x7a>
	{
			/*switch on PortId*/
			switch(copy_u8PortId)
    17e2:	89 81       	ldd	r24, Y+1	; 0x01
    17e4:	28 2f       	mov	r18, r24
    17e6:	30 e0       	ldi	r19, 0x00	; 0
    17e8:	3c 83       	std	Y+4, r19	; 0x04
    17ea:	2b 83       	std	Y+3, r18	; 0x03
    17ec:	8b 81       	ldd	r24, Y+3	; 0x03
    17ee:	9c 81       	ldd	r25, Y+4	; 0x04
    17f0:	81 30       	cpi	r24, 0x01	; 1
    17f2:	91 05       	cpc	r25, r1
    17f4:	d1 f0       	breq	.+52     	; 0x182a <MDIO_voidSetPortValue+0x5e>
    17f6:	2b 81       	ldd	r18, Y+3	; 0x03
    17f8:	3c 81       	ldd	r19, Y+4	; 0x04
    17fa:	22 30       	cpi	r18, 0x02	; 2
    17fc:	31 05       	cpc	r19, r1
    17fe:	2c f4       	brge	.+10     	; 0x180a <MDIO_voidSetPortValue+0x3e>
    1800:	8b 81       	ldd	r24, Y+3	; 0x03
    1802:	9c 81       	ldd	r25, Y+4	; 0x04
    1804:	00 97       	sbiw	r24, 0x00	; 0
    1806:	61 f0       	breq	.+24     	; 0x1820 <MDIO_voidSetPortValue+0x54>
    1808:	1e c0       	rjmp	.+60     	; 0x1846 <MDIO_voidSetPortValue+0x7a>
    180a:	2b 81       	ldd	r18, Y+3	; 0x03
    180c:	3c 81       	ldd	r19, Y+4	; 0x04
    180e:	22 30       	cpi	r18, 0x02	; 2
    1810:	31 05       	cpc	r19, r1
    1812:	81 f0       	breq	.+32     	; 0x1834 <MDIO_voidSetPortValue+0x68>
    1814:	8b 81       	ldd	r24, Y+3	; 0x03
    1816:	9c 81       	ldd	r25, Y+4	; 0x04
    1818:	83 30       	cpi	r24, 0x03	; 3
    181a:	91 05       	cpc	r25, r1
    181c:	81 f0       	breq	.+32     	; 0x183e <MDIO_voidSetPortValue+0x72>
    181e:	13 c0       	rjmp	.+38     	; 0x1846 <MDIO_voidSetPortValue+0x7a>
			{
			    /*case PORTA Assign The Value to PORTA register*/
				case DIO_PORTA:	ASSIGN_REG(PORTA_REG,copy_u8PortValue);break;
    1820:	eb e3       	ldi	r30, 0x3B	; 59
    1822:	f0 e0       	ldi	r31, 0x00	; 0
    1824:	8a 81       	ldd	r24, Y+2	; 0x02
    1826:	80 83       	st	Z, r24
    1828:	0e c0       	rjmp	.+28     	; 0x1846 <MDIO_voidSetPortValue+0x7a>
				/*case PORTB Assign The Value to PORTB register*/
				case DIO_PORTB:	ASSIGN_REG(PORTB_REG,copy_u8PortValue);break;
    182a:	e8 e3       	ldi	r30, 0x38	; 56
    182c:	f0 e0       	ldi	r31, 0x00	; 0
    182e:	8a 81       	ldd	r24, Y+2	; 0x02
    1830:	80 83       	st	Z, r24
    1832:	09 c0       	rjmp	.+18     	; 0x1846 <MDIO_voidSetPortValue+0x7a>
				/*case PORTC Assign The Value to PORTC register*/
				case DIO_PORTC:	ASSIGN_REG(PORTC_REG,copy_u8PortValue);break;
    1834:	e5 e3       	ldi	r30, 0x35	; 53
    1836:	f0 e0       	ldi	r31, 0x00	; 0
    1838:	8a 81       	ldd	r24, Y+2	; 0x02
    183a:	80 83       	st	Z, r24
    183c:	04 c0       	rjmp	.+8      	; 0x1846 <MDIO_voidSetPortValue+0x7a>
				/*case PORTD Assign The Value to PORTD register*/
				case DIO_PORTD: ASSIGN_REG(PORTD_REG,copy_u8PortValue);break;
    183e:	e2 e3       	ldi	r30, 0x32	; 50
    1840:	f0 e0       	ldi	r31, 0x00	; 0
    1842:	8a 81       	ldd	r24, Y+2	; 0x02
    1844:	80 83       	st	Z, r24
	}
	else
	{
		//report error massage
	}	
}
    1846:	0f 90       	pop	r0
    1848:	0f 90       	pop	r0
    184a:	0f 90       	pop	r0
    184c:	0f 90       	pop	r0
    184e:	cf 91       	pop	r28
    1850:	df 91       	pop	r29
    1852:	08 95       	ret

00001854 <MDIO_voidTogPortValue>:

void MDIO_voidTogPortValue(u8 copy_u8PortId)
{
    1854:	df 93       	push	r29
    1856:	cf 93       	push	r28
    1858:	00 d0       	rcall	.+0      	; 0x185a <MDIO_voidTogPortValue+0x6>
    185a:	0f 92       	push	r0
    185c:	cd b7       	in	r28, 0x3d	; 61
    185e:	de b7       	in	r29, 0x3e	; 62
    1860:	89 83       	std	Y+1, r24	; 0x01
	/*check that PortId is in Range*/
	if(copy_u8PortId <= DIO_PORTD)
    1862:	89 81       	ldd	r24, Y+1	; 0x01
    1864:	84 30       	cpi	r24, 0x04	; 4
    1866:	08 f0       	brcs	.+2      	; 0x186a <MDIO_voidTogPortValue+0x16>
    1868:	3e c0       	rjmp	.+124    	; 0x18e6 <MDIO_voidTogPortValue+0x92>
	{
		/*switch on PortId*/
		switch(copy_u8PortId)
    186a:	89 81       	ldd	r24, Y+1	; 0x01
    186c:	28 2f       	mov	r18, r24
    186e:	30 e0       	ldi	r19, 0x00	; 0
    1870:	3b 83       	std	Y+3, r19	; 0x03
    1872:	2a 83       	std	Y+2, r18	; 0x02
    1874:	8a 81       	ldd	r24, Y+2	; 0x02
    1876:	9b 81       	ldd	r25, Y+3	; 0x03
    1878:	81 30       	cpi	r24, 0x01	; 1
    187a:	91 05       	cpc	r25, r1
    187c:	e9 f0       	breq	.+58     	; 0x18b8 <MDIO_voidTogPortValue+0x64>
    187e:	2a 81       	ldd	r18, Y+2	; 0x02
    1880:	3b 81       	ldd	r19, Y+3	; 0x03
    1882:	22 30       	cpi	r18, 0x02	; 2
    1884:	31 05       	cpc	r19, r1
    1886:	2c f4       	brge	.+10     	; 0x1892 <MDIO_voidTogPortValue+0x3e>
    1888:	8a 81       	ldd	r24, Y+2	; 0x02
    188a:	9b 81       	ldd	r25, Y+3	; 0x03
    188c:	00 97       	sbiw	r24, 0x00	; 0
    188e:	61 f0       	breq	.+24     	; 0x18a8 <MDIO_voidTogPortValue+0x54>
    1890:	2a c0       	rjmp	.+84     	; 0x18e6 <MDIO_voidTogPortValue+0x92>
    1892:	2a 81       	ldd	r18, Y+2	; 0x02
    1894:	3b 81       	ldd	r19, Y+3	; 0x03
    1896:	22 30       	cpi	r18, 0x02	; 2
    1898:	31 05       	cpc	r19, r1
    189a:	b1 f0       	breq	.+44     	; 0x18c8 <MDIO_voidTogPortValue+0x74>
    189c:	8a 81       	ldd	r24, Y+2	; 0x02
    189e:	9b 81       	ldd	r25, Y+3	; 0x03
    18a0:	83 30       	cpi	r24, 0x03	; 3
    18a2:	91 05       	cpc	r25, r1
    18a4:	c9 f0       	breq	.+50     	; 0x18d8 <MDIO_voidTogPortValue+0x84>
    18a6:	1f c0       	rjmp	.+62     	; 0x18e6 <MDIO_voidTogPortValue+0x92>
		{
		    /*case PORTA Toggle The Value In PORTA register*/
			case DIO_PORTA:	TOG_REG(PORTA_REG);break;
    18a8:	ab e3       	ldi	r26, 0x3B	; 59
    18aa:	b0 e0       	ldi	r27, 0x00	; 0
    18ac:	eb e3       	ldi	r30, 0x3B	; 59
    18ae:	f0 e0       	ldi	r31, 0x00	; 0
    18b0:	80 81       	ld	r24, Z
    18b2:	80 95       	com	r24
    18b4:	8c 93       	st	X, r24
    18b6:	17 c0       	rjmp	.+46     	; 0x18e6 <MDIO_voidTogPortValue+0x92>
			/*case PORTB Toggle The Value in PORTB register*/
			case DIO_PORTB:	TOG_REG(PORTB_REG);break;
    18b8:	a8 e3       	ldi	r26, 0x38	; 56
    18ba:	b0 e0       	ldi	r27, 0x00	; 0
    18bc:	e8 e3       	ldi	r30, 0x38	; 56
    18be:	f0 e0       	ldi	r31, 0x00	; 0
    18c0:	80 81       	ld	r24, Z
    18c2:	80 95       	com	r24
    18c4:	8c 93       	st	X, r24
    18c6:	0f c0       	rjmp	.+30     	; 0x18e6 <MDIO_voidTogPortValue+0x92>
			/*case PORTC Toggle The Value in PORTC register*/
			case DIO_PORTC:	TOG_REG(PORTC_REG);break;
    18c8:	a5 e3       	ldi	r26, 0x35	; 53
    18ca:	b0 e0       	ldi	r27, 0x00	; 0
    18cc:	e5 e3       	ldi	r30, 0x35	; 53
    18ce:	f0 e0       	ldi	r31, 0x00	; 0
    18d0:	80 81       	ld	r24, Z
    18d2:	80 95       	com	r24
    18d4:	8c 93       	st	X, r24
    18d6:	07 c0       	rjmp	.+14     	; 0x18e6 <MDIO_voidTogPortValue+0x92>
			/*case PORTD Toggle The Value in PORTD register*/
			case DIO_PORTD: TOG_REG(PORTD_REG);break;
    18d8:	a2 e3       	ldi	r26, 0x32	; 50
    18da:	b0 e0       	ldi	r27, 0x00	; 0
    18dc:	e2 e3       	ldi	r30, 0x32	; 50
    18de:	f0 e0       	ldi	r31, 0x00	; 0
    18e0:	80 81       	ld	r24, Z
    18e2:	80 95       	com	r24
    18e4:	8c 93       	st	X, r24
	}
	else
	{
		//report error massage
	}
}
    18e6:	0f 90       	pop	r0
    18e8:	0f 90       	pop	r0
    18ea:	0f 90       	pop	r0
    18ec:	cf 91       	pop	r28
    18ee:	df 91       	pop	r29
    18f0:	08 95       	ret

000018f2 <MDIO_u8GetPortValue>:

u8 MDIO_u8GetPortValue(u8 copy_u8PortId)
{
    18f2:	df 93       	push	r29
    18f4:	cf 93       	push	r28
    18f6:	00 d0       	rcall	.+0      	; 0x18f8 <MDIO_u8GetPortValue+0x6>
    18f8:	00 d0       	rcall	.+0      	; 0x18fa <MDIO_u8GetPortValue+0x8>
    18fa:	cd b7       	in	r28, 0x3d	; 61
    18fc:	de b7       	in	r29, 0x3e	; 62
    18fe:	8a 83       	std	Y+2, r24	; 0x02
	/*local variable to hold the value of PINx register*/
	u8 Local_u8PortValue;
	/*check that PortId is in Range*/
	if(copy_u8PortId <= DIO_PORTD)
    1900:	8a 81       	ldd	r24, Y+2	; 0x02
    1902:	84 30       	cpi	r24, 0x04	; 4
    1904:	90 f5       	brcc	.+100    	; 0x196a <MDIO_u8GetPortValue+0x78>
	{
		/*switch on PortId*/
		switch(copy_u8PortId)
    1906:	8a 81       	ldd	r24, Y+2	; 0x02
    1908:	28 2f       	mov	r18, r24
    190a:	30 e0       	ldi	r19, 0x00	; 0
    190c:	3c 83       	std	Y+4, r19	; 0x04
    190e:	2b 83       	std	Y+3, r18	; 0x03
    1910:	8b 81       	ldd	r24, Y+3	; 0x03
    1912:	9c 81       	ldd	r25, Y+4	; 0x04
    1914:	81 30       	cpi	r24, 0x01	; 1
    1916:	91 05       	cpc	r25, r1
    1918:	d1 f0       	breq	.+52     	; 0x194e <MDIO_u8GetPortValue+0x5c>
    191a:	2b 81       	ldd	r18, Y+3	; 0x03
    191c:	3c 81       	ldd	r19, Y+4	; 0x04
    191e:	22 30       	cpi	r18, 0x02	; 2
    1920:	31 05       	cpc	r19, r1
    1922:	2c f4       	brge	.+10     	; 0x192e <MDIO_u8GetPortValue+0x3c>
    1924:	8b 81       	ldd	r24, Y+3	; 0x03
    1926:	9c 81       	ldd	r25, Y+4	; 0x04
    1928:	00 97       	sbiw	r24, 0x00	; 0
    192a:	61 f0       	breq	.+24     	; 0x1944 <MDIO_u8GetPortValue+0x52>
    192c:	1e c0       	rjmp	.+60     	; 0x196a <MDIO_u8GetPortValue+0x78>
    192e:	2b 81       	ldd	r18, Y+3	; 0x03
    1930:	3c 81       	ldd	r19, Y+4	; 0x04
    1932:	22 30       	cpi	r18, 0x02	; 2
    1934:	31 05       	cpc	r19, r1
    1936:	81 f0       	breq	.+32     	; 0x1958 <MDIO_u8GetPortValue+0x66>
    1938:	8b 81       	ldd	r24, Y+3	; 0x03
    193a:	9c 81       	ldd	r25, Y+4	; 0x04
    193c:	83 30       	cpi	r24, 0x03	; 3
    193e:	91 05       	cpc	r25, r1
    1940:	81 f0       	breq	.+32     	; 0x1962 <MDIO_u8GetPortValue+0x70>
    1942:	13 c0       	rjmp	.+38     	; 0x196a <MDIO_u8GetPortValue+0x78>
		{
		/*case PORTA Get The Value In PINA register and assign it to Local_u8Portvalue variable*/
		case DIO_PORTA:	Local_u8PortValue = GET_REG(PINA_REG);break;
    1944:	e9 e3       	ldi	r30, 0x39	; 57
    1946:	f0 e0       	ldi	r31, 0x00	; 0
    1948:	80 81       	ld	r24, Z
    194a:	89 83       	std	Y+1, r24	; 0x01
    194c:	0e c0       	rjmp	.+28     	; 0x196a <MDIO_u8GetPortValue+0x78>
		/*case PORTB Get The Value In PINB register and assign it to Local_u8Portvalue variable*/
		case DIO_PORTB:	Local_u8PortValue = GET_REG(PINB_REG);break;
    194e:	e6 e3       	ldi	r30, 0x36	; 54
    1950:	f0 e0       	ldi	r31, 0x00	; 0
    1952:	80 81       	ld	r24, Z
    1954:	89 83       	std	Y+1, r24	; 0x01
    1956:	09 c0       	rjmp	.+18     	; 0x196a <MDIO_u8GetPortValue+0x78>
		/*case PORTC Get The Value In PINC register and assign it to Local_u8Portvalue variable*/
		case DIO_PORTC: Local_u8PortValue = GET_REG(PINC_REG);break;
    1958:	e3 e3       	ldi	r30, 0x33	; 51
    195a:	f0 e0       	ldi	r31, 0x00	; 0
    195c:	80 81       	ld	r24, Z
    195e:	89 83       	std	Y+1, r24	; 0x01
    1960:	04 c0       	rjmp	.+8      	; 0x196a <MDIO_u8GetPortValue+0x78>
		/*case PORTD Get The Value In PIND register and assign it to Local_u8Portvalue variable*/
		case DIO_PORTD: Local_u8PortValue = GET_REG(PIND_REG);break;
    1962:	e0 e3       	ldi	r30, 0x30	; 48
    1964:	f0 e0       	ldi	r31, 0x00	; 0
    1966:	80 81       	ld	r24, Z
    1968:	89 83       	std	Y+1, r24	; 0x01
	else
	{
		//report error massage
	}
	/*return the value of PINx register*/
	return Local_u8PortValue;
    196a:	89 81       	ldd	r24, Y+1	; 0x01
}
    196c:	0f 90       	pop	r0
    196e:	0f 90       	pop	r0
    1970:	0f 90       	pop	r0
    1972:	0f 90       	pop	r0
    1974:	cf 91       	pop	r28
    1976:	df 91       	pop	r29
    1978:	08 95       	ret

0000197a <HLCD_voidInit>:
#include "LCD_config.h"
#include "LCD_interface.h"


void HLCD_voidInit(void)
{
    197a:	0f 93       	push	r16
    197c:	1f 93       	push	r17
    197e:	df 93       	push	r29
    1980:	cf 93       	push	r28
    1982:	cd b7       	in	r28, 0x3d	; 61
    1984:	de b7       	in	r29, 0x3e	; 62
    1986:	c6 54       	subi	r28, 0x46	; 70
    1988:	d0 40       	sbci	r29, 0x00	; 0
    198a:	0f b6       	in	r0, 0x3f	; 63
    198c:	f8 94       	cli
    198e:	de bf       	out	0x3e, r29	; 62
    1990:	0f be       	out	0x3f, r0	; 63
    1992:	cd bf       	out	0x3d, r28	; 61
    1994:	fe 01       	movw	r30, r28
    1996:	ed 5b       	subi	r30, 0xBD	; 189
    1998:	ff 4f       	sbci	r31, 0xFF	; 255
    199a:	80 e0       	ldi	r24, 0x00	; 0
    199c:	90 e0       	ldi	r25, 0x00	; 0
    199e:	a0 ef       	ldi	r26, 0xF0	; 240
    19a0:	b1 e4       	ldi	r27, 0x41	; 65
    19a2:	80 83       	st	Z, r24
    19a4:	91 83       	std	Z+1, r25	; 0x01
    19a6:	a2 83       	std	Z+2, r26	; 0x02
    19a8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19aa:	8e 01       	movw	r16, r28
    19ac:	01 5c       	subi	r16, 0xC1	; 193
    19ae:	1f 4f       	sbci	r17, 0xFF	; 255
    19b0:	fe 01       	movw	r30, r28
    19b2:	ed 5b       	subi	r30, 0xBD	; 189
    19b4:	ff 4f       	sbci	r31, 0xFF	; 255
    19b6:	60 81       	ld	r22, Z
    19b8:	71 81       	ldd	r23, Z+1	; 0x01
    19ba:	82 81       	ldd	r24, Z+2	; 0x02
    19bc:	93 81       	ldd	r25, Z+3	; 0x03
    19be:	20 e0       	ldi	r18, 0x00	; 0
    19c0:	30 e0       	ldi	r19, 0x00	; 0
    19c2:	4a ef       	ldi	r20, 0xFA	; 250
    19c4:	54 e4       	ldi	r21, 0x44	; 68
    19c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19ca:	dc 01       	movw	r26, r24
    19cc:	cb 01       	movw	r24, r22
    19ce:	f8 01       	movw	r30, r16
    19d0:	80 83       	st	Z, r24
    19d2:	91 83       	std	Z+1, r25	; 0x01
    19d4:	a2 83       	std	Z+2, r26	; 0x02
    19d6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    19d8:	fe 01       	movw	r30, r28
    19da:	ff 96       	adiw	r30, 0x3f	; 63
    19dc:	60 81       	ld	r22, Z
    19de:	71 81       	ldd	r23, Z+1	; 0x01
    19e0:	82 81       	ldd	r24, Z+2	; 0x02
    19e2:	93 81       	ldd	r25, Z+3	; 0x03
    19e4:	20 e0       	ldi	r18, 0x00	; 0
    19e6:	30 e0       	ldi	r19, 0x00	; 0
    19e8:	40 e8       	ldi	r20, 0x80	; 128
    19ea:	5f e3       	ldi	r21, 0x3F	; 63
    19ec:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    19f0:	88 23       	and	r24, r24
    19f2:	2c f4       	brge	.+10     	; 0x19fe <HLCD_voidInit+0x84>
		__ticks = 1;
    19f4:	81 e0       	ldi	r24, 0x01	; 1
    19f6:	90 e0       	ldi	r25, 0x00	; 0
    19f8:	9e af       	std	Y+62, r25	; 0x3e
    19fa:	8d af       	std	Y+61, r24	; 0x3d
    19fc:	46 c0       	rjmp	.+140    	; 0x1a8a <HLCD_voidInit+0x110>
	else if (__tmp > 65535)
    19fe:	fe 01       	movw	r30, r28
    1a00:	ff 96       	adiw	r30, 0x3f	; 63
    1a02:	60 81       	ld	r22, Z
    1a04:	71 81       	ldd	r23, Z+1	; 0x01
    1a06:	82 81       	ldd	r24, Z+2	; 0x02
    1a08:	93 81       	ldd	r25, Z+3	; 0x03
    1a0a:	20 e0       	ldi	r18, 0x00	; 0
    1a0c:	3f ef       	ldi	r19, 0xFF	; 255
    1a0e:	4f e7       	ldi	r20, 0x7F	; 127
    1a10:	57 e4       	ldi	r21, 0x47	; 71
    1a12:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1a16:	18 16       	cp	r1, r24
    1a18:	64 f5       	brge	.+88     	; 0x1a72 <HLCD_voidInit+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a1a:	fe 01       	movw	r30, r28
    1a1c:	ed 5b       	subi	r30, 0xBD	; 189
    1a1e:	ff 4f       	sbci	r31, 0xFF	; 255
    1a20:	60 81       	ld	r22, Z
    1a22:	71 81       	ldd	r23, Z+1	; 0x01
    1a24:	82 81       	ldd	r24, Z+2	; 0x02
    1a26:	93 81       	ldd	r25, Z+3	; 0x03
    1a28:	20 e0       	ldi	r18, 0x00	; 0
    1a2a:	30 e0       	ldi	r19, 0x00	; 0
    1a2c:	40 e2       	ldi	r20, 0x20	; 32
    1a2e:	51 e4       	ldi	r21, 0x41	; 65
    1a30:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a34:	dc 01       	movw	r26, r24
    1a36:	cb 01       	movw	r24, r22
    1a38:	bc 01       	movw	r22, r24
    1a3a:	cd 01       	movw	r24, r26
    1a3c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a40:	dc 01       	movw	r26, r24
    1a42:	cb 01       	movw	r24, r22
    1a44:	9e af       	std	Y+62, r25	; 0x3e
    1a46:	8d af       	std	Y+61, r24	; 0x3d
    1a48:	0f c0       	rjmp	.+30     	; 0x1a68 <HLCD_voidInit+0xee>
    1a4a:	88 ec       	ldi	r24, 0xC8	; 200
    1a4c:	90 e0       	ldi	r25, 0x00	; 0
    1a4e:	9c af       	std	Y+60, r25	; 0x3c
    1a50:	8b af       	std	Y+59, r24	; 0x3b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1a52:	8b ad       	ldd	r24, Y+59	; 0x3b
    1a54:	9c ad       	ldd	r25, Y+60	; 0x3c
    1a56:	01 97       	sbiw	r24, 0x01	; 1
    1a58:	f1 f7       	brne	.-4      	; 0x1a56 <HLCD_voidInit+0xdc>
    1a5a:	9c af       	std	Y+60, r25	; 0x3c
    1a5c:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a5e:	8d ad       	ldd	r24, Y+61	; 0x3d
    1a60:	9e ad       	ldd	r25, Y+62	; 0x3e
    1a62:	01 97       	sbiw	r24, 0x01	; 1
    1a64:	9e af       	std	Y+62, r25	; 0x3e
    1a66:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a68:	8d ad       	ldd	r24, Y+61	; 0x3d
    1a6a:	9e ad       	ldd	r25, Y+62	; 0x3e
    1a6c:	00 97       	sbiw	r24, 0x00	; 0
    1a6e:	69 f7       	brne	.-38     	; 0x1a4a <HLCD_voidInit+0xd0>
    1a70:	16 c0       	rjmp	.+44     	; 0x1a9e <HLCD_voidInit+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a72:	fe 01       	movw	r30, r28
    1a74:	ff 96       	adiw	r30, 0x3f	; 63
    1a76:	60 81       	ld	r22, Z
    1a78:	71 81       	ldd	r23, Z+1	; 0x01
    1a7a:	82 81       	ldd	r24, Z+2	; 0x02
    1a7c:	93 81       	ldd	r25, Z+3	; 0x03
    1a7e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a82:	dc 01       	movw	r26, r24
    1a84:	cb 01       	movw	r24, r22
    1a86:	9e af       	std	Y+62, r25	; 0x3e
    1a88:	8d af       	std	Y+61, r24	; 0x3d
    1a8a:	8d ad       	ldd	r24, Y+61	; 0x3d
    1a8c:	9e ad       	ldd	r25, Y+62	; 0x3e
    1a8e:	9a af       	std	Y+58, r25	; 0x3a
    1a90:	89 af       	std	Y+57, r24	; 0x39
    1a92:	89 ad       	ldd	r24, Y+57	; 0x39
    1a94:	9a ad       	ldd	r25, Y+58	; 0x3a
    1a96:	01 97       	sbiw	r24, 0x01	; 1
    1a98:	f1 f7       	brne	.-4      	; 0x1a96 <HLCD_voidInit+0x11c>
    1a9a:	9a af       	std	Y+58, r25	; 0x3a
    1a9c:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(1);

	
	#elif LCD_MODE == _4Bit_Mode
	/*Function SET (4bit/2-line/5x7 dot character) and wait 1 ms*/
	HLCD_voidWriteCmd(0x33);
    1a9e:	83 e3       	ldi	r24, 0x33	; 51
    1aa0:	0e 94 35 0f 	call	0x1e6a	; 0x1e6a <HLCD_voidWriteCmd>
	HLCD_voidWriteCmd(0x32);
    1aa4:	82 e3       	ldi	r24, 0x32	; 50
    1aa6:	0e 94 35 0f 	call	0x1e6a	; 0x1e6a <HLCD_voidWriteCmd>
	HLCD_voidWriteCmd(0x28);
    1aaa:	88 e2       	ldi	r24, 0x28	; 40
    1aac:	0e 94 35 0f 	call	0x1e6a	; 0x1e6a <HLCD_voidWriteCmd>
    1ab0:	80 e0       	ldi	r24, 0x00	; 0
    1ab2:	90 e0       	ldi	r25, 0x00	; 0
    1ab4:	a0 e8       	ldi	r26, 0x80	; 128
    1ab6:	bf e3       	ldi	r27, 0x3F	; 63
    1ab8:	8d ab       	std	Y+53, r24	; 0x35
    1aba:	9e ab       	std	Y+54, r25	; 0x36
    1abc:	af ab       	std	Y+55, r26	; 0x37
    1abe:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ac0:	6d a9       	ldd	r22, Y+53	; 0x35
    1ac2:	7e a9       	ldd	r23, Y+54	; 0x36
    1ac4:	8f a9       	ldd	r24, Y+55	; 0x37
    1ac6:	98 ad       	ldd	r25, Y+56	; 0x38
    1ac8:	20 e0       	ldi	r18, 0x00	; 0
    1aca:	30 e0       	ldi	r19, 0x00	; 0
    1acc:	4a ef       	ldi	r20, 0xFA	; 250
    1ace:	54 e4       	ldi	r21, 0x44	; 68
    1ad0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ad4:	dc 01       	movw	r26, r24
    1ad6:	cb 01       	movw	r24, r22
    1ad8:	89 ab       	std	Y+49, r24	; 0x31
    1ada:	9a ab       	std	Y+50, r25	; 0x32
    1adc:	ab ab       	std	Y+51, r26	; 0x33
    1ade:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1ae0:	69 a9       	ldd	r22, Y+49	; 0x31
    1ae2:	7a a9       	ldd	r23, Y+50	; 0x32
    1ae4:	8b a9       	ldd	r24, Y+51	; 0x33
    1ae6:	9c a9       	ldd	r25, Y+52	; 0x34
    1ae8:	20 e0       	ldi	r18, 0x00	; 0
    1aea:	30 e0       	ldi	r19, 0x00	; 0
    1aec:	40 e8       	ldi	r20, 0x80	; 128
    1aee:	5f e3       	ldi	r21, 0x3F	; 63
    1af0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1af4:	88 23       	and	r24, r24
    1af6:	2c f4       	brge	.+10     	; 0x1b02 <HLCD_voidInit+0x188>
		__ticks = 1;
    1af8:	81 e0       	ldi	r24, 0x01	; 1
    1afa:	90 e0       	ldi	r25, 0x00	; 0
    1afc:	98 ab       	std	Y+48, r25	; 0x30
    1afe:	8f a7       	std	Y+47, r24	; 0x2f
    1b00:	3f c0       	rjmp	.+126    	; 0x1b80 <HLCD_voidInit+0x206>
	else if (__tmp > 65535)
    1b02:	69 a9       	ldd	r22, Y+49	; 0x31
    1b04:	7a a9       	ldd	r23, Y+50	; 0x32
    1b06:	8b a9       	ldd	r24, Y+51	; 0x33
    1b08:	9c a9       	ldd	r25, Y+52	; 0x34
    1b0a:	20 e0       	ldi	r18, 0x00	; 0
    1b0c:	3f ef       	ldi	r19, 0xFF	; 255
    1b0e:	4f e7       	ldi	r20, 0x7F	; 127
    1b10:	57 e4       	ldi	r21, 0x47	; 71
    1b12:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1b16:	18 16       	cp	r1, r24
    1b18:	4c f5       	brge	.+82     	; 0x1b6c <HLCD_voidInit+0x1f2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b1a:	6d a9       	ldd	r22, Y+53	; 0x35
    1b1c:	7e a9       	ldd	r23, Y+54	; 0x36
    1b1e:	8f a9       	ldd	r24, Y+55	; 0x37
    1b20:	98 ad       	ldd	r25, Y+56	; 0x38
    1b22:	20 e0       	ldi	r18, 0x00	; 0
    1b24:	30 e0       	ldi	r19, 0x00	; 0
    1b26:	40 e2       	ldi	r20, 0x20	; 32
    1b28:	51 e4       	ldi	r21, 0x41	; 65
    1b2a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b2e:	dc 01       	movw	r26, r24
    1b30:	cb 01       	movw	r24, r22
    1b32:	bc 01       	movw	r22, r24
    1b34:	cd 01       	movw	r24, r26
    1b36:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b3a:	dc 01       	movw	r26, r24
    1b3c:	cb 01       	movw	r24, r22
    1b3e:	98 ab       	std	Y+48, r25	; 0x30
    1b40:	8f a7       	std	Y+47, r24	; 0x2f
    1b42:	0f c0       	rjmp	.+30     	; 0x1b62 <HLCD_voidInit+0x1e8>
    1b44:	88 ec       	ldi	r24, 0xC8	; 200
    1b46:	90 e0       	ldi	r25, 0x00	; 0
    1b48:	9e a7       	std	Y+46, r25	; 0x2e
    1b4a:	8d a7       	std	Y+45, r24	; 0x2d
    1b4c:	8d a5       	ldd	r24, Y+45	; 0x2d
    1b4e:	9e a5       	ldd	r25, Y+46	; 0x2e
    1b50:	01 97       	sbiw	r24, 0x01	; 1
    1b52:	f1 f7       	brne	.-4      	; 0x1b50 <HLCD_voidInit+0x1d6>
    1b54:	9e a7       	std	Y+46, r25	; 0x2e
    1b56:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b58:	8f a5       	ldd	r24, Y+47	; 0x2f
    1b5a:	98 a9       	ldd	r25, Y+48	; 0x30
    1b5c:	01 97       	sbiw	r24, 0x01	; 1
    1b5e:	98 ab       	std	Y+48, r25	; 0x30
    1b60:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b62:	8f a5       	ldd	r24, Y+47	; 0x2f
    1b64:	98 a9       	ldd	r25, Y+48	; 0x30
    1b66:	00 97       	sbiw	r24, 0x00	; 0
    1b68:	69 f7       	brne	.-38     	; 0x1b44 <HLCD_voidInit+0x1ca>
    1b6a:	14 c0       	rjmp	.+40     	; 0x1b94 <HLCD_voidInit+0x21a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b6c:	69 a9       	ldd	r22, Y+49	; 0x31
    1b6e:	7a a9       	ldd	r23, Y+50	; 0x32
    1b70:	8b a9       	ldd	r24, Y+51	; 0x33
    1b72:	9c a9       	ldd	r25, Y+52	; 0x34
    1b74:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b78:	dc 01       	movw	r26, r24
    1b7a:	cb 01       	movw	r24, r22
    1b7c:	98 ab       	std	Y+48, r25	; 0x30
    1b7e:	8f a7       	std	Y+47, r24	; 0x2f
    1b80:	8f a5       	ldd	r24, Y+47	; 0x2f
    1b82:	98 a9       	ldd	r25, Y+48	; 0x30
    1b84:	9c a7       	std	Y+44, r25	; 0x2c
    1b86:	8b a7       	std	Y+43, r24	; 0x2b
    1b88:	8b a5       	ldd	r24, Y+43	; 0x2b
    1b8a:	9c a5       	ldd	r25, Y+44	; 0x2c
    1b8c:	01 97       	sbiw	r24, 0x01	; 1
    1b8e:	f1 f7       	brne	.-4      	; 0x1b8c <HLCD_voidInit+0x212>
    1b90:	9c a7       	std	Y+44, r25	; 0x2c
    1b92:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	#endif

	/*Display ON/OFF Control(display on, cursor off, don't blink character) and wait 1 ms*/
	HLCD_voidWriteCmd(0x0C);
    1b94:	8c e0       	ldi	r24, 0x0C	; 12
    1b96:	0e 94 35 0f 	call	0x1e6a	; 0x1e6a <HLCD_voidWriteCmd>
    1b9a:	80 e0       	ldi	r24, 0x00	; 0
    1b9c:	90 e0       	ldi	r25, 0x00	; 0
    1b9e:	a0 e8       	ldi	r26, 0x80	; 128
    1ba0:	bf e3       	ldi	r27, 0x3F	; 63
    1ba2:	8f a3       	std	Y+39, r24	; 0x27
    1ba4:	98 a7       	std	Y+40, r25	; 0x28
    1ba6:	a9 a7       	std	Y+41, r26	; 0x29
    1ba8:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1baa:	6f a1       	ldd	r22, Y+39	; 0x27
    1bac:	78 a5       	ldd	r23, Y+40	; 0x28
    1bae:	89 a5       	ldd	r24, Y+41	; 0x29
    1bb0:	9a a5       	ldd	r25, Y+42	; 0x2a
    1bb2:	20 e0       	ldi	r18, 0x00	; 0
    1bb4:	30 e0       	ldi	r19, 0x00	; 0
    1bb6:	4a ef       	ldi	r20, 0xFA	; 250
    1bb8:	54 e4       	ldi	r21, 0x44	; 68
    1bba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bbe:	dc 01       	movw	r26, r24
    1bc0:	cb 01       	movw	r24, r22
    1bc2:	8b a3       	std	Y+35, r24	; 0x23
    1bc4:	9c a3       	std	Y+36, r25	; 0x24
    1bc6:	ad a3       	std	Y+37, r26	; 0x25
    1bc8:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1bca:	6b a1       	ldd	r22, Y+35	; 0x23
    1bcc:	7c a1       	ldd	r23, Y+36	; 0x24
    1bce:	8d a1       	ldd	r24, Y+37	; 0x25
    1bd0:	9e a1       	ldd	r25, Y+38	; 0x26
    1bd2:	20 e0       	ldi	r18, 0x00	; 0
    1bd4:	30 e0       	ldi	r19, 0x00	; 0
    1bd6:	40 e8       	ldi	r20, 0x80	; 128
    1bd8:	5f e3       	ldi	r21, 0x3F	; 63
    1bda:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1bde:	88 23       	and	r24, r24
    1be0:	2c f4       	brge	.+10     	; 0x1bec <HLCD_voidInit+0x272>
		__ticks = 1;
    1be2:	81 e0       	ldi	r24, 0x01	; 1
    1be4:	90 e0       	ldi	r25, 0x00	; 0
    1be6:	9a a3       	std	Y+34, r25	; 0x22
    1be8:	89 a3       	std	Y+33, r24	; 0x21
    1bea:	3f c0       	rjmp	.+126    	; 0x1c6a <HLCD_voidInit+0x2f0>
	else if (__tmp > 65535)
    1bec:	6b a1       	ldd	r22, Y+35	; 0x23
    1bee:	7c a1       	ldd	r23, Y+36	; 0x24
    1bf0:	8d a1       	ldd	r24, Y+37	; 0x25
    1bf2:	9e a1       	ldd	r25, Y+38	; 0x26
    1bf4:	20 e0       	ldi	r18, 0x00	; 0
    1bf6:	3f ef       	ldi	r19, 0xFF	; 255
    1bf8:	4f e7       	ldi	r20, 0x7F	; 127
    1bfa:	57 e4       	ldi	r21, 0x47	; 71
    1bfc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c00:	18 16       	cp	r1, r24
    1c02:	4c f5       	brge	.+82     	; 0x1c56 <HLCD_voidInit+0x2dc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c04:	6f a1       	ldd	r22, Y+39	; 0x27
    1c06:	78 a5       	ldd	r23, Y+40	; 0x28
    1c08:	89 a5       	ldd	r24, Y+41	; 0x29
    1c0a:	9a a5       	ldd	r25, Y+42	; 0x2a
    1c0c:	20 e0       	ldi	r18, 0x00	; 0
    1c0e:	30 e0       	ldi	r19, 0x00	; 0
    1c10:	40 e2       	ldi	r20, 0x20	; 32
    1c12:	51 e4       	ldi	r21, 0x41	; 65
    1c14:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c18:	dc 01       	movw	r26, r24
    1c1a:	cb 01       	movw	r24, r22
    1c1c:	bc 01       	movw	r22, r24
    1c1e:	cd 01       	movw	r24, r26
    1c20:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c24:	dc 01       	movw	r26, r24
    1c26:	cb 01       	movw	r24, r22
    1c28:	9a a3       	std	Y+34, r25	; 0x22
    1c2a:	89 a3       	std	Y+33, r24	; 0x21
    1c2c:	0f c0       	rjmp	.+30     	; 0x1c4c <HLCD_voidInit+0x2d2>
    1c2e:	88 ec       	ldi	r24, 0xC8	; 200
    1c30:	90 e0       	ldi	r25, 0x00	; 0
    1c32:	98 a3       	std	Y+32, r25	; 0x20
    1c34:	8f 8f       	std	Y+31, r24	; 0x1f
    1c36:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1c38:	98 a1       	ldd	r25, Y+32	; 0x20
    1c3a:	01 97       	sbiw	r24, 0x01	; 1
    1c3c:	f1 f7       	brne	.-4      	; 0x1c3a <HLCD_voidInit+0x2c0>
    1c3e:	98 a3       	std	Y+32, r25	; 0x20
    1c40:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c42:	89 a1       	ldd	r24, Y+33	; 0x21
    1c44:	9a a1       	ldd	r25, Y+34	; 0x22
    1c46:	01 97       	sbiw	r24, 0x01	; 1
    1c48:	9a a3       	std	Y+34, r25	; 0x22
    1c4a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c4c:	89 a1       	ldd	r24, Y+33	; 0x21
    1c4e:	9a a1       	ldd	r25, Y+34	; 0x22
    1c50:	00 97       	sbiw	r24, 0x00	; 0
    1c52:	69 f7       	brne	.-38     	; 0x1c2e <HLCD_voidInit+0x2b4>
    1c54:	14 c0       	rjmp	.+40     	; 0x1c7e <HLCD_voidInit+0x304>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c56:	6b a1       	ldd	r22, Y+35	; 0x23
    1c58:	7c a1       	ldd	r23, Y+36	; 0x24
    1c5a:	8d a1       	ldd	r24, Y+37	; 0x25
    1c5c:	9e a1       	ldd	r25, Y+38	; 0x26
    1c5e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c62:	dc 01       	movw	r26, r24
    1c64:	cb 01       	movw	r24, r22
    1c66:	9a a3       	std	Y+34, r25	; 0x22
    1c68:	89 a3       	std	Y+33, r24	; 0x21
    1c6a:	89 a1       	ldd	r24, Y+33	; 0x21
    1c6c:	9a a1       	ldd	r25, Y+34	; 0x22
    1c6e:	9e 8f       	std	Y+30, r25	; 0x1e
    1c70:	8d 8f       	std	Y+29, r24	; 0x1d
    1c72:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1c74:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1c76:	01 97       	sbiw	r24, 0x01	; 1
    1c78:	f1 f7       	brne	.-4      	; 0x1c76 <HLCD_voidInit+0x2fc>
    1c7a:	9e 8f       	std	Y+30, r25	; 0x1e
    1c7c:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);

	/* Clear Display and wait 2 ms*/
	HLCD_voidWriteCmd(0x01);
    1c7e:	81 e0       	ldi	r24, 0x01	; 1
    1c80:	0e 94 35 0f 	call	0x1e6a	; 0x1e6a <HLCD_voidWriteCmd>
    1c84:	80 e0       	ldi	r24, 0x00	; 0
    1c86:	90 e0       	ldi	r25, 0x00	; 0
    1c88:	a0 e0       	ldi	r26, 0x00	; 0
    1c8a:	b0 e4       	ldi	r27, 0x40	; 64
    1c8c:	89 8f       	std	Y+25, r24	; 0x19
    1c8e:	9a 8f       	std	Y+26, r25	; 0x1a
    1c90:	ab 8f       	std	Y+27, r26	; 0x1b
    1c92:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c94:	69 8d       	ldd	r22, Y+25	; 0x19
    1c96:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1c98:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1c9a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1c9c:	20 e0       	ldi	r18, 0x00	; 0
    1c9e:	30 e0       	ldi	r19, 0x00	; 0
    1ca0:	4a ef       	ldi	r20, 0xFA	; 250
    1ca2:	54 e4       	ldi	r21, 0x44	; 68
    1ca4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ca8:	dc 01       	movw	r26, r24
    1caa:	cb 01       	movw	r24, r22
    1cac:	8d 8b       	std	Y+21, r24	; 0x15
    1cae:	9e 8b       	std	Y+22, r25	; 0x16
    1cb0:	af 8b       	std	Y+23, r26	; 0x17
    1cb2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1cb4:	6d 89       	ldd	r22, Y+21	; 0x15
    1cb6:	7e 89       	ldd	r23, Y+22	; 0x16
    1cb8:	8f 89       	ldd	r24, Y+23	; 0x17
    1cba:	98 8d       	ldd	r25, Y+24	; 0x18
    1cbc:	20 e0       	ldi	r18, 0x00	; 0
    1cbe:	30 e0       	ldi	r19, 0x00	; 0
    1cc0:	40 e8       	ldi	r20, 0x80	; 128
    1cc2:	5f e3       	ldi	r21, 0x3F	; 63
    1cc4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1cc8:	88 23       	and	r24, r24
    1cca:	2c f4       	brge	.+10     	; 0x1cd6 <HLCD_voidInit+0x35c>
		__ticks = 1;
    1ccc:	81 e0       	ldi	r24, 0x01	; 1
    1cce:	90 e0       	ldi	r25, 0x00	; 0
    1cd0:	9c 8b       	std	Y+20, r25	; 0x14
    1cd2:	8b 8b       	std	Y+19, r24	; 0x13
    1cd4:	3f c0       	rjmp	.+126    	; 0x1d54 <HLCD_voidInit+0x3da>
	else if (__tmp > 65535)
    1cd6:	6d 89       	ldd	r22, Y+21	; 0x15
    1cd8:	7e 89       	ldd	r23, Y+22	; 0x16
    1cda:	8f 89       	ldd	r24, Y+23	; 0x17
    1cdc:	98 8d       	ldd	r25, Y+24	; 0x18
    1cde:	20 e0       	ldi	r18, 0x00	; 0
    1ce0:	3f ef       	ldi	r19, 0xFF	; 255
    1ce2:	4f e7       	ldi	r20, 0x7F	; 127
    1ce4:	57 e4       	ldi	r21, 0x47	; 71
    1ce6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1cea:	18 16       	cp	r1, r24
    1cec:	4c f5       	brge	.+82     	; 0x1d40 <HLCD_voidInit+0x3c6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cee:	69 8d       	ldd	r22, Y+25	; 0x19
    1cf0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1cf2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1cf4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1cf6:	20 e0       	ldi	r18, 0x00	; 0
    1cf8:	30 e0       	ldi	r19, 0x00	; 0
    1cfa:	40 e2       	ldi	r20, 0x20	; 32
    1cfc:	51 e4       	ldi	r21, 0x41	; 65
    1cfe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d02:	dc 01       	movw	r26, r24
    1d04:	cb 01       	movw	r24, r22
    1d06:	bc 01       	movw	r22, r24
    1d08:	cd 01       	movw	r24, r26
    1d0a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d0e:	dc 01       	movw	r26, r24
    1d10:	cb 01       	movw	r24, r22
    1d12:	9c 8b       	std	Y+20, r25	; 0x14
    1d14:	8b 8b       	std	Y+19, r24	; 0x13
    1d16:	0f c0       	rjmp	.+30     	; 0x1d36 <HLCD_voidInit+0x3bc>
    1d18:	88 ec       	ldi	r24, 0xC8	; 200
    1d1a:	90 e0       	ldi	r25, 0x00	; 0
    1d1c:	9a 8b       	std	Y+18, r25	; 0x12
    1d1e:	89 8b       	std	Y+17, r24	; 0x11
    1d20:	89 89       	ldd	r24, Y+17	; 0x11
    1d22:	9a 89       	ldd	r25, Y+18	; 0x12
    1d24:	01 97       	sbiw	r24, 0x01	; 1
    1d26:	f1 f7       	brne	.-4      	; 0x1d24 <HLCD_voidInit+0x3aa>
    1d28:	9a 8b       	std	Y+18, r25	; 0x12
    1d2a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d2c:	8b 89       	ldd	r24, Y+19	; 0x13
    1d2e:	9c 89       	ldd	r25, Y+20	; 0x14
    1d30:	01 97       	sbiw	r24, 0x01	; 1
    1d32:	9c 8b       	std	Y+20, r25	; 0x14
    1d34:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d36:	8b 89       	ldd	r24, Y+19	; 0x13
    1d38:	9c 89       	ldd	r25, Y+20	; 0x14
    1d3a:	00 97       	sbiw	r24, 0x00	; 0
    1d3c:	69 f7       	brne	.-38     	; 0x1d18 <HLCD_voidInit+0x39e>
    1d3e:	14 c0       	rjmp	.+40     	; 0x1d68 <HLCD_voidInit+0x3ee>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d40:	6d 89       	ldd	r22, Y+21	; 0x15
    1d42:	7e 89       	ldd	r23, Y+22	; 0x16
    1d44:	8f 89       	ldd	r24, Y+23	; 0x17
    1d46:	98 8d       	ldd	r25, Y+24	; 0x18
    1d48:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d4c:	dc 01       	movw	r26, r24
    1d4e:	cb 01       	movw	r24, r22
    1d50:	9c 8b       	std	Y+20, r25	; 0x14
    1d52:	8b 8b       	std	Y+19, r24	; 0x13
    1d54:	8b 89       	ldd	r24, Y+19	; 0x13
    1d56:	9c 89       	ldd	r25, Y+20	; 0x14
    1d58:	98 8b       	std	Y+16, r25	; 0x10
    1d5a:	8f 87       	std	Y+15, r24	; 0x0f
    1d5c:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d5e:	98 89       	ldd	r25, Y+16	; 0x10
    1d60:	01 97       	sbiw	r24, 0x01	; 1
    1d62:	f1 f7       	brne	.-4      	; 0x1d60 <HLCD_voidInit+0x3e6>
    1d64:	98 8b       	std	Y+16, r25	; 0x10
    1d66:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);

	/* Entry Mode Set */
	HLCD_voidWriteCmd(0x06);
    1d68:	86 e0       	ldi	r24, 0x06	; 6
    1d6a:	0e 94 35 0f 	call	0x1e6a	; 0x1e6a <HLCD_voidWriteCmd>
    1d6e:	80 e0       	ldi	r24, 0x00	; 0
    1d70:	90 e0       	ldi	r25, 0x00	; 0
    1d72:	a0 e0       	ldi	r26, 0x00	; 0
    1d74:	b0 e4       	ldi	r27, 0x40	; 64
    1d76:	8b 87       	std	Y+11, r24	; 0x0b
    1d78:	9c 87       	std	Y+12, r25	; 0x0c
    1d7a:	ad 87       	std	Y+13, r26	; 0x0d
    1d7c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d7e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d80:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d82:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d84:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d86:	20 e0       	ldi	r18, 0x00	; 0
    1d88:	30 e0       	ldi	r19, 0x00	; 0
    1d8a:	4a ef       	ldi	r20, 0xFA	; 250
    1d8c:	54 e4       	ldi	r21, 0x44	; 68
    1d8e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d92:	dc 01       	movw	r26, r24
    1d94:	cb 01       	movw	r24, r22
    1d96:	8f 83       	std	Y+7, r24	; 0x07
    1d98:	98 87       	std	Y+8, r25	; 0x08
    1d9a:	a9 87       	std	Y+9, r26	; 0x09
    1d9c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1d9e:	6f 81       	ldd	r22, Y+7	; 0x07
    1da0:	78 85       	ldd	r23, Y+8	; 0x08
    1da2:	89 85       	ldd	r24, Y+9	; 0x09
    1da4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1da6:	20 e0       	ldi	r18, 0x00	; 0
    1da8:	30 e0       	ldi	r19, 0x00	; 0
    1daa:	40 e8       	ldi	r20, 0x80	; 128
    1dac:	5f e3       	ldi	r21, 0x3F	; 63
    1dae:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1db2:	88 23       	and	r24, r24
    1db4:	2c f4       	brge	.+10     	; 0x1dc0 <HLCD_voidInit+0x446>
		__ticks = 1;
    1db6:	81 e0       	ldi	r24, 0x01	; 1
    1db8:	90 e0       	ldi	r25, 0x00	; 0
    1dba:	9e 83       	std	Y+6, r25	; 0x06
    1dbc:	8d 83       	std	Y+5, r24	; 0x05
    1dbe:	3f c0       	rjmp	.+126    	; 0x1e3e <HLCD_voidInit+0x4c4>
	else if (__tmp > 65535)
    1dc0:	6f 81       	ldd	r22, Y+7	; 0x07
    1dc2:	78 85       	ldd	r23, Y+8	; 0x08
    1dc4:	89 85       	ldd	r24, Y+9	; 0x09
    1dc6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1dc8:	20 e0       	ldi	r18, 0x00	; 0
    1dca:	3f ef       	ldi	r19, 0xFF	; 255
    1dcc:	4f e7       	ldi	r20, 0x7F	; 127
    1dce:	57 e4       	ldi	r21, 0x47	; 71
    1dd0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1dd4:	18 16       	cp	r1, r24
    1dd6:	4c f5       	brge	.+82     	; 0x1e2a <HLCD_voidInit+0x4b0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1dd8:	6b 85       	ldd	r22, Y+11	; 0x0b
    1dda:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ddc:	8d 85       	ldd	r24, Y+13	; 0x0d
    1dde:	9e 85       	ldd	r25, Y+14	; 0x0e
    1de0:	20 e0       	ldi	r18, 0x00	; 0
    1de2:	30 e0       	ldi	r19, 0x00	; 0
    1de4:	40 e2       	ldi	r20, 0x20	; 32
    1de6:	51 e4       	ldi	r21, 0x41	; 65
    1de8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dec:	dc 01       	movw	r26, r24
    1dee:	cb 01       	movw	r24, r22
    1df0:	bc 01       	movw	r22, r24
    1df2:	cd 01       	movw	r24, r26
    1df4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1df8:	dc 01       	movw	r26, r24
    1dfa:	cb 01       	movw	r24, r22
    1dfc:	9e 83       	std	Y+6, r25	; 0x06
    1dfe:	8d 83       	std	Y+5, r24	; 0x05
    1e00:	0f c0       	rjmp	.+30     	; 0x1e20 <HLCD_voidInit+0x4a6>
    1e02:	88 ec       	ldi	r24, 0xC8	; 200
    1e04:	90 e0       	ldi	r25, 0x00	; 0
    1e06:	9c 83       	std	Y+4, r25	; 0x04
    1e08:	8b 83       	std	Y+3, r24	; 0x03
    1e0a:	8b 81       	ldd	r24, Y+3	; 0x03
    1e0c:	9c 81       	ldd	r25, Y+4	; 0x04
    1e0e:	01 97       	sbiw	r24, 0x01	; 1
    1e10:	f1 f7       	brne	.-4      	; 0x1e0e <HLCD_voidInit+0x494>
    1e12:	9c 83       	std	Y+4, r25	; 0x04
    1e14:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e16:	8d 81       	ldd	r24, Y+5	; 0x05
    1e18:	9e 81       	ldd	r25, Y+6	; 0x06
    1e1a:	01 97       	sbiw	r24, 0x01	; 1
    1e1c:	9e 83       	std	Y+6, r25	; 0x06
    1e1e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e20:	8d 81       	ldd	r24, Y+5	; 0x05
    1e22:	9e 81       	ldd	r25, Y+6	; 0x06
    1e24:	00 97       	sbiw	r24, 0x00	; 0
    1e26:	69 f7       	brne	.-38     	; 0x1e02 <HLCD_voidInit+0x488>
    1e28:	14 c0       	rjmp	.+40     	; 0x1e52 <HLCD_voidInit+0x4d8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e2a:	6f 81       	ldd	r22, Y+7	; 0x07
    1e2c:	78 85       	ldd	r23, Y+8	; 0x08
    1e2e:	89 85       	ldd	r24, Y+9	; 0x09
    1e30:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e32:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e36:	dc 01       	movw	r26, r24
    1e38:	cb 01       	movw	r24, r22
    1e3a:	9e 83       	std	Y+6, r25	; 0x06
    1e3c:	8d 83       	std	Y+5, r24	; 0x05
    1e3e:	8d 81       	ldd	r24, Y+5	; 0x05
    1e40:	9e 81       	ldd	r25, Y+6	; 0x06
    1e42:	9a 83       	std	Y+2, r25	; 0x02
    1e44:	89 83       	std	Y+1, r24	; 0x01
    1e46:	89 81       	ldd	r24, Y+1	; 0x01
    1e48:	9a 81       	ldd	r25, Y+2	; 0x02
    1e4a:	01 97       	sbiw	r24, 0x01	; 1
    1e4c:	f1 f7       	brne	.-4      	; 0x1e4a <HLCD_voidInit+0x4d0>
    1e4e:	9a 83       	std	Y+2, r25	; 0x02
    1e50:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    1e52:	ca 5b       	subi	r28, 0xBA	; 186
    1e54:	df 4f       	sbci	r29, 0xFF	; 255
    1e56:	0f b6       	in	r0, 0x3f	; 63
    1e58:	f8 94       	cli
    1e5a:	de bf       	out	0x3e, r29	; 62
    1e5c:	0f be       	out	0x3f, r0	; 63
    1e5e:	cd bf       	out	0x3d, r28	; 61
    1e60:	cf 91       	pop	r28
    1e62:	df 91       	pop	r29
    1e64:	1f 91       	pop	r17
    1e66:	0f 91       	pop	r16
    1e68:	08 95       	ret

00001e6a <HLCD_voidWriteCmd>:


void HLCD_voidWriteCmd(u8 copy_u8Cmd)
{
    1e6a:	df 93       	push	r29
    1e6c:	cf 93       	push	r28
    1e6e:	cd b7       	in	r28, 0x3d	; 61
    1e70:	de b7       	in	r29, 0x3e	; 62
    1e72:	6d 97       	sbiw	r28, 0x1d	; 29
    1e74:	0f b6       	in	r0, 0x3f	; 63
    1e76:	f8 94       	cli
    1e78:	de bf       	out	0x3e, r29	; 62
    1e7a:	0f be       	out	0x3f, r0	; 63
    1e7c:	cd bf       	out	0x3d, r28	; 61
    1e7e:	8d 8f       	std	Y+29, r24	; 0x1d
	/*Set RS Pin to LOW*/
	MDIO_voidSetPinValue(RS_PIN,CONTROL_PORT,DIO_LOW);
    1e80:	80 e0       	ldi	r24, 0x00	; 0
    1e82:	63 e0       	ldi	r22, 0x03	; 3
    1e84:	40 e0       	ldi	r20, 0x00	; 0
    1e86:	0e 94 95 09 	call	0x132a	; 0x132a <MDIO_voidSetPinValue>
	/*Set RW Pin to LOW*/
	MDIO_voidSetPinValue(RW_PIN,CONTROL_PORT,DIO_LOW);
    1e8a:	81 e0       	ldi	r24, 0x01	; 1
    1e8c:	63 e0       	ldi	r22, 0x03	; 3
    1e8e:	40 e0       	ldi	r20, 0x00	; 0
    1e90:	0e 94 95 09 	call	0x132a	; 0x132a <MDIO_voidSetPinValue>
	/*Set E Pin to LOW*/
	MDIO_voidSetPinValue(E_PIN,CONTROL_PORT,DIO_LOW);
	/* Wait for E to settle */
	_delay_ms(5);
	#elif LCD_MODE == _4Bit_Mode
	MDIO_voidSetPinValue(D4_PIN,DATA_PORT,GET_BIT(copy_u8Cmd,4));
    1e94:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1e96:	98 2f       	mov	r25, r24
    1e98:	90 71       	andi	r25, 0x10	; 16
    1e9a:	80 e0       	ldi	r24, 0x00	; 0
    1e9c:	62 e0       	ldi	r22, 0x02	; 2
    1e9e:	49 2f       	mov	r20, r25
    1ea0:	0e 94 95 09 	call	0x132a	; 0x132a <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(D5_PIN,DATA_PORT,GET_BIT(copy_u8Cmd,5));
    1ea4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1ea6:	98 2f       	mov	r25, r24
    1ea8:	90 72       	andi	r25, 0x20	; 32
    1eaa:	81 e0       	ldi	r24, 0x01	; 1
    1eac:	62 e0       	ldi	r22, 0x02	; 2
    1eae:	49 2f       	mov	r20, r25
    1eb0:	0e 94 95 09 	call	0x132a	; 0x132a <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(D6_PIN,DATA_PORT,GET_BIT(copy_u8Cmd,6));
    1eb4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1eb6:	98 2f       	mov	r25, r24
    1eb8:	90 74       	andi	r25, 0x40	; 64
    1eba:	82 e0       	ldi	r24, 0x02	; 2
    1ebc:	62 e0       	ldi	r22, 0x02	; 2
    1ebe:	49 2f       	mov	r20, r25
    1ec0:	0e 94 95 09 	call	0x132a	; 0x132a <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(D7_PIN,DATA_PORT,GET_BIT(copy_u8Cmd,7));
    1ec4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1ec6:	98 2f       	mov	r25, r24
    1ec8:	90 78       	andi	r25, 0x80	; 128
    1eca:	83 e0       	ldi	r24, 0x03	; 3
    1ecc:	62 e0       	ldi	r22, 0x02	; 2
    1ece:	49 2f       	mov	r20, r25
    1ed0:	0e 94 95 09 	call	0x132a	; 0x132a <MDIO_voidSetPinValue>

	/*Set E Pin to HIGH*/
	MDIO_voidSetPinValue(E_PIN,CONTROL_PORT,DIO_HIGH);
    1ed4:	82 e0       	ldi	r24, 0x02	; 2
    1ed6:	63 e0       	ldi	r22, 0x03	; 3
    1ed8:	41 e0       	ldi	r20, 0x01	; 1
    1eda:	0e 94 95 09 	call	0x132a	; 0x132a <MDIO_voidSetPinValue>
	/*Set E Pin to LOW*/
	MDIO_voidSetPinValue(E_PIN,CONTROL_PORT,DIO_LOW);
    1ede:	82 e0       	ldi	r24, 0x02	; 2
    1ee0:	63 e0       	ldi	r22, 0x03	; 3
    1ee2:	40 e0       	ldi	r20, 0x00	; 0
    1ee4:	0e 94 95 09 	call	0x132a	; 0x132a <MDIO_voidSetPinValue>
    1ee8:	80 e0       	ldi	r24, 0x00	; 0
    1eea:	90 e0       	ldi	r25, 0x00	; 0
    1eec:	a0 ea       	ldi	r26, 0xA0	; 160
    1eee:	b0 e4       	ldi	r27, 0x40	; 64
    1ef0:	89 8f       	std	Y+25, r24	; 0x19
    1ef2:	9a 8f       	std	Y+26, r25	; 0x1a
    1ef4:	ab 8f       	std	Y+27, r26	; 0x1b
    1ef6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ef8:	69 8d       	ldd	r22, Y+25	; 0x19
    1efa:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1efc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1efe:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1f00:	20 e0       	ldi	r18, 0x00	; 0
    1f02:	30 e0       	ldi	r19, 0x00	; 0
    1f04:	4a ef       	ldi	r20, 0xFA	; 250
    1f06:	54 e4       	ldi	r21, 0x44	; 68
    1f08:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f0c:	dc 01       	movw	r26, r24
    1f0e:	cb 01       	movw	r24, r22
    1f10:	8d 8b       	std	Y+21, r24	; 0x15
    1f12:	9e 8b       	std	Y+22, r25	; 0x16
    1f14:	af 8b       	std	Y+23, r26	; 0x17
    1f16:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1f18:	6d 89       	ldd	r22, Y+21	; 0x15
    1f1a:	7e 89       	ldd	r23, Y+22	; 0x16
    1f1c:	8f 89       	ldd	r24, Y+23	; 0x17
    1f1e:	98 8d       	ldd	r25, Y+24	; 0x18
    1f20:	20 e0       	ldi	r18, 0x00	; 0
    1f22:	30 e0       	ldi	r19, 0x00	; 0
    1f24:	40 e8       	ldi	r20, 0x80	; 128
    1f26:	5f e3       	ldi	r21, 0x3F	; 63
    1f28:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f2c:	88 23       	and	r24, r24
    1f2e:	2c f4       	brge	.+10     	; 0x1f3a <HLCD_voidWriteCmd+0xd0>
		__ticks = 1;
    1f30:	81 e0       	ldi	r24, 0x01	; 1
    1f32:	90 e0       	ldi	r25, 0x00	; 0
    1f34:	9c 8b       	std	Y+20, r25	; 0x14
    1f36:	8b 8b       	std	Y+19, r24	; 0x13
    1f38:	3f c0       	rjmp	.+126    	; 0x1fb8 <HLCD_voidWriteCmd+0x14e>
	else if (__tmp > 65535)
    1f3a:	6d 89       	ldd	r22, Y+21	; 0x15
    1f3c:	7e 89       	ldd	r23, Y+22	; 0x16
    1f3e:	8f 89       	ldd	r24, Y+23	; 0x17
    1f40:	98 8d       	ldd	r25, Y+24	; 0x18
    1f42:	20 e0       	ldi	r18, 0x00	; 0
    1f44:	3f ef       	ldi	r19, 0xFF	; 255
    1f46:	4f e7       	ldi	r20, 0x7F	; 127
    1f48:	57 e4       	ldi	r21, 0x47	; 71
    1f4a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f4e:	18 16       	cp	r1, r24
    1f50:	4c f5       	brge	.+82     	; 0x1fa4 <HLCD_voidWriteCmd+0x13a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f52:	69 8d       	ldd	r22, Y+25	; 0x19
    1f54:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1f56:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1f58:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1f5a:	20 e0       	ldi	r18, 0x00	; 0
    1f5c:	30 e0       	ldi	r19, 0x00	; 0
    1f5e:	40 e2       	ldi	r20, 0x20	; 32
    1f60:	51 e4       	ldi	r21, 0x41	; 65
    1f62:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f66:	dc 01       	movw	r26, r24
    1f68:	cb 01       	movw	r24, r22
    1f6a:	bc 01       	movw	r22, r24
    1f6c:	cd 01       	movw	r24, r26
    1f6e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f72:	dc 01       	movw	r26, r24
    1f74:	cb 01       	movw	r24, r22
    1f76:	9c 8b       	std	Y+20, r25	; 0x14
    1f78:	8b 8b       	std	Y+19, r24	; 0x13
    1f7a:	0f c0       	rjmp	.+30     	; 0x1f9a <HLCD_voidWriteCmd+0x130>
    1f7c:	88 ec       	ldi	r24, 0xC8	; 200
    1f7e:	90 e0       	ldi	r25, 0x00	; 0
    1f80:	9a 8b       	std	Y+18, r25	; 0x12
    1f82:	89 8b       	std	Y+17, r24	; 0x11
    1f84:	89 89       	ldd	r24, Y+17	; 0x11
    1f86:	9a 89       	ldd	r25, Y+18	; 0x12
    1f88:	01 97       	sbiw	r24, 0x01	; 1
    1f8a:	f1 f7       	brne	.-4      	; 0x1f88 <HLCD_voidWriteCmd+0x11e>
    1f8c:	9a 8b       	std	Y+18, r25	; 0x12
    1f8e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f90:	8b 89       	ldd	r24, Y+19	; 0x13
    1f92:	9c 89       	ldd	r25, Y+20	; 0x14
    1f94:	01 97       	sbiw	r24, 0x01	; 1
    1f96:	9c 8b       	std	Y+20, r25	; 0x14
    1f98:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f9a:	8b 89       	ldd	r24, Y+19	; 0x13
    1f9c:	9c 89       	ldd	r25, Y+20	; 0x14
    1f9e:	00 97       	sbiw	r24, 0x00	; 0
    1fa0:	69 f7       	brne	.-38     	; 0x1f7c <HLCD_voidWriteCmd+0x112>
    1fa2:	14 c0       	rjmp	.+40     	; 0x1fcc <HLCD_voidWriteCmd+0x162>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fa4:	6d 89       	ldd	r22, Y+21	; 0x15
    1fa6:	7e 89       	ldd	r23, Y+22	; 0x16
    1fa8:	8f 89       	ldd	r24, Y+23	; 0x17
    1faa:	98 8d       	ldd	r25, Y+24	; 0x18
    1fac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fb0:	dc 01       	movw	r26, r24
    1fb2:	cb 01       	movw	r24, r22
    1fb4:	9c 8b       	std	Y+20, r25	; 0x14
    1fb6:	8b 8b       	std	Y+19, r24	; 0x13
    1fb8:	8b 89       	ldd	r24, Y+19	; 0x13
    1fba:	9c 89       	ldd	r25, Y+20	; 0x14
    1fbc:	98 8b       	std	Y+16, r25	; 0x10
    1fbe:	8f 87       	std	Y+15, r24	; 0x0f
    1fc0:	8f 85       	ldd	r24, Y+15	; 0x0f
    1fc2:	98 89       	ldd	r25, Y+16	; 0x10
    1fc4:	01 97       	sbiw	r24, 0x01	; 1
    1fc6:	f1 f7       	brne	.-4      	; 0x1fc4 <HLCD_voidWriteCmd+0x15a>
    1fc8:	98 8b       	std	Y+16, r25	; 0x10
    1fca:	8f 87       	std	Y+15, r24	; 0x0f
	/* Wait for E to settle */
	_delay_ms(5);

	MDIO_voidSetPinValue(D4_PIN,DATA_PORT,GET_BIT(copy_u8Cmd,0));
    1fcc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1fce:	98 2f       	mov	r25, r24
    1fd0:	91 70       	andi	r25, 0x01	; 1
    1fd2:	80 e0       	ldi	r24, 0x00	; 0
    1fd4:	62 e0       	ldi	r22, 0x02	; 2
    1fd6:	49 2f       	mov	r20, r25
    1fd8:	0e 94 95 09 	call	0x132a	; 0x132a <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(D5_PIN,DATA_PORT,GET_BIT(copy_u8Cmd,1));
    1fdc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1fde:	98 2f       	mov	r25, r24
    1fe0:	92 70       	andi	r25, 0x02	; 2
    1fe2:	81 e0       	ldi	r24, 0x01	; 1
    1fe4:	62 e0       	ldi	r22, 0x02	; 2
    1fe6:	49 2f       	mov	r20, r25
    1fe8:	0e 94 95 09 	call	0x132a	; 0x132a <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(D6_PIN,DATA_PORT,GET_BIT(copy_u8Cmd,2));
    1fec:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1fee:	98 2f       	mov	r25, r24
    1ff0:	94 70       	andi	r25, 0x04	; 4
    1ff2:	82 e0       	ldi	r24, 0x02	; 2
    1ff4:	62 e0       	ldi	r22, 0x02	; 2
    1ff6:	49 2f       	mov	r20, r25
    1ff8:	0e 94 95 09 	call	0x132a	; 0x132a <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(D7_PIN,DATA_PORT,GET_BIT(copy_u8Cmd,3));
    1ffc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1ffe:	98 2f       	mov	r25, r24
    2000:	98 70       	andi	r25, 0x08	; 8
    2002:	83 e0       	ldi	r24, 0x03	; 3
    2004:	62 e0       	ldi	r22, 0x02	; 2
    2006:	49 2f       	mov	r20, r25
    2008:	0e 94 95 09 	call	0x132a	; 0x132a <MDIO_voidSetPinValue>

	/*Set E Pin to HIGH*/
	MDIO_voidSetPinValue(E_PIN,CONTROL_PORT,DIO_HIGH);
    200c:	82 e0       	ldi	r24, 0x02	; 2
    200e:	63 e0       	ldi	r22, 0x03	; 3
    2010:	41 e0       	ldi	r20, 0x01	; 1
    2012:	0e 94 95 09 	call	0x132a	; 0x132a <MDIO_voidSetPinValue>
	/*Set E Pin to LOW*/
	MDIO_voidSetPinValue(E_PIN,CONTROL_PORT,DIO_LOW);
    2016:	82 e0       	ldi	r24, 0x02	; 2
    2018:	63 e0       	ldi	r22, 0x03	; 3
    201a:	40 e0       	ldi	r20, 0x00	; 0
    201c:	0e 94 95 09 	call	0x132a	; 0x132a <MDIO_voidSetPinValue>
    2020:	80 e0       	ldi	r24, 0x00	; 0
    2022:	90 e0       	ldi	r25, 0x00	; 0
    2024:	a0 ea       	ldi	r26, 0xA0	; 160
    2026:	b0 e4       	ldi	r27, 0x40	; 64
    2028:	8b 87       	std	Y+11, r24	; 0x0b
    202a:	9c 87       	std	Y+12, r25	; 0x0c
    202c:	ad 87       	std	Y+13, r26	; 0x0d
    202e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2030:	6b 85       	ldd	r22, Y+11	; 0x0b
    2032:	7c 85       	ldd	r23, Y+12	; 0x0c
    2034:	8d 85       	ldd	r24, Y+13	; 0x0d
    2036:	9e 85       	ldd	r25, Y+14	; 0x0e
    2038:	20 e0       	ldi	r18, 0x00	; 0
    203a:	30 e0       	ldi	r19, 0x00	; 0
    203c:	4a ef       	ldi	r20, 0xFA	; 250
    203e:	54 e4       	ldi	r21, 0x44	; 68
    2040:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2044:	dc 01       	movw	r26, r24
    2046:	cb 01       	movw	r24, r22
    2048:	8f 83       	std	Y+7, r24	; 0x07
    204a:	98 87       	std	Y+8, r25	; 0x08
    204c:	a9 87       	std	Y+9, r26	; 0x09
    204e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2050:	6f 81       	ldd	r22, Y+7	; 0x07
    2052:	78 85       	ldd	r23, Y+8	; 0x08
    2054:	89 85       	ldd	r24, Y+9	; 0x09
    2056:	9a 85       	ldd	r25, Y+10	; 0x0a
    2058:	20 e0       	ldi	r18, 0x00	; 0
    205a:	30 e0       	ldi	r19, 0x00	; 0
    205c:	40 e8       	ldi	r20, 0x80	; 128
    205e:	5f e3       	ldi	r21, 0x3F	; 63
    2060:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2064:	88 23       	and	r24, r24
    2066:	2c f4       	brge	.+10     	; 0x2072 <HLCD_voidWriteCmd+0x208>
		__ticks = 1;
    2068:	81 e0       	ldi	r24, 0x01	; 1
    206a:	90 e0       	ldi	r25, 0x00	; 0
    206c:	9e 83       	std	Y+6, r25	; 0x06
    206e:	8d 83       	std	Y+5, r24	; 0x05
    2070:	3f c0       	rjmp	.+126    	; 0x20f0 <HLCD_voidWriteCmd+0x286>
	else if (__tmp > 65535)
    2072:	6f 81       	ldd	r22, Y+7	; 0x07
    2074:	78 85       	ldd	r23, Y+8	; 0x08
    2076:	89 85       	ldd	r24, Y+9	; 0x09
    2078:	9a 85       	ldd	r25, Y+10	; 0x0a
    207a:	20 e0       	ldi	r18, 0x00	; 0
    207c:	3f ef       	ldi	r19, 0xFF	; 255
    207e:	4f e7       	ldi	r20, 0x7F	; 127
    2080:	57 e4       	ldi	r21, 0x47	; 71
    2082:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2086:	18 16       	cp	r1, r24
    2088:	4c f5       	brge	.+82     	; 0x20dc <HLCD_voidWriteCmd+0x272>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    208a:	6b 85       	ldd	r22, Y+11	; 0x0b
    208c:	7c 85       	ldd	r23, Y+12	; 0x0c
    208e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2090:	9e 85       	ldd	r25, Y+14	; 0x0e
    2092:	20 e0       	ldi	r18, 0x00	; 0
    2094:	30 e0       	ldi	r19, 0x00	; 0
    2096:	40 e2       	ldi	r20, 0x20	; 32
    2098:	51 e4       	ldi	r21, 0x41	; 65
    209a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    209e:	dc 01       	movw	r26, r24
    20a0:	cb 01       	movw	r24, r22
    20a2:	bc 01       	movw	r22, r24
    20a4:	cd 01       	movw	r24, r26
    20a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20aa:	dc 01       	movw	r26, r24
    20ac:	cb 01       	movw	r24, r22
    20ae:	9e 83       	std	Y+6, r25	; 0x06
    20b0:	8d 83       	std	Y+5, r24	; 0x05
    20b2:	0f c0       	rjmp	.+30     	; 0x20d2 <HLCD_voidWriteCmd+0x268>
    20b4:	88 ec       	ldi	r24, 0xC8	; 200
    20b6:	90 e0       	ldi	r25, 0x00	; 0
    20b8:	9c 83       	std	Y+4, r25	; 0x04
    20ba:	8b 83       	std	Y+3, r24	; 0x03
    20bc:	8b 81       	ldd	r24, Y+3	; 0x03
    20be:	9c 81       	ldd	r25, Y+4	; 0x04
    20c0:	01 97       	sbiw	r24, 0x01	; 1
    20c2:	f1 f7       	brne	.-4      	; 0x20c0 <HLCD_voidWriteCmd+0x256>
    20c4:	9c 83       	std	Y+4, r25	; 0x04
    20c6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20c8:	8d 81       	ldd	r24, Y+5	; 0x05
    20ca:	9e 81       	ldd	r25, Y+6	; 0x06
    20cc:	01 97       	sbiw	r24, 0x01	; 1
    20ce:	9e 83       	std	Y+6, r25	; 0x06
    20d0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20d2:	8d 81       	ldd	r24, Y+5	; 0x05
    20d4:	9e 81       	ldd	r25, Y+6	; 0x06
    20d6:	00 97       	sbiw	r24, 0x00	; 0
    20d8:	69 f7       	brne	.-38     	; 0x20b4 <HLCD_voidWriteCmd+0x24a>
    20da:	14 c0       	rjmp	.+40     	; 0x2104 <HLCD_voidWriteCmd+0x29a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20dc:	6f 81       	ldd	r22, Y+7	; 0x07
    20de:	78 85       	ldd	r23, Y+8	; 0x08
    20e0:	89 85       	ldd	r24, Y+9	; 0x09
    20e2:	9a 85       	ldd	r25, Y+10	; 0x0a
    20e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20e8:	dc 01       	movw	r26, r24
    20ea:	cb 01       	movw	r24, r22
    20ec:	9e 83       	std	Y+6, r25	; 0x06
    20ee:	8d 83       	std	Y+5, r24	; 0x05
    20f0:	8d 81       	ldd	r24, Y+5	; 0x05
    20f2:	9e 81       	ldd	r25, Y+6	; 0x06
    20f4:	9a 83       	std	Y+2, r25	; 0x02
    20f6:	89 83       	std	Y+1, r24	; 0x01
    20f8:	89 81       	ldd	r24, Y+1	; 0x01
    20fa:	9a 81       	ldd	r25, Y+2	; 0x02
    20fc:	01 97       	sbiw	r24, 0x01	; 1
    20fe:	f1 f7       	brne	.-4      	; 0x20fc <HLCD_voidWriteCmd+0x292>
    2100:	9a 83       	std	Y+2, r25	; 0x02
    2102:	89 83       	std	Y+1, r24	; 0x01
	/* Wait for E to settle */
	_delay_ms(5);
	#endif

}
    2104:	6d 96       	adiw	r28, 0x1d	; 29
    2106:	0f b6       	in	r0, 0x3f	; 63
    2108:	f8 94       	cli
    210a:	de bf       	out	0x3e, r29	; 62
    210c:	0f be       	out	0x3f, r0	; 63
    210e:	cd bf       	out	0x3d, r28	; 61
    2110:	cf 91       	pop	r28
    2112:	df 91       	pop	r29
    2114:	08 95       	ret

00002116 <HLCD_voidWriteChracter>:

void HLCD_voidWriteChracter(u8 copy_u8Chr)
{
    2116:	df 93       	push	r29
    2118:	cf 93       	push	r28
    211a:	cd b7       	in	r28, 0x3d	; 61
    211c:	de b7       	in	r29, 0x3e	; 62
    211e:	6d 97       	sbiw	r28, 0x1d	; 29
    2120:	0f b6       	in	r0, 0x3f	; 63
    2122:	f8 94       	cli
    2124:	de bf       	out	0x3e, r29	; 62
    2126:	0f be       	out	0x3f, r0	; 63
    2128:	cd bf       	out	0x3d, r28	; 61
    212a:	8d 8f       	std	Y+29, r24	; 0x1d
	/*Set RS Pin to HIGH*/
	MDIO_voidSetPinValue(RS_PIN,CONTROL_PORT,DIO_HIGH);
    212c:	80 e0       	ldi	r24, 0x00	; 0
    212e:	63 e0       	ldi	r22, 0x03	; 3
    2130:	41 e0       	ldi	r20, 0x01	; 1
    2132:	0e 94 95 09 	call	0x132a	; 0x132a <MDIO_voidSetPinValue>
	/*Set RW Pin to LOW*/
	MDIO_voidSetPinValue(RW_PIN,CONTROL_PORT,DIO_LOW);
    2136:	81 e0       	ldi	r24, 0x01	; 1
    2138:	63 e0       	ldi	r22, 0x03	; 3
    213a:	40 e0       	ldi	r20, 0x00	; 0
    213c:	0e 94 95 09 	call	0x132a	; 0x132a <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(E_PIN,CONTROL_PORT,DIO_LOW);
	/* Wait for E to settle */
	_delay_ms(5);
	
	#elif LCD_MODE == _4Bit_Mode
	MDIO_voidSetPinValue(D4_PIN,DATA_PORT,GET_BIT(copy_u8Chr,4));
    2140:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2142:	98 2f       	mov	r25, r24
    2144:	90 71       	andi	r25, 0x10	; 16
    2146:	80 e0       	ldi	r24, 0x00	; 0
    2148:	62 e0       	ldi	r22, 0x02	; 2
    214a:	49 2f       	mov	r20, r25
    214c:	0e 94 95 09 	call	0x132a	; 0x132a <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(D5_PIN,DATA_PORT,GET_BIT(copy_u8Chr,5));
    2150:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2152:	98 2f       	mov	r25, r24
    2154:	90 72       	andi	r25, 0x20	; 32
    2156:	81 e0       	ldi	r24, 0x01	; 1
    2158:	62 e0       	ldi	r22, 0x02	; 2
    215a:	49 2f       	mov	r20, r25
    215c:	0e 94 95 09 	call	0x132a	; 0x132a <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(D6_PIN,DATA_PORT,GET_BIT(copy_u8Chr,6));
    2160:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2162:	98 2f       	mov	r25, r24
    2164:	90 74       	andi	r25, 0x40	; 64
    2166:	82 e0       	ldi	r24, 0x02	; 2
    2168:	62 e0       	ldi	r22, 0x02	; 2
    216a:	49 2f       	mov	r20, r25
    216c:	0e 94 95 09 	call	0x132a	; 0x132a <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(D7_PIN,DATA_PORT,GET_BIT(copy_u8Chr,7));
    2170:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2172:	98 2f       	mov	r25, r24
    2174:	90 78       	andi	r25, 0x80	; 128
    2176:	83 e0       	ldi	r24, 0x03	; 3
    2178:	62 e0       	ldi	r22, 0x02	; 2
    217a:	49 2f       	mov	r20, r25
    217c:	0e 94 95 09 	call	0x132a	; 0x132a <MDIO_voidSetPinValue>
	
	/*Set E Pin to HIGH*/
	MDIO_voidSetPinValue(E_PIN,CONTROL_PORT,DIO_HIGH);
    2180:	82 e0       	ldi	r24, 0x02	; 2
    2182:	63 e0       	ldi	r22, 0x03	; 3
    2184:	41 e0       	ldi	r20, 0x01	; 1
    2186:	0e 94 95 09 	call	0x132a	; 0x132a <MDIO_voidSetPinValue>
	/*Set E Pin to LOW*/
	MDIO_voidSetPinValue(E_PIN,CONTROL_PORT,DIO_LOW);
    218a:	82 e0       	ldi	r24, 0x02	; 2
    218c:	63 e0       	ldi	r22, 0x03	; 3
    218e:	40 e0       	ldi	r20, 0x00	; 0
    2190:	0e 94 95 09 	call	0x132a	; 0x132a <MDIO_voidSetPinValue>
    2194:	80 e0       	ldi	r24, 0x00	; 0
    2196:	90 e0       	ldi	r25, 0x00	; 0
    2198:	a0 ea       	ldi	r26, 0xA0	; 160
    219a:	b0 e4       	ldi	r27, 0x40	; 64
    219c:	89 8f       	std	Y+25, r24	; 0x19
    219e:	9a 8f       	std	Y+26, r25	; 0x1a
    21a0:	ab 8f       	std	Y+27, r26	; 0x1b
    21a2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21a4:	69 8d       	ldd	r22, Y+25	; 0x19
    21a6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    21a8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    21aa:	9c 8d       	ldd	r25, Y+28	; 0x1c
    21ac:	20 e0       	ldi	r18, 0x00	; 0
    21ae:	30 e0       	ldi	r19, 0x00	; 0
    21b0:	4a ef       	ldi	r20, 0xFA	; 250
    21b2:	54 e4       	ldi	r21, 0x44	; 68
    21b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21b8:	dc 01       	movw	r26, r24
    21ba:	cb 01       	movw	r24, r22
    21bc:	8d 8b       	std	Y+21, r24	; 0x15
    21be:	9e 8b       	std	Y+22, r25	; 0x16
    21c0:	af 8b       	std	Y+23, r26	; 0x17
    21c2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    21c4:	6d 89       	ldd	r22, Y+21	; 0x15
    21c6:	7e 89       	ldd	r23, Y+22	; 0x16
    21c8:	8f 89       	ldd	r24, Y+23	; 0x17
    21ca:	98 8d       	ldd	r25, Y+24	; 0x18
    21cc:	20 e0       	ldi	r18, 0x00	; 0
    21ce:	30 e0       	ldi	r19, 0x00	; 0
    21d0:	40 e8       	ldi	r20, 0x80	; 128
    21d2:	5f e3       	ldi	r21, 0x3F	; 63
    21d4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    21d8:	88 23       	and	r24, r24
    21da:	2c f4       	brge	.+10     	; 0x21e6 <HLCD_voidWriteChracter+0xd0>
		__ticks = 1;
    21dc:	81 e0       	ldi	r24, 0x01	; 1
    21de:	90 e0       	ldi	r25, 0x00	; 0
    21e0:	9c 8b       	std	Y+20, r25	; 0x14
    21e2:	8b 8b       	std	Y+19, r24	; 0x13
    21e4:	3f c0       	rjmp	.+126    	; 0x2264 <HLCD_voidWriteChracter+0x14e>
	else if (__tmp > 65535)
    21e6:	6d 89       	ldd	r22, Y+21	; 0x15
    21e8:	7e 89       	ldd	r23, Y+22	; 0x16
    21ea:	8f 89       	ldd	r24, Y+23	; 0x17
    21ec:	98 8d       	ldd	r25, Y+24	; 0x18
    21ee:	20 e0       	ldi	r18, 0x00	; 0
    21f0:	3f ef       	ldi	r19, 0xFF	; 255
    21f2:	4f e7       	ldi	r20, 0x7F	; 127
    21f4:	57 e4       	ldi	r21, 0x47	; 71
    21f6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    21fa:	18 16       	cp	r1, r24
    21fc:	4c f5       	brge	.+82     	; 0x2250 <HLCD_voidWriteChracter+0x13a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21fe:	69 8d       	ldd	r22, Y+25	; 0x19
    2200:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2202:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2204:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2206:	20 e0       	ldi	r18, 0x00	; 0
    2208:	30 e0       	ldi	r19, 0x00	; 0
    220a:	40 e2       	ldi	r20, 0x20	; 32
    220c:	51 e4       	ldi	r21, 0x41	; 65
    220e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2212:	dc 01       	movw	r26, r24
    2214:	cb 01       	movw	r24, r22
    2216:	bc 01       	movw	r22, r24
    2218:	cd 01       	movw	r24, r26
    221a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    221e:	dc 01       	movw	r26, r24
    2220:	cb 01       	movw	r24, r22
    2222:	9c 8b       	std	Y+20, r25	; 0x14
    2224:	8b 8b       	std	Y+19, r24	; 0x13
    2226:	0f c0       	rjmp	.+30     	; 0x2246 <HLCD_voidWriteChracter+0x130>
    2228:	88 ec       	ldi	r24, 0xC8	; 200
    222a:	90 e0       	ldi	r25, 0x00	; 0
    222c:	9a 8b       	std	Y+18, r25	; 0x12
    222e:	89 8b       	std	Y+17, r24	; 0x11
    2230:	89 89       	ldd	r24, Y+17	; 0x11
    2232:	9a 89       	ldd	r25, Y+18	; 0x12
    2234:	01 97       	sbiw	r24, 0x01	; 1
    2236:	f1 f7       	brne	.-4      	; 0x2234 <HLCD_voidWriteChracter+0x11e>
    2238:	9a 8b       	std	Y+18, r25	; 0x12
    223a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    223c:	8b 89       	ldd	r24, Y+19	; 0x13
    223e:	9c 89       	ldd	r25, Y+20	; 0x14
    2240:	01 97       	sbiw	r24, 0x01	; 1
    2242:	9c 8b       	std	Y+20, r25	; 0x14
    2244:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2246:	8b 89       	ldd	r24, Y+19	; 0x13
    2248:	9c 89       	ldd	r25, Y+20	; 0x14
    224a:	00 97       	sbiw	r24, 0x00	; 0
    224c:	69 f7       	brne	.-38     	; 0x2228 <HLCD_voidWriteChracter+0x112>
    224e:	14 c0       	rjmp	.+40     	; 0x2278 <HLCD_voidWriteChracter+0x162>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2250:	6d 89       	ldd	r22, Y+21	; 0x15
    2252:	7e 89       	ldd	r23, Y+22	; 0x16
    2254:	8f 89       	ldd	r24, Y+23	; 0x17
    2256:	98 8d       	ldd	r25, Y+24	; 0x18
    2258:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    225c:	dc 01       	movw	r26, r24
    225e:	cb 01       	movw	r24, r22
    2260:	9c 8b       	std	Y+20, r25	; 0x14
    2262:	8b 8b       	std	Y+19, r24	; 0x13
    2264:	8b 89       	ldd	r24, Y+19	; 0x13
    2266:	9c 89       	ldd	r25, Y+20	; 0x14
    2268:	98 8b       	std	Y+16, r25	; 0x10
    226a:	8f 87       	std	Y+15, r24	; 0x0f
    226c:	8f 85       	ldd	r24, Y+15	; 0x0f
    226e:	98 89       	ldd	r25, Y+16	; 0x10
    2270:	01 97       	sbiw	r24, 0x01	; 1
    2272:	f1 f7       	brne	.-4      	; 0x2270 <HLCD_voidWriteChracter+0x15a>
    2274:	98 8b       	std	Y+16, r25	; 0x10
    2276:	8f 87       	std	Y+15, r24	; 0x0f
	/* Wait for E to settle */
	_delay_ms(5);
	
	MDIO_voidSetPinValue(D4_PIN,DATA_PORT,GET_BIT(copy_u8Chr,0));
    2278:	8d 8d       	ldd	r24, Y+29	; 0x1d
    227a:	98 2f       	mov	r25, r24
    227c:	91 70       	andi	r25, 0x01	; 1
    227e:	80 e0       	ldi	r24, 0x00	; 0
    2280:	62 e0       	ldi	r22, 0x02	; 2
    2282:	49 2f       	mov	r20, r25
    2284:	0e 94 95 09 	call	0x132a	; 0x132a <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(D5_PIN,DATA_PORT,GET_BIT(copy_u8Chr,1));
    2288:	8d 8d       	ldd	r24, Y+29	; 0x1d
    228a:	98 2f       	mov	r25, r24
    228c:	92 70       	andi	r25, 0x02	; 2
    228e:	81 e0       	ldi	r24, 0x01	; 1
    2290:	62 e0       	ldi	r22, 0x02	; 2
    2292:	49 2f       	mov	r20, r25
    2294:	0e 94 95 09 	call	0x132a	; 0x132a <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(D6_PIN,DATA_PORT,GET_BIT(copy_u8Chr,2));
    2298:	8d 8d       	ldd	r24, Y+29	; 0x1d
    229a:	98 2f       	mov	r25, r24
    229c:	94 70       	andi	r25, 0x04	; 4
    229e:	82 e0       	ldi	r24, 0x02	; 2
    22a0:	62 e0       	ldi	r22, 0x02	; 2
    22a2:	49 2f       	mov	r20, r25
    22a4:	0e 94 95 09 	call	0x132a	; 0x132a <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(D7_PIN,DATA_PORT,GET_BIT(copy_u8Chr,3));
    22a8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    22aa:	98 2f       	mov	r25, r24
    22ac:	98 70       	andi	r25, 0x08	; 8
    22ae:	83 e0       	ldi	r24, 0x03	; 3
    22b0:	62 e0       	ldi	r22, 0x02	; 2
    22b2:	49 2f       	mov	r20, r25
    22b4:	0e 94 95 09 	call	0x132a	; 0x132a <MDIO_voidSetPinValue>
	
	/*Set E Pin to HIGH*/
	MDIO_voidSetPinValue(E_PIN,CONTROL_PORT,DIO_HIGH);
    22b8:	82 e0       	ldi	r24, 0x02	; 2
    22ba:	63 e0       	ldi	r22, 0x03	; 3
    22bc:	41 e0       	ldi	r20, 0x01	; 1
    22be:	0e 94 95 09 	call	0x132a	; 0x132a <MDIO_voidSetPinValue>
	/*Set E Pin to LOW*/
	MDIO_voidSetPinValue(E_PIN,CONTROL_PORT,DIO_LOW);
    22c2:	82 e0       	ldi	r24, 0x02	; 2
    22c4:	63 e0       	ldi	r22, 0x03	; 3
    22c6:	40 e0       	ldi	r20, 0x00	; 0
    22c8:	0e 94 95 09 	call	0x132a	; 0x132a <MDIO_voidSetPinValue>
    22cc:	80 e0       	ldi	r24, 0x00	; 0
    22ce:	90 e0       	ldi	r25, 0x00	; 0
    22d0:	a0 ea       	ldi	r26, 0xA0	; 160
    22d2:	b0 e4       	ldi	r27, 0x40	; 64
    22d4:	8b 87       	std	Y+11, r24	; 0x0b
    22d6:	9c 87       	std	Y+12, r25	; 0x0c
    22d8:	ad 87       	std	Y+13, r26	; 0x0d
    22da:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22dc:	6b 85       	ldd	r22, Y+11	; 0x0b
    22de:	7c 85       	ldd	r23, Y+12	; 0x0c
    22e0:	8d 85       	ldd	r24, Y+13	; 0x0d
    22e2:	9e 85       	ldd	r25, Y+14	; 0x0e
    22e4:	20 e0       	ldi	r18, 0x00	; 0
    22e6:	30 e0       	ldi	r19, 0x00	; 0
    22e8:	4a ef       	ldi	r20, 0xFA	; 250
    22ea:	54 e4       	ldi	r21, 0x44	; 68
    22ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22f0:	dc 01       	movw	r26, r24
    22f2:	cb 01       	movw	r24, r22
    22f4:	8f 83       	std	Y+7, r24	; 0x07
    22f6:	98 87       	std	Y+8, r25	; 0x08
    22f8:	a9 87       	std	Y+9, r26	; 0x09
    22fa:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    22fc:	6f 81       	ldd	r22, Y+7	; 0x07
    22fe:	78 85       	ldd	r23, Y+8	; 0x08
    2300:	89 85       	ldd	r24, Y+9	; 0x09
    2302:	9a 85       	ldd	r25, Y+10	; 0x0a
    2304:	20 e0       	ldi	r18, 0x00	; 0
    2306:	30 e0       	ldi	r19, 0x00	; 0
    2308:	40 e8       	ldi	r20, 0x80	; 128
    230a:	5f e3       	ldi	r21, 0x3F	; 63
    230c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2310:	88 23       	and	r24, r24
    2312:	2c f4       	brge	.+10     	; 0x231e <HLCD_voidWriteChracter+0x208>
		__ticks = 1;
    2314:	81 e0       	ldi	r24, 0x01	; 1
    2316:	90 e0       	ldi	r25, 0x00	; 0
    2318:	9e 83       	std	Y+6, r25	; 0x06
    231a:	8d 83       	std	Y+5, r24	; 0x05
    231c:	3f c0       	rjmp	.+126    	; 0x239c <HLCD_voidWriteChracter+0x286>
	else if (__tmp > 65535)
    231e:	6f 81       	ldd	r22, Y+7	; 0x07
    2320:	78 85       	ldd	r23, Y+8	; 0x08
    2322:	89 85       	ldd	r24, Y+9	; 0x09
    2324:	9a 85       	ldd	r25, Y+10	; 0x0a
    2326:	20 e0       	ldi	r18, 0x00	; 0
    2328:	3f ef       	ldi	r19, 0xFF	; 255
    232a:	4f e7       	ldi	r20, 0x7F	; 127
    232c:	57 e4       	ldi	r21, 0x47	; 71
    232e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2332:	18 16       	cp	r1, r24
    2334:	4c f5       	brge	.+82     	; 0x2388 <HLCD_voidWriteChracter+0x272>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2336:	6b 85       	ldd	r22, Y+11	; 0x0b
    2338:	7c 85       	ldd	r23, Y+12	; 0x0c
    233a:	8d 85       	ldd	r24, Y+13	; 0x0d
    233c:	9e 85       	ldd	r25, Y+14	; 0x0e
    233e:	20 e0       	ldi	r18, 0x00	; 0
    2340:	30 e0       	ldi	r19, 0x00	; 0
    2342:	40 e2       	ldi	r20, 0x20	; 32
    2344:	51 e4       	ldi	r21, 0x41	; 65
    2346:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    234a:	dc 01       	movw	r26, r24
    234c:	cb 01       	movw	r24, r22
    234e:	bc 01       	movw	r22, r24
    2350:	cd 01       	movw	r24, r26
    2352:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2356:	dc 01       	movw	r26, r24
    2358:	cb 01       	movw	r24, r22
    235a:	9e 83       	std	Y+6, r25	; 0x06
    235c:	8d 83       	std	Y+5, r24	; 0x05
    235e:	0f c0       	rjmp	.+30     	; 0x237e <HLCD_voidWriteChracter+0x268>
    2360:	88 ec       	ldi	r24, 0xC8	; 200
    2362:	90 e0       	ldi	r25, 0x00	; 0
    2364:	9c 83       	std	Y+4, r25	; 0x04
    2366:	8b 83       	std	Y+3, r24	; 0x03
    2368:	8b 81       	ldd	r24, Y+3	; 0x03
    236a:	9c 81       	ldd	r25, Y+4	; 0x04
    236c:	01 97       	sbiw	r24, 0x01	; 1
    236e:	f1 f7       	brne	.-4      	; 0x236c <HLCD_voidWriteChracter+0x256>
    2370:	9c 83       	std	Y+4, r25	; 0x04
    2372:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2374:	8d 81       	ldd	r24, Y+5	; 0x05
    2376:	9e 81       	ldd	r25, Y+6	; 0x06
    2378:	01 97       	sbiw	r24, 0x01	; 1
    237a:	9e 83       	std	Y+6, r25	; 0x06
    237c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    237e:	8d 81       	ldd	r24, Y+5	; 0x05
    2380:	9e 81       	ldd	r25, Y+6	; 0x06
    2382:	00 97       	sbiw	r24, 0x00	; 0
    2384:	69 f7       	brne	.-38     	; 0x2360 <HLCD_voidWriteChracter+0x24a>
    2386:	14 c0       	rjmp	.+40     	; 0x23b0 <HLCD_voidWriteChracter+0x29a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2388:	6f 81       	ldd	r22, Y+7	; 0x07
    238a:	78 85       	ldd	r23, Y+8	; 0x08
    238c:	89 85       	ldd	r24, Y+9	; 0x09
    238e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2390:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2394:	dc 01       	movw	r26, r24
    2396:	cb 01       	movw	r24, r22
    2398:	9e 83       	std	Y+6, r25	; 0x06
    239a:	8d 83       	std	Y+5, r24	; 0x05
    239c:	8d 81       	ldd	r24, Y+5	; 0x05
    239e:	9e 81       	ldd	r25, Y+6	; 0x06
    23a0:	9a 83       	std	Y+2, r25	; 0x02
    23a2:	89 83       	std	Y+1, r24	; 0x01
    23a4:	89 81       	ldd	r24, Y+1	; 0x01
    23a6:	9a 81       	ldd	r25, Y+2	; 0x02
    23a8:	01 97       	sbiw	r24, 0x01	; 1
    23aa:	f1 f7       	brne	.-4      	; 0x23a8 <HLCD_voidWriteChracter+0x292>
    23ac:	9a 83       	std	Y+2, r25	; 0x02
    23ae:	89 83       	std	Y+1, r24	; 0x01
	/* Wait for E to settle */
	_delay_ms(5);
	#endif
}
    23b0:	6d 96       	adiw	r28, 0x1d	; 29
    23b2:	0f b6       	in	r0, 0x3f	; 63
    23b4:	f8 94       	cli
    23b6:	de bf       	out	0x3e, r29	; 62
    23b8:	0f be       	out	0x3f, r0	; 63
    23ba:	cd bf       	out	0x3d, r28	; 61
    23bc:	cf 91       	pop	r28
    23be:	df 91       	pop	r29
    23c0:	08 95       	ret

000023c2 <HLCD_voidWriteString>:

void HLCD_voidWriteString(u8* copy_u8PStr)
{
    23c2:	df 93       	push	r29
    23c4:	cf 93       	push	r28
    23c6:	00 d0       	rcall	.+0      	; 0x23c8 <HLCD_voidWriteString+0x6>
    23c8:	0f 92       	push	r0
    23ca:	cd b7       	in	r28, 0x3d	; 61
    23cc:	de b7       	in	r29, 0x3e	; 62
    23ce:	9b 83       	std	Y+3, r25	; 0x03
    23d0:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8Iteration=0;
    23d2:	19 82       	std	Y+1, r1	; 0x01
    23d4:	0f c0       	rjmp	.+30     	; 0x23f4 <HLCD_voidWriteString+0x32>
	while(copy_u8PStr[Local_u8Iteration]!='\0')
	{
		HLCD_voidWriteChracter(copy_u8PStr[Local_u8Iteration++]);
    23d6:	89 81       	ldd	r24, Y+1	; 0x01
    23d8:	28 2f       	mov	r18, r24
    23da:	30 e0       	ldi	r19, 0x00	; 0
    23dc:	8a 81       	ldd	r24, Y+2	; 0x02
    23de:	9b 81       	ldd	r25, Y+3	; 0x03
    23e0:	fc 01       	movw	r30, r24
    23e2:	e2 0f       	add	r30, r18
    23e4:	f3 1f       	adc	r31, r19
    23e6:	90 81       	ld	r25, Z
    23e8:	89 81       	ldd	r24, Y+1	; 0x01
    23ea:	8f 5f       	subi	r24, 0xFF	; 255
    23ec:	89 83       	std	Y+1, r24	; 0x01
    23ee:	89 2f       	mov	r24, r25
    23f0:	0e 94 8b 10 	call	0x2116	; 0x2116 <HLCD_voidWriteChracter>
}

void HLCD_voidWriteString(u8* copy_u8PStr)
{
	u8 Local_u8Iteration=0;
	while(copy_u8PStr[Local_u8Iteration]!='\0')
    23f4:	89 81       	ldd	r24, Y+1	; 0x01
    23f6:	28 2f       	mov	r18, r24
    23f8:	30 e0       	ldi	r19, 0x00	; 0
    23fa:	8a 81       	ldd	r24, Y+2	; 0x02
    23fc:	9b 81       	ldd	r25, Y+3	; 0x03
    23fe:	fc 01       	movw	r30, r24
    2400:	e2 0f       	add	r30, r18
    2402:	f3 1f       	adc	r31, r19
    2404:	80 81       	ld	r24, Z
    2406:	88 23       	and	r24, r24
    2408:	31 f7       	brne	.-52     	; 0x23d6 <HLCD_voidWriteString+0x14>
	{
		HLCD_voidWriteChracter(copy_u8PStr[Local_u8Iteration++]);
	}
}
    240a:	0f 90       	pop	r0
    240c:	0f 90       	pop	r0
    240e:	0f 90       	pop	r0
    2410:	cf 91       	pop	r28
    2412:	df 91       	pop	r29
    2414:	08 95       	ret

00002416 <HLCD_voidClear>:

void HLCD_voidClear(void)
{
    2416:	df 93       	push	r29
    2418:	cf 93       	push	r28
    241a:	cd b7       	in	r28, 0x3d	; 61
    241c:	de b7       	in	r29, 0x3e	; 62
    241e:	2e 97       	sbiw	r28, 0x0e	; 14
    2420:	0f b6       	in	r0, 0x3f	; 63
    2422:	f8 94       	cli
    2424:	de bf       	out	0x3e, r29	; 62
    2426:	0f be       	out	0x3f, r0	; 63
    2428:	cd bf       	out	0x3d, r28	; 61
	#if LCD_MODE == _8Bit_Mode
	HLCD_voidWriteCmd(0x01);
	_delay_ms(2);
	#elif LCD_MODE == _4Bit_Mode
	HLCD_voidWriteCmd(0x00);
    242a:	80 e0       	ldi	r24, 0x00	; 0
    242c:	0e 94 35 0f 	call	0x1e6a	; 0x1e6a <HLCD_voidWriteCmd>
	HLCD_voidWriteCmd(0x10);
    2430:	80 e1       	ldi	r24, 0x10	; 16
    2432:	0e 94 35 0f 	call	0x1e6a	; 0x1e6a <HLCD_voidWriteCmd>
    2436:	80 e0       	ldi	r24, 0x00	; 0
    2438:	90 e0       	ldi	r25, 0x00	; 0
    243a:	a0 e0       	ldi	r26, 0x00	; 0
    243c:	b0 e4       	ldi	r27, 0x40	; 64
    243e:	8b 87       	std	Y+11, r24	; 0x0b
    2440:	9c 87       	std	Y+12, r25	; 0x0c
    2442:	ad 87       	std	Y+13, r26	; 0x0d
    2444:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2446:	6b 85       	ldd	r22, Y+11	; 0x0b
    2448:	7c 85       	ldd	r23, Y+12	; 0x0c
    244a:	8d 85       	ldd	r24, Y+13	; 0x0d
    244c:	9e 85       	ldd	r25, Y+14	; 0x0e
    244e:	20 e0       	ldi	r18, 0x00	; 0
    2450:	30 e0       	ldi	r19, 0x00	; 0
    2452:	4a ef       	ldi	r20, 0xFA	; 250
    2454:	54 e4       	ldi	r21, 0x44	; 68
    2456:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    245a:	dc 01       	movw	r26, r24
    245c:	cb 01       	movw	r24, r22
    245e:	8f 83       	std	Y+7, r24	; 0x07
    2460:	98 87       	std	Y+8, r25	; 0x08
    2462:	a9 87       	std	Y+9, r26	; 0x09
    2464:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2466:	6f 81       	ldd	r22, Y+7	; 0x07
    2468:	78 85       	ldd	r23, Y+8	; 0x08
    246a:	89 85       	ldd	r24, Y+9	; 0x09
    246c:	9a 85       	ldd	r25, Y+10	; 0x0a
    246e:	20 e0       	ldi	r18, 0x00	; 0
    2470:	30 e0       	ldi	r19, 0x00	; 0
    2472:	40 e8       	ldi	r20, 0x80	; 128
    2474:	5f e3       	ldi	r21, 0x3F	; 63
    2476:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    247a:	88 23       	and	r24, r24
    247c:	2c f4       	brge	.+10     	; 0x2488 <HLCD_voidClear+0x72>
		__ticks = 1;
    247e:	81 e0       	ldi	r24, 0x01	; 1
    2480:	90 e0       	ldi	r25, 0x00	; 0
    2482:	9e 83       	std	Y+6, r25	; 0x06
    2484:	8d 83       	std	Y+5, r24	; 0x05
    2486:	3f c0       	rjmp	.+126    	; 0x2506 <HLCD_voidClear+0xf0>
	else if (__tmp > 65535)
    2488:	6f 81       	ldd	r22, Y+7	; 0x07
    248a:	78 85       	ldd	r23, Y+8	; 0x08
    248c:	89 85       	ldd	r24, Y+9	; 0x09
    248e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2490:	20 e0       	ldi	r18, 0x00	; 0
    2492:	3f ef       	ldi	r19, 0xFF	; 255
    2494:	4f e7       	ldi	r20, 0x7F	; 127
    2496:	57 e4       	ldi	r21, 0x47	; 71
    2498:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    249c:	18 16       	cp	r1, r24
    249e:	4c f5       	brge	.+82     	; 0x24f2 <HLCD_voidClear+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24a0:	6b 85       	ldd	r22, Y+11	; 0x0b
    24a2:	7c 85       	ldd	r23, Y+12	; 0x0c
    24a4:	8d 85       	ldd	r24, Y+13	; 0x0d
    24a6:	9e 85       	ldd	r25, Y+14	; 0x0e
    24a8:	20 e0       	ldi	r18, 0x00	; 0
    24aa:	30 e0       	ldi	r19, 0x00	; 0
    24ac:	40 e2       	ldi	r20, 0x20	; 32
    24ae:	51 e4       	ldi	r21, 0x41	; 65
    24b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24b4:	dc 01       	movw	r26, r24
    24b6:	cb 01       	movw	r24, r22
    24b8:	bc 01       	movw	r22, r24
    24ba:	cd 01       	movw	r24, r26
    24bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24c0:	dc 01       	movw	r26, r24
    24c2:	cb 01       	movw	r24, r22
    24c4:	9e 83       	std	Y+6, r25	; 0x06
    24c6:	8d 83       	std	Y+5, r24	; 0x05
    24c8:	0f c0       	rjmp	.+30     	; 0x24e8 <HLCD_voidClear+0xd2>
    24ca:	88 ec       	ldi	r24, 0xC8	; 200
    24cc:	90 e0       	ldi	r25, 0x00	; 0
    24ce:	9c 83       	std	Y+4, r25	; 0x04
    24d0:	8b 83       	std	Y+3, r24	; 0x03
    24d2:	8b 81       	ldd	r24, Y+3	; 0x03
    24d4:	9c 81       	ldd	r25, Y+4	; 0x04
    24d6:	01 97       	sbiw	r24, 0x01	; 1
    24d8:	f1 f7       	brne	.-4      	; 0x24d6 <HLCD_voidClear+0xc0>
    24da:	9c 83       	std	Y+4, r25	; 0x04
    24dc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24de:	8d 81       	ldd	r24, Y+5	; 0x05
    24e0:	9e 81       	ldd	r25, Y+6	; 0x06
    24e2:	01 97       	sbiw	r24, 0x01	; 1
    24e4:	9e 83       	std	Y+6, r25	; 0x06
    24e6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24e8:	8d 81       	ldd	r24, Y+5	; 0x05
    24ea:	9e 81       	ldd	r25, Y+6	; 0x06
    24ec:	00 97       	sbiw	r24, 0x00	; 0
    24ee:	69 f7       	brne	.-38     	; 0x24ca <HLCD_voidClear+0xb4>
    24f0:	14 c0       	rjmp	.+40     	; 0x251a <HLCD_voidClear+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24f2:	6f 81       	ldd	r22, Y+7	; 0x07
    24f4:	78 85       	ldd	r23, Y+8	; 0x08
    24f6:	89 85       	ldd	r24, Y+9	; 0x09
    24f8:	9a 85       	ldd	r25, Y+10	; 0x0a
    24fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24fe:	dc 01       	movw	r26, r24
    2500:	cb 01       	movw	r24, r22
    2502:	9e 83       	std	Y+6, r25	; 0x06
    2504:	8d 83       	std	Y+5, r24	; 0x05
    2506:	8d 81       	ldd	r24, Y+5	; 0x05
    2508:	9e 81       	ldd	r25, Y+6	; 0x06
    250a:	9a 83       	std	Y+2, r25	; 0x02
    250c:	89 83       	std	Y+1, r24	; 0x01
    250e:	89 81       	ldd	r24, Y+1	; 0x01
    2510:	9a 81       	ldd	r25, Y+2	; 0x02
    2512:	01 97       	sbiw	r24, 0x01	; 1
    2514:	f1 f7       	brne	.-4      	; 0x2512 <HLCD_voidClear+0xfc>
    2516:	9a 83       	std	Y+2, r25	; 0x02
    2518:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	#endif
}
    251a:	2e 96       	adiw	r28, 0x0e	; 14
    251c:	0f b6       	in	r0, 0x3f	; 63
    251e:	f8 94       	cli
    2520:	de bf       	out	0x3e, r29	; 62
    2522:	0f be       	out	0x3f, r0	; 63
    2524:	cd bf       	out	0x3d, r28	; 61
    2526:	cf 91       	pop	r28
    2528:	df 91       	pop	r29
    252a:	08 95       	ret

0000252c <HLCD_voidGoTo>:

void HLCD_voidGoTo(u8 copy_u8XLoc , u8 copy_u8YLoc)
{
    252c:	df 93       	push	r29
    252e:	cf 93       	push	r28
    2530:	00 d0       	rcall	.+0      	; 0x2532 <HLCD_voidGoTo+0x6>
    2532:	00 d0       	rcall	.+0      	; 0x2534 <HLCD_voidGoTo+0x8>
    2534:	cd b7       	in	r28, 0x3d	; 61
    2536:	de b7       	in	r29, 0x3e	; 62
    2538:	89 83       	std	Y+1, r24	; 0x01
    253a:	6a 83       	std	Y+2, r22	; 0x02
	switch(copy_u8XLoc)
    253c:	89 81       	ldd	r24, Y+1	; 0x01
    253e:	28 2f       	mov	r18, r24
    2540:	30 e0       	ldi	r19, 0x00	; 0
    2542:	3c 83       	std	Y+4, r19	; 0x04
    2544:	2b 83       	std	Y+3, r18	; 0x03
    2546:	8b 81       	ldd	r24, Y+3	; 0x03
    2548:	9c 81       	ldd	r25, Y+4	; 0x04
    254a:	00 97       	sbiw	r24, 0x00	; 0
    254c:	31 f0       	breq	.+12     	; 0x255a <HLCD_voidGoTo+0x2e>
    254e:	2b 81       	ldd	r18, Y+3	; 0x03
    2550:	3c 81       	ldd	r19, Y+4	; 0x04
    2552:	21 30       	cpi	r18, 0x01	; 1
    2554:	31 05       	cpc	r19, r1
    2556:	31 f0       	breq	.+12     	; 0x2564 <HLCD_voidGoTo+0x38>
    2558:	09 c0       	rjmp	.+18     	; 0x256c <HLCD_voidGoTo+0x40>
	{
		case 0:
			HLCD_voidWriteCmd(copy_u8YLoc+128);
    255a:	8a 81       	ldd	r24, Y+2	; 0x02
    255c:	80 58       	subi	r24, 0x80	; 128
    255e:	0e 94 35 0f 	call	0x1e6a	; 0x1e6a <HLCD_voidWriteCmd>
    2562:	04 c0       	rjmp	.+8      	; 0x256c <HLCD_voidGoTo+0x40>
			break;
		case 1:
			HLCD_voidWriteCmd(copy_u8YLoc+191);
    2564:	8a 81       	ldd	r24, Y+2	; 0x02
    2566:	81 54       	subi	r24, 0x41	; 65
    2568:	0e 94 35 0f 	call	0x1e6a	; 0x1e6a <HLCD_voidWriteCmd>
			break;
		default:
			break;
	}
}
    256c:	0f 90       	pop	r0
    256e:	0f 90       	pop	r0
    2570:	0f 90       	pop	r0
    2572:	0f 90       	pop	r0
    2574:	cf 91       	pop	r28
    2576:	df 91       	pop	r29
    2578:	08 95       	ret

0000257a <HLCD_voidWriteNumber>:



void HLCD_voidWriteNumber(f64 number)
{
    257a:	ef 92       	push	r14
    257c:	ff 92       	push	r15
    257e:	0f 93       	push	r16
    2580:	1f 93       	push	r17
    2582:	df 93       	push	r29
    2584:	cf 93       	push	r28
    2586:	cd b7       	in	r28, 0x3d	; 61
    2588:	de b7       	in	r29, 0x3e	; 62
    258a:	a7 97       	sbiw	r28, 0x27	; 39
    258c:	0f b6       	in	r0, 0x3f	; 63
    258e:	f8 94       	cli
    2590:	de bf       	out	0x3e, r29	; 62
    2592:	0f be       	out	0x3f, r0	; 63
    2594:	cd bf       	out	0x3d, r28	; 61
    2596:	6c a3       	std	Y+36, r22	; 0x24
    2598:	7d a3       	std	Y+37, r23	; 0x25
    259a:	8e a3       	std	Y+38, r24	; 0x26
    259c:	9f a3       	std	Y+39, r25	; 0x27
	s8 i=0,j=0;
    259e:	1f 86       	std	Y+15, r1	; 0x0f
    25a0:	1e 86       	std	Y+14, r1	; 0x0e
	u32 x=number;
    25a2:	6c a1       	ldd	r22, Y+36	; 0x24
    25a4:	7d a1       	ldd	r23, Y+37	; 0x25
    25a6:	8e a1       	ldd	r24, Y+38	; 0x26
    25a8:	9f a1       	ldd	r25, Y+39	; 0x27
    25aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25ae:	dc 01       	movw	r26, r24
    25b0:	cb 01       	movw	r24, r22
    25b2:	8a 87       	std	Y+10, r24	; 0x0a
    25b4:	9b 87       	std	Y+11, r25	; 0x0b
    25b6:	ac 87       	std	Y+12, r26	; 0x0c
    25b8:	bd 87       	std	Y+13, r27	; 0x0d
	u8 base_NUM[10]={0};
    25ba:	8a e0       	ldi	r24, 0x0A	; 10
    25bc:	fe 01       	movw	r30, r28
    25be:	70 96       	adiw	r30, 0x10	; 16
    25c0:	df 01       	movw	r26, r30
    25c2:	98 2f       	mov	r25, r24
    25c4:	1d 92       	st	X+, r1
    25c6:	9a 95       	dec	r25
    25c8:	e9 f7       	brne	.-6      	; 0x25c4 <HLCD_voidWriteNumber+0x4a>
	f64 y=0;
    25ca:	80 e0       	ldi	r24, 0x00	; 0
    25cc:	90 e0       	ldi	r25, 0x00	; 0
    25ce:	a0 e0       	ldi	r26, 0x00	; 0
    25d0:	b0 e0       	ldi	r27, 0x00	; 0
    25d2:	8e 83       	std	Y+6, r24	; 0x06
    25d4:	9f 83       	std	Y+7, r25	; 0x07
    25d6:	a8 87       	std	Y+8, r26	; 0x08
    25d8:	b9 87       	std	Y+9, r27	; 0x09
	if (number<0)
    25da:	6c a1       	ldd	r22, Y+36	; 0x24
    25dc:	7d a1       	ldd	r23, Y+37	; 0x25
    25de:	8e a1       	ldd	r24, Y+38	; 0x26
    25e0:	9f a1       	ldd	r25, Y+39	; 0x27
    25e2:	20 e0       	ldi	r18, 0x00	; 0
    25e4:	30 e0       	ldi	r19, 0x00	; 0
    25e6:	40 e0       	ldi	r20, 0x00	; 0
    25e8:	50 e0       	ldi	r21, 0x00	; 0
    25ea:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    25ee:	88 23       	and	r24, r24
    25f0:	c4 f4       	brge	.+48     	; 0x2622 <HLCD_voidWriteNumber+0xa8>
	{
		number*=-1;
    25f2:	8c a1       	ldd	r24, Y+36	; 0x24
    25f4:	9d a1       	ldd	r25, Y+37	; 0x25
    25f6:	ae a1       	ldd	r26, Y+38	; 0x26
    25f8:	bf a1       	ldd	r27, Y+39	; 0x27
    25fa:	b0 58       	subi	r27, 0x80	; 128
    25fc:	8c a3       	std	Y+36, r24	; 0x24
    25fe:	9d a3       	std	Y+37, r25	; 0x25
    2600:	ae a3       	std	Y+38, r26	; 0x26
    2602:	bf a3       	std	Y+39, r27	; 0x27
		x=number;
    2604:	6c a1       	ldd	r22, Y+36	; 0x24
    2606:	7d a1       	ldd	r23, Y+37	; 0x25
    2608:	8e a1       	ldd	r24, Y+38	; 0x26
    260a:	9f a1       	ldd	r25, Y+39	; 0x27
    260c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2610:	dc 01       	movw	r26, r24
    2612:	cb 01       	movw	r24, r22
    2614:	8a 87       	std	Y+10, r24	; 0x0a
    2616:	9b 87       	std	Y+11, r25	; 0x0b
    2618:	ac 87       	std	Y+12, r26	; 0x0c
    261a:	bd 87       	std	Y+13, r27	; 0x0d
		HLCD_voidWriteChracter('-');
    261c:	8d e2       	ldi	r24, 0x2D	; 45
    261e:	0e 94 8b 10 	call	0x2116	; 0x2116 <HLCD_voidWriteChracter>
	}
	y=(((number+1.0)-x)*10000000);
    2622:	6c a1       	ldd	r22, Y+36	; 0x24
    2624:	7d a1       	ldd	r23, Y+37	; 0x25
    2626:	8e a1       	ldd	r24, Y+38	; 0x26
    2628:	9f a1       	ldd	r25, Y+39	; 0x27
    262a:	20 e0       	ldi	r18, 0x00	; 0
    262c:	30 e0       	ldi	r19, 0x00	; 0
    262e:	40 e8       	ldi	r20, 0x80	; 128
    2630:	5f e3       	ldi	r21, 0x3F	; 63
    2632:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    2636:	dc 01       	movw	r26, r24
    2638:	cb 01       	movw	r24, r22
    263a:	7c 01       	movw	r14, r24
    263c:	8d 01       	movw	r16, r26
    263e:	6a 85       	ldd	r22, Y+10	; 0x0a
    2640:	7b 85       	ldd	r23, Y+11	; 0x0b
    2642:	8c 85       	ldd	r24, Y+12	; 0x0c
    2644:	9d 85       	ldd	r25, Y+13	; 0x0d
    2646:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__floatunsisf>
    264a:	9b 01       	movw	r18, r22
    264c:	ac 01       	movw	r20, r24
    264e:	c8 01       	movw	r24, r16
    2650:	b7 01       	movw	r22, r14
    2652:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    2656:	dc 01       	movw	r26, r24
    2658:	cb 01       	movw	r24, r22
    265a:	bc 01       	movw	r22, r24
    265c:	cd 01       	movw	r24, r26
    265e:	20 e8       	ldi	r18, 0x80	; 128
    2660:	36 e9       	ldi	r19, 0x96	; 150
    2662:	48 e1       	ldi	r20, 0x18	; 24
    2664:	5b e4       	ldi	r21, 0x4B	; 75
    2666:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    266a:	dc 01       	movw	r26, r24
    266c:	cb 01       	movw	r24, r22
    266e:	8e 83       	std	Y+6, r24	; 0x06
    2670:	9f 83       	std	Y+7, r25	; 0x07
    2672:	a8 87       	std	Y+8, r26	; 0x08
    2674:	b9 87       	std	Y+9, r27	; 0x09
    2676:	2f c0       	rjmp	.+94     	; 0x26d6 <HLCD_voidWriteNumber+0x15c>
	while(x !=0)
	{
		base_NUM[i++] = x % 10;
    2678:	8f 85       	ldd	r24, Y+15	; 0x0f
    267a:	08 2f       	mov	r16, r24
    267c:	11 27       	eor	r17, r17
    267e:	07 fd       	sbrc	r16, 7
    2680:	10 95       	com	r17
    2682:	8a 85       	ldd	r24, Y+10	; 0x0a
    2684:	9b 85       	ldd	r25, Y+11	; 0x0b
    2686:	ac 85       	ldd	r26, Y+12	; 0x0c
    2688:	bd 85       	ldd	r27, Y+13	; 0x0d
    268a:	2a e0       	ldi	r18, 0x0A	; 10
    268c:	30 e0       	ldi	r19, 0x00	; 0
    268e:	40 e0       	ldi	r20, 0x00	; 0
    2690:	50 e0       	ldi	r21, 0x00	; 0
    2692:	bc 01       	movw	r22, r24
    2694:	cd 01       	movw	r24, r26
    2696:	0e 94 7d 20 	call	0x40fa	; 0x40fa <__udivmodsi4>
    269a:	dc 01       	movw	r26, r24
    269c:	cb 01       	movw	r24, r22
    269e:	28 2f       	mov	r18, r24
    26a0:	ce 01       	movw	r24, r28
    26a2:	40 96       	adiw	r24, 0x10	; 16
    26a4:	fc 01       	movw	r30, r24
    26a6:	e0 0f       	add	r30, r16
    26a8:	f1 1f       	adc	r31, r17
    26aa:	20 83       	st	Z, r18
    26ac:	8f 85       	ldd	r24, Y+15	; 0x0f
    26ae:	8f 5f       	subi	r24, 0xFF	; 255
    26b0:	8f 87       	std	Y+15, r24	; 0x0f
		x/=10;
    26b2:	8a 85       	ldd	r24, Y+10	; 0x0a
    26b4:	9b 85       	ldd	r25, Y+11	; 0x0b
    26b6:	ac 85       	ldd	r26, Y+12	; 0x0c
    26b8:	bd 85       	ldd	r27, Y+13	; 0x0d
    26ba:	2a e0       	ldi	r18, 0x0A	; 10
    26bc:	30 e0       	ldi	r19, 0x00	; 0
    26be:	40 e0       	ldi	r20, 0x00	; 0
    26c0:	50 e0       	ldi	r21, 0x00	; 0
    26c2:	bc 01       	movw	r22, r24
    26c4:	cd 01       	movw	r24, r26
    26c6:	0e 94 7d 20 	call	0x40fa	; 0x40fa <__udivmodsi4>
    26ca:	da 01       	movw	r26, r20
    26cc:	c9 01       	movw	r24, r18
    26ce:	8a 87       	std	Y+10, r24	; 0x0a
    26d0:	9b 87       	std	Y+11, r25	; 0x0b
    26d2:	ac 87       	std	Y+12, r26	; 0x0c
    26d4:	bd 87       	std	Y+13, r27	; 0x0d
		number*=-1;
		x=number;
		HLCD_voidWriteChracter('-');
	}
	y=(((number+1.0)-x)*10000000);
	while(x !=0)
    26d6:	8a 85       	ldd	r24, Y+10	; 0x0a
    26d8:	9b 85       	ldd	r25, Y+11	; 0x0b
    26da:	ac 85       	ldd	r26, Y+12	; 0x0c
    26dc:	bd 85       	ldd	r27, Y+13	; 0x0d
    26de:	00 97       	sbiw	r24, 0x00	; 0
    26e0:	a1 05       	cpc	r26, r1
    26e2:	b1 05       	cpc	r27, r1
    26e4:	49 f6       	brne	.-110    	; 0x2678 <HLCD_voidWriteNumber+0xfe>
	{
		base_NUM[i++] = x % 10;
		x/=10;
	}
	u8 k=i--;
    26e6:	8f 85       	ldd	r24, Y+15	; 0x0f
    26e8:	8d 83       	std	Y+5, r24	; 0x05
    26ea:	8f 85       	ldd	r24, Y+15	; 0x0f
    26ec:	81 50       	subi	r24, 0x01	; 1
    26ee:	8f 87       	std	Y+15, r24	; 0x0f
    26f0:	13 c0       	rjmp	.+38     	; 0x2718 <HLCD_voidWriteNumber+0x19e>
	while(i>=0)
	{
		HLCD_voidWriteChracter(base_NUM[i--]+48);
    26f2:	8f 85       	ldd	r24, Y+15	; 0x0f
    26f4:	28 2f       	mov	r18, r24
    26f6:	33 27       	eor	r19, r19
    26f8:	27 fd       	sbrc	r18, 7
    26fa:	30 95       	com	r19
    26fc:	ce 01       	movw	r24, r28
    26fe:	40 96       	adiw	r24, 0x10	; 16
    2700:	fc 01       	movw	r30, r24
    2702:	e2 0f       	add	r30, r18
    2704:	f3 1f       	adc	r31, r19
    2706:	80 81       	ld	r24, Z
    2708:	98 2f       	mov	r25, r24
    270a:	90 5d       	subi	r25, 0xD0	; 208
    270c:	8f 85       	ldd	r24, Y+15	; 0x0f
    270e:	81 50       	subi	r24, 0x01	; 1
    2710:	8f 87       	std	Y+15, r24	; 0x0f
    2712:	89 2f       	mov	r24, r25
    2714:	0e 94 8b 10 	call	0x2116	; 0x2116 <HLCD_voidWriteChracter>
	{
		base_NUM[i++] = x % 10;
		x/=10;
	}
	u8 k=i--;
	while(i>=0)
    2718:	8f 85       	ldd	r24, Y+15	; 0x0f
    271a:	88 23       	and	r24, r24
    271c:	54 f7       	brge	.-44     	; 0x26f2 <HLCD_voidWriteNumber+0x178>
	{
		HLCD_voidWriteChracter(base_NUM[i--]+48);
	}
	u8 F_NUM[10]={0};
    271e:	8a e0       	ldi	r24, 0x0A	; 10
    2720:	fe 01       	movw	r30, r28
    2722:	7a 96       	adiw	r30, 0x1a	; 26
    2724:	df 01       	movw	r26, r30
    2726:	98 2f       	mov	r25, r24
    2728:	1d 92       	st	X+, r1
    272a:	9a 95       	dec	r25
    272c:	e9 f7       	brne	.-6      	; 0x2728 <HLCD_voidWriteNumber+0x1ae>
	i=0;
    272e:	1f 86       	std	Y+15, r1	; 0x0f
	u32 z=y;
    2730:	6e 81       	ldd	r22, Y+6	; 0x06
    2732:	7f 81       	ldd	r23, Y+7	; 0x07
    2734:	88 85       	ldd	r24, Y+8	; 0x08
    2736:	99 85       	ldd	r25, Y+9	; 0x09
    2738:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    273c:	dc 01       	movw	r26, r24
    273e:	cb 01       	movw	r24, r22
    2740:	89 83       	std	Y+1, r24	; 0x01
    2742:	9a 83       	std	Y+2, r25	; 0x02
    2744:	ab 83       	std	Y+3, r26	; 0x03
    2746:	bc 83       	std	Y+4, r27	; 0x04
	HLCD_voidWriteChracter('.');
    2748:	8e e2       	ldi	r24, 0x2E	; 46
    274a:	0e 94 8b 10 	call	0x2116	; 0x2116 <HLCD_voidWriteChracter>
    274e:	2f c0       	rjmp	.+94     	; 0x27ae <HLCD_voidWriteNumber+0x234>
	while(z !=0)
	{
		F_NUM[i++] = z % 10;
    2750:	8f 85       	ldd	r24, Y+15	; 0x0f
    2752:	08 2f       	mov	r16, r24
    2754:	11 27       	eor	r17, r17
    2756:	07 fd       	sbrc	r16, 7
    2758:	10 95       	com	r17
    275a:	89 81       	ldd	r24, Y+1	; 0x01
    275c:	9a 81       	ldd	r25, Y+2	; 0x02
    275e:	ab 81       	ldd	r26, Y+3	; 0x03
    2760:	bc 81       	ldd	r27, Y+4	; 0x04
    2762:	2a e0       	ldi	r18, 0x0A	; 10
    2764:	30 e0       	ldi	r19, 0x00	; 0
    2766:	40 e0       	ldi	r20, 0x00	; 0
    2768:	50 e0       	ldi	r21, 0x00	; 0
    276a:	bc 01       	movw	r22, r24
    276c:	cd 01       	movw	r24, r26
    276e:	0e 94 7d 20 	call	0x40fa	; 0x40fa <__udivmodsi4>
    2772:	dc 01       	movw	r26, r24
    2774:	cb 01       	movw	r24, r22
    2776:	28 2f       	mov	r18, r24
    2778:	ce 01       	movw	r24, r28
    277a:	4a 96       	adiw	r24, 0x1a	; 26
    277c:	fc 01       	movw	r30, r24
    277e:	e0 0f       	add	r30, r16
    2780:	f1 1f       	adc	r31, r17
    2782:	20 83       	st	Z, r18
    2784:	8f 85       	ldd	r24, Y+15	; 0x0f
    2786:	8f 5f       	subi	r24, 0xFF	; 255
    2788:	8f 87       	std	Y+15, r24	; 0x0f
		z/=10;
    278a:	89 81       	ldd	r24, Y+1	; 0x01
    278c:	9a 81       	ldd	r25, Y+2	; 0x02
    278e:	ab 81       	ldd	r26, Y+3	; 0x03
    2790:	bc 81       	ldd	r27, Y+4	; 0x04
    2792:	2a e0       	ldi	r18, 0x0A	; 10
    2794:	30 e0       	ldi	r19, 0x00	; 0
    2796:	40 e0       	ldi	r20, 0x00	; 0
    2798:	50 e0       	ldi	r21, 0x00	; 0
    279a:	bc 01       	movw	r22, r24
    279c:	cd 01       	movw	r24, r26
    279e:	0e 94 7d 20 	call	0x40fa	; 0x40fa <__udivmodsi4>
    27a2:	da 01       	movw	r26, r20
    27a4:	c9 01       	movw	r24, r18
    27a6:	89 83       	std	Y+1, r24	; 0x01
    27a8:	9a 83       	std	Y+2, r25	; 0x02
    27aa:	ab 83       	std	Y+3, r26	; 0x03
    27ac:	bc 83       	std	Y+4, r27	; 0x04
	}
	u8 F_NUM[10]={0};
	i=0;
	u32 z=y;
	HLCD_voidWriteChracter('.');
	while(z !=0)
    27ae:	89 81       	ldd	r24, Y+1	; 0x01
    27b0:	9a 81       	ldd	r25, Y+2	; 0x02
    27b2:	ab 81       	ldd	r26, Y+3	; 0x03
    27b4:	bc 81       	ldd	r27, Y+4	; 0x04
    27b6:	00 97       	sbiw	r24, 0x00	; 0
    27b8:	a1 05       	cpc	r26, r1
    27ba:	b1 05       	cpc	r27, r1
    27bc:	49 f6       	brne	.-110    	; 0x2750 <HLCD_voidWriteNumber+0x1d6>
	{
		F_NUM[i++] = z % 10;
		z/=10;
	}
	i-=2;
    27be:	8f 85       	ldd	r24, Y+15	; 0x0f
    27c0:	82 50       	subi	r24, 0x02	; 2
    27c2:	8f 87       	std	Y+15, r24	; 0x0f
	for(j=0;j<10;j++)
    27c4:	1e 86       	std	Y+14, r1	; 0x0e
    27c6:	1c c0       	rjmp	.+56     	; 0x2800 <HLCD_voidWriteNumber+0x286>
	{
		if(F_NUM[j]==0)
    27c8:	8e 85       	ldd	r24, Y+14	; 0x0e
    27ca:	28 2f       	mov	r18, r24
    27cc:	33 27       	eor	r19, r19
    27ce:	27 fd       	sbrc	r18, 7
    27d0:	30 95       	com	r19
    27d2:	ce 01       	movw	r24, r28
    27d4:	4a 96       	adiw	r24, 0x1a	; 26
    27d6:	fc 01       	movw	r30, r24
    27d8:	e2 0f       	add	r30, r18
    27da:	f3 1f       	adc	r31, r19
    27dc:	80 81       	ld	r24, Z
    27de:	88 23       	and	r24, r24
    27e0:	49 f5       	brne	.+82     	; 0x2834 <HLCD_voidWriteNumber+0x2ba>
		{
			F_NUM[j]='k';
    27e2:	8e 85       	ldd	r24, Y+14	; 0x0e
    27e4:	28 2f       	mov	r18, r24
    27e6:	33 27       	eor	r19, r19
    27e8:	27 fd       	sbrc	r18, 7
    27ea:	30 95       	com	r19
    27ec:	ce 01       	movw	r24, r28
    27ee:	4a 96       	adiw	r24, 0x1a	; 26
    27f0:	fc 01       	movw	r30, r24
    27f2:	e2 0f       	add	r30, r18
    27f4:	f3 1f       	adc	r31, r19
    27f6:	8b e6       	ldi	r24, 0x6B	; 107
    27f8:	80 83       	st	Z, r24
	{
		F_NUM[i++] = z % 10;
		z/=10;
	}
	i-=2;
	for(j=0;j<10;j++)
    27fa:	8e 85       	ldd	r24, Y+14	; 0x0e
    27fc:	8f 5f       	subi	r24, 0xFF	; 255
    27fe:	8e 87       	std	Y+14, r24	; 0x0e
    2800:	8e 85       	ldd	r24, Y+14	; 0x0e
    2802:	8a 30       	cpi	r24, 0x0A	; 10
    2804:	0c f3       	brlt	.-62     	; 0x27c8 <HLCD_voidWriteNumber+0x24e>
    2806:	16 c0       	rjmp	.+44     	; 0x2834 <HLCD_voidWriteNumber+0x2ba>
			break;
		}
	}
	while(F_NUM[i]!='k'&& k!=7)
	{
		HLCD_voidWriteChracter(F_NUM[i--]+48);
    2808:	8f 85       	ldd	r24, Y+15	; 0x0f
    280a:	28 2f       	mov	r18, r24
    280c:	33 27       	eor	r19, r19
    280e:	27 fd       	sbrc	r18, 7
    2810:	30 95       	com	r19
    2812:	ce 01       	movw	r24, r28
    2814:	4a 96       	adiw	r24, 0x1a	; 26
    2816:	fc 01       	movw	r30, r24
    2818:	e2 0f       	add	r30, r18
    281a:	f3 1f       	adc	r31, r19
    281c:	80 81       	ld	r24, Z
    281e:	98 2f       	mov	r25, r24
    2820:	90 5d       	subi	r25, 0xD0	; 208
    2822:	8f 85       	ldd	r24, Y+15	; 0x0f
    2824:	81 50       	subi	r24, 0x01	; 1
    2826:	8f 87       	std	Y+15, r24	; 0x0f
    2828:	89 2f       	mov	r24, r25
    282a:	0e 94 8b 10 	call	0x2116	; 0x2116 <HLCD_voidWriteChracter>
		k++;
    282e:	8d 81       	ldd	r24, Y+5	; 0x05
    2830:	8f 5f       	subi	r24, 0xFF	; 255
    2832:	8d 83       	std	Y+5, r24	; 0x05
		else
		{
			break;
		}
	}
	while(F_NUM[i]!='k'&& k!=7)
    2834:	8f 85       	ldd	r24, Y+15	; 0x0f
    2836:	28 2f       	mov	r18, r24
    2838:	33 27       	eor	r19, r19
    283a:	27 fd       	sbrc	r18, 7
    283c:	30 95       	com	r19
    283e:	ce 01       	movw	r24, r28
    2840:	4a 96       	adiw	r24, 0x1a	; 26
    2842:	fc 01       	movw	r30, r24
    2844:	e2 0f       	add	r30, r18
    2846:	f3 1f       	adc	r31, r19
    2848:	80 81       	ld	r24, Z
    284a:	8b 36       	cpi	r24, 0x6B	; 107
    284c:	19 f0       	breq	.+6      	; 0x2854 <HLCD_voidWriteNumber+0x2da>
    284e:	8d 81       	ldd	r24, Y+5	; 0x05
    2850:	87 30       	cpi	r24, 0x07	; 7
    2852:	d1 f6       	brne	.-76     	; 0x2808 <HLCD_voidWriteNumber+0x28e>
	{
		HLCD_voidWriteChracter(F_NUM[i--]+48);
		k++;
	}

}
    2854:	a7 96       	adiw	r28, 0x27	; 39
    2856:	0f b6       	in	r0, 0x3f	; 63
    2858:	f8 94       	cli
    285a:	de bf       	out	0x3e, r29	; 62
    285c:	0f be       	out	0x3f, r0	; 63
    285e:	cd bf       	out	0x3d, r28	; 61
    2860:	cf 91       	pop	r28
    2862:	df 91       	pop	r29
    2864:	1f 91       	pop	r17
    2866:	0f 91       	pop	r16
    2868:	ff 90       	pop	r15
    286a:	ef 90       	pop	r14
    286c:	08 95       	ret

0000286e <KPD_U8GetPressedKey>:
#include"../../MCAL/DIO/DIO_interface.h"
#include"KPD_config.h"
#include"KPD_Private.h"
#include"KPD_INT.h"

u8 KPD_U8GetPressedKey(){
    286e:	df 93       	push	r29
    2870:	cf 93       	push	r28
    2872:	cd b7       	in	r28, 0x3d	; 61
    2874:	de b7       	in	r29, 0x3e	; 62
    2876:	a3 97       	sbiw	r28, 0x23	; 35
    2878:	0f b6       	in	r0, 0x3f	; 63
    287a:	f8 94       	cli
    287c:	de bf       	out	0x3e, r29	; 62
    287e:	0f be       	out	0x3f, r0	; 63
    2880:	cd bf       	out	0x3d, r28	; 61
	u8 Local_u8ColIndex , Local_u8RowIndex , Local_u8PinState , Local_u8PressedKey=NO_PRESSED_KEY_VALUE;
    2882:	8f ef       	ldi	r24, 0xFF	; 255
    2884:	89 83       	std	Y+1, r24	; 0x01
	u8 KPD_u8Array[KPD_ROW_NUMBER][KPD_COLUMN_NUMBER] = KPD_BUTTONS_VALUES;
    2886:	ce 01       	movw	r24, r28
    2888:	05 96       	adiw	r24, 0x05	; 5
    288a:	9e 8b       	std	Y+22, r25	; 0x16
    288c:	8d 8b       	std	Y+21, r24	; 0x15
    288e:	ee ee       	ldi	r30, 0xEE	; 238
    2890:	f1 e0       	ldi	r31, 0x01	; 1
    2892:	f8 8f       	std	Y+24, r31	; 0x18
    2894:	ef 8b       	std	Y+23, r30	; 0x17
    2896:	f9 e0       	ldi	r31, 0x09	; 9
    2898:	f9 8f       	std	Y+25, r31	; 0x19
    289a:	ef 89       	ldd	r30, Y+23	; 0x17
    289c:	f8 8d       	ldd	r31, Y+24	; 0x18
    289e:	00 80       	ld	r0, Z
    28a0:	8f 89       	ldd	r24, Y+23	; 0x17
    28a2:	98 8d       	ldd	r25, Y+24	; 0x18
    28a4:	01 96       	adiw	r24, 0x01	; 1
    28a6:	98 8f       	std	Y+24, r25	; 0x18
    28a8:	8f 8b       	std	Y+23, r24	; 0x17
    28aa:	ed 89       	ldd	r30, Y+21	; 0x15
    28ac:	fe 89       	ldd	r31, Y+22	; 0x16
    28ae:	00 82       	st	Z, r0
    28b0:	8d 89       	ldd	r24, Y+21	; 0x15
    28b2:	9e 89       	ldd	r25, Y+22	; 0x16
    28b4:	01 96       	adiw	r24, 0x01	; 1
    28b6:	9e 8b       	std	Y+22, r25	; 0x16
    28b8:	8d 8b       	std	Y+21, r24	; 0x15
    28ba:	99 8d       	ldd	r25, Y+25	; 0x19
    28bc:	91 50       	subi	r25, 0x01	; 1
    28be:	99 8f       	std	Y+25, r25	; 0x19
    28c0:	e9 8d       	ldd	r30, Y+25	; 0x19
    28c2:	ee 23       	and	r30, r30
    28c4:	51 f7       	brne	.-44     	; 0x289a <KPD_U8GetPressedKey+0x2c>

	u8 KPD_u8ColumnArray[KPD_COLUMN_NUMBER]={KPD_COLUMN_PIN0,KPD_COLUMN_PIN1,KPD_COLUMN_PIN2};
    28c6:	ce 01       	movw	r24, r28
    28c8:	0e 96       	adiw	r24, 0x0e	; 14
    28ca:	9b 8f       	std	Y+27, r25	; 0x1b
    28cc:	8a 8f       	std	Y+26, r24	; 0x1a
    28ce:	eb ee       	ldi	r30, 0xEB	; 235
    28d0:	f1 e0       	ldi	r31, 0x01	; 1
    28d2:	fd 8f       	std	Y+29, r31	; 0x1d
    28d4:	ec 8f       	std	Y+28, r30	; 0x1c
    28d6:	f3 e0       	ldi	r31, 0x03	; 3
    28d8:	fe 8f       	std	Y+30, r31	; 0x1e
    28da:	ec 8d       	ldd	r30, Y+28	; 0x1c
    28dc:	fd 8d       	ldd	r31, Y+29	; 0x1d
    28de:	00 80       	ld	r0, Z
    28e0:	8c 8d       	ldd	r24, Y+28	; 0x1c
    28e2:	9d 8d       	ldd	r25, Y+29	; 0x1d
    28e4:	01 96       	adiw	r24, 0x01	; 1
    28e6:	9d 8f       	std	Y+29, r25	; 0x1d
    28e8:	8c 8f       	std	Y+28, r24	; 0x1c
    28ea:	ea 8d       	ldd	r30, Y+26	; 0x1a
    28ec:	fb 8d       	ldd	r31, Y+27	; 0x1b
    28ee:	00 82       	st	Z, r0
    28f0:	8a 8d       	ldd	r24, Y+26	; 0x1a
    28f2:	9b 8d       	ldd	r25, Y+27	; 0x1b
    28f4:	01 96       	adiw	r24, 0x01	; 1
    28f6:	9b 8f       	std	Y+27, r25	; 0x1b
    28f8:	8a 8f       	std	Y+26, r24	; 0x1a
    28fa:	9e 8d       	ldd	r25, Y+30	; 0x1e
    28fc:	91 50       	subi	r25, 0x01	; 1
    28fe:	9e 8f       	std	Y+30, r25	; 0x1e
    2900:	ee 8d       	ldd	r30, Y+30	; 0x1e
    2902:	ee 23       	and	r30, r30
    2904:	51 f7       	brne	.-44     	; 0x28da <KPD_U8GetPressedKey+0x6c>
	u8 KPD_u8RowArray[KPD_ROW_NUMBER]={KPD_ROW_PIN0,KPD_ROW_PIN1,KPD_ROW_PIN2};
    2906:	ce 01       	movw	r24, r28
    2908:	41 96       	adiw	r24, 0x11	; 17
    290a:	98 a3       	std	Y+32, r25	; 0x20
    290c:	8f 8f       	std	Y+31, r24	; 0x1f
    290e:	e8 ee       	ldi	r30, 0xE8	; 232
    2910:	f1 e0       	ldi	r31, 0x01	; 1
    2912:	fa a3       	std	Y+34, r31	; 0x22
    2914:	e9 a3       	std	Y+33, r30	; 0x21
    2916:	f3 e0       	ldi	r31, 0x03	; 3
    2918:	fb a3       	std	Y+35, r31	; 0x23
    291a:	e9 a1       	ldd	r30, Y+33	; 0x21
    291c:	fa a1       	ldd	r31, Y+34	; 0x22
    291e:	00 80       	ld	r0, Z
    2920:	89 a1       	ldd	r24, Y+33	; 0x21
    2922:	9a a1       	ldd	r25, Y+34	; 0x22
    2924:	01 96       	adiw	r24, 0x01	; 1
    2926:	9a a3       	std	Y+34, r25	; 0x22
    2928:	89 a3       	std	Y+33, r24	; 0x21
    292a:	ef 8d       	ldd	r30, Y+31	; 0x1f
    292c:	f8 a1       	ldd	r31, Y+32	; 0x20
    292e:	00 82       	st	Z, r0
    2930:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2932:	98 a1       	ldd	r25, Y+32	; 0x20
    2934:	01 96       	adiw	r24, 0x01	; 1
    2936:	98 a3       	std	Y+32, r25	; 0x20
    2938:	8f 8f       	std	Y+31, r24	; 0x1f
    293a:	9b a1       	ldd	r25, Y+35	; 0x23
    293c:	91 50       	subi	r25, 0x01	; 1
    293e:	9b a3       	std	Y+35, r25	; 0x23
    2940:	eb a1       	ldd	r30, Y+35	; 0x23
    2942:	ee 23       	and	r30, r30
    2944:	51 f7       	brne	.-44     	; 0x291a <KPD_U8GetPressedKey+0xac>


	for(Local_u8ColIndex=0 ; Local_u8ColIndex < KPD_COLUMN_NUMBER ; Local_u8ColIndex++){
    2946:	1c 82       	std	Y+4, r1	; 0x04
    2948:	60 c0       	rjmp	.+192    	; 0x2a0a <KPD_U8GetPressedKey+0x19c>

		// Activate the current column
		MDIO_voidSetPinValue(KPD_u8ColumnArray[Local_u8ColIndex],KPD_PORT,DIO_LOW);
    294a:	8c 81       	ldd	r24, Y+4	; 0x04
    294c:	28 2f       	mov	r18, r24
    294e:	30 e0       	ldi	r19, 0x00	; 0
    2950:	ce 01       	movw	r24, r28
    2952:	0e 96       	adiw	r24, 0x0e	; 14
    2954:	fc 01       	movw	r30, r24
    2956:	e2 0f       	add	r30, r18
    2958:	f3 1f       	adc	r31, r19
    295a:	80 81       	ld	r24, Z
    295c:	60 e0       	ldi	r22, 0x00	; 0
    295e:	40 e0       	ldi	r20, 0x00	; 0
    2960:	0e 94 95 09 	call	0x132a	; 0x132a <MDIO_voidSetPinValue>

		for(Local_u8RowIndex=0 ; Local_u8RowIndex < KPD_ROW_NUMBER ; Local_u8RowIndex++){
    2964:	1b 82       	std	Y+3, r1	; 0x03
    2966:	3d c0       	rjmp	.+122    	; 0x29e2 <KPD_U8GetPressedKey+0x174>

			// Read the current Row
			Local_u8PinState = MDIO_u8GetPinValue(KPD_u8RowArray[Local_u8RowIndex],KPD_PORT);
    2968:	8b 81       	ldd	r24, Y+3	; 0x03
    296a:	28 2f       	mov	r18, r24
    296c:	30 e0       	ldi	r19, 0x00	; 0
    296e:	ce 01       	movw	r24, r28
    2970:	41 96       	adiw	r24, 0x11	; 17
    2972:	fc 01       	movw	r30, r24
    2974:	e2 0f       	add	r30, r18
    2976:	f3 1f       	adc	r31, r19
    2978:	80 81       	ld	r24, Z
    297a:	60 e0       	ldi	r22, 0x00	; 0
    297c:	0e 94 22 0b 	call	0x1644	; 0x1644 <MDIO_u8GetPinValue>
    2980:	8a 83       	std	Y+2, r24	; 0x02

			if(Local_u8PinState == DIO_LOW){
    2982:	8a 81       	ldd	r24, Y+2	; 0x02
    2984:	88 23       	and	r24, r24
    2986:	51 f5       	brne	.+84     	; 0x29dc <KPD_U8GetPressedKey+0x16e>

				Local_u8PressedKey=KPD_u8Array[Local_u8RowIndex][Local_u8ColIndex];
    2988:	8b 81       	ldd	r24, Y+3	; 0x03
    298a:	28 2f       	mov	r18, r24
    298c:	30 e0       	ldi	r19, 0x00	; 0
    298e:	8c 81       	ldd	r24, Y+4	; 0x04
    2990:	48 2f       	mov	r20, r24
    2992:	50 e0       	ldi	r21, 0x00	; 0
    2994:	c9 01       	movw	r24, r18
    2996:	88 0f       	add	r24, r24
    2998:	99 1f       	adc	r25, r25
    299a:	82 0f       	add	r24, r18
    299c:	93 1f       	adc	r25, r19
    299e:	9e 01       	movw	r18, r28
    29a0:	2f 5f       	subi	r18, 0xFF	; 255
    29a2:	3f 4f       	sbci	r19, 0xFF	; 255
    29a4:	82 0f       	add	r24, r18
    29a6:	93 1f       	adc	r25, r19
    29a8:	84 0f       	add	r24, r20
    29aa:	95 1f       	adc	r25, r21
    29ac:	fc 01       	movw	r30, r24
    29ae:	34 96       	adiw	r30, 0x04	; 4
    29b0:	80 81       	ld	r24, Z
    29b2:	89 83       	std	Y+1, r24	; 0x01
    29b4:	0d c0       	rjmp	.+26     	; 0x29d0 <KPD_U8GetPressedKey+0x162>

				// wait with blocking until the key released   (polling with Blocking)
				while(Local_u8PinState == DIO_LOW){

					Local_u8PinState = MDIO_u8GetPinValue(KPD_u8RowArray[Local_u8RowIndex],KPD_PORT);
    29b6:	8b 81       	ldd	r24, Y+3	; 0x03
    29b8:	28 2f       	mov	r18, r24
    29ba:	30 e0       	ldi	r19, 0x00	; 0
    29bc:	ce 01       	movw	r24, r28
    29be:	41 96       	adiw	r24, 0x11	; 17
    29c0:	fc 01       	movw	r30, r24
    29c2:	e2 0f       	add	r30, r18
    29c4:	f3 1f       	adc	r31, r19
    29c6:	80 81       	ld	r24, Z
    29c8:	60 e0       	ldi	r22, 0x00	; 0
    29ca:	0e 94 22 0b 	call	0x1644	; 0x1644 <MDIO_u8GetPinValue>
    29ce:	8a 83       	std	Y+2, r24	; 0x02
			if(Local_u8PinState == DIO_LOW){

				Local_u8PressedKey=KPD_u8Array[Local_u8RowIndex][Local_u8ColIndex];

				// wait with blocking until the key released   (polling with Blocking)
				while(Local_u8PinState == DIO_LOW){
    29d0:	8a 81       	ldd	r24, Y+2	; 0x02
    29d2:	88 23       	and	r24, r24
    29d4:	81 f3       	breq	.-32     	; 0x29b6 <KPD_U8GetPressedKey+0x148>

					Local_u8PinState = MDIO_u8GetPinValue(KPD_u8RowArray[Local_u8RowIndex],KPD_PORT);
				}
				return Local_u8PressedKey;
    29d6:	f9 81       	ldd	r31, Y+1	; 0x01
    29d8:	fc 8b       	std	Y+20, r31	; 0x14
    29da:	1d c0       	rjmp	.+58     	; 0x2a16 <KPD_U8GetPressedKey+0x1a8>
	for(Local_u8ColIndex=0 ; Local_u8ColIndex < KPD_COLUMN_NUMBER ; Local_u8ColIndex++){

		// Activate the current column
		MDIO_voidSetPinValue(KPD_u8ColumnArray[Local_u8ColIndex],KPD_PORT,DIO_LOW);

		for(Local_u8RowIndex=0 ; Local_u8RowIndex < KPD_ROW_NUMBER ; Local_u8RowIndex++){
    29dc:	8b 81       	ldd	r24, Y+3	; 0x03
    29de:	8f 5f       	subi	r24, 0xFF	; 255
    29e0:	8b 83       	std	Y+3, r24	; 0x03
    29e2:	8b 81       	ldd	r24, Y+3	; 0x03
    29e4:	83 30       	cpi	r24, 0x03	; 3
    29e6:	08 f4       	brcc	.+2      	; 0x29ea <KPD_U8GetPressedKey+0x17c>
    29e8:	bf cf       	rjmp	.-130    	; 0x2968 <KPD_U8GetPressedKey+0xfa>
					Local_u8PinState = MDIO_u8GetPinValue(KPD_u8RowArray[Local_u8RowIndex],KPD_PORT);
				}
				return Local_u8PressedKey;
			}
		}
		MDIO_voidSetPinValue(KPD_u8ColumnArray[Local_u8ColIndex],KPD_PORT,DIO_HIGH);
    29ea:	8c 81       	ldd	r24, Y+4	; 0x04
    29ec:	28 2f       	mov	r18, r24
    29ee:	30 e0       	ldi	r19, 0x00	; 0
    29f0:	ce 01       	movw	r24, r28
    29f2:	0e 96       	adiw	r24, 0x0e	; 14
    29f4:	fc 01       	movw	r30, r24
    29f6:	e2 0f       	add	r30, r18
    29f8:	f3 1f       	adc	r31, r19
    29fa:	80 81       	ld	r24, Z
    29fc:	60 e0       	ldi	r22, 0x00	; 0
    29fe:	41 e0       	ldi	r20, 0x01	; 1
    2a00:	0e 94 95 09 	call	0x132a	; 0x132a <MDIO_voidSetPinValue>

	u8 KPD_u8ColumnArray[KPD_COLUMN_NUMBER]={KPD_COLUMN_PIN0,KPD_COLUMN_PIN1,KPD_COLUMN_PIN2};
	u8 KPD_u8RowArray[KPD_ROW_NUMBER]={KPD_ROW_PIN0,KPD_ROW_PIN1,KPD_ROW_PIN2};


	for(Local_u8ColIndex=0 ; Local_u8ColIndex < KPD_COLUMN_NUMBER ; Local_u8ColIndex++){
    2a04:	8c 81       	ldd	r24, Y+4	; 0x04
    2a06:	8f 5f       	subi	r24, 0xFF	; 255
    2a08:	8c 83       	std	Y+4, r24	; 0x04
    2a0a:	8c 81       	ldd	r24, Y+4	; 0x04
    2a0c:	83 30       	cpi	r24, 0x03	; 3
    2a0e:	08 f4       	brcc	.+2      	; 0x2a12 <KPD_U8GetPressedKey+0x1a4>
    2a10:	9c cf       	rjmp	.-200    	; 0x294a <KPD_U8GetPressedKey+0xdc>
				return Local_u8PressedKey;
			}
		}
		MDIO_voidSetPinValue(KPD_u8ColumnArray[Local_u8ColIndex],KPD_PORT,DIO_HIGH);
	}
	return Local_u8PressedKey;
    2a12:	89 81       	ldd	r24, Y+1	; 0x01
    2a14:	8c 8b       	std	Y+20, r24	; 0x14
    2a16:	8c 89       	ldd	r24, Y+20	; 0x14
}
    2a18:	a3 96       	adiw	r28, 0x23	; 35
    2a1a:	0f b6       	in	r0, 0x3f	; 63
    2a1c:	f8 94       	cli
    2a1e:	de bf       	out	0x3e, r29	; 62
    2a20:	0f be       	out	0x3f, r0	; 63
    2a22:	cd bf       	out	0x3d, r28	; 61
    2a24:	cf 91       	pop	r28
    2a26:	df 91       	pop	r29
    2a28:	08 95       	ret

00002a2a <CLCD_VoidInitial>:
#include"CLCD_config.h"
#include"CLCD_INT.h"
#include"util/delay.h"


void CLCD_VoidInitial(){
    2a2a:	df 93       	push	r29
    2a2c:	cf 93       	push	r28
    2a2e:	cd b7       	in	r28, 0x3d	; 61
    2a30:	de b7       	in	r29, 0x3e	; 62
    2a32:	e8 97       	sbiw	r28, 0x38	; 56
    2a34:	0f b6       	in	r0, 0x3f	; 63
    2a36:	f8 94       	cli
    2a38:	de bf       	out	0x3e, r29	; 62
    2a3a:	0f be       	out	0x3f, r0	; 63
    2a3c:	cd bf       	out	0x3d, r28	; 61
    2a3e:	80 e0       	ldi	r24, 0x00	; 0
    2a40:	90 e0       	ldi	r25, 0x00	; 0
    2a42:	ac e0       	ldi	r26, 0x0C	; 12
    2a44:	b2 e4       	ldi	r27, 0x42	; 66
    2a46:	8d ab       	std	Y+53, r24	; 0x35
    2a48:	9e ab       	std	Y+54, r25	; 0x36
    2a4a:	af ab       	std	Y+55, r26	; 0x37
    2a4c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a4e:	6d a9       	ldd	r22, Y+53	; 0x35
    2a50:	7e a9       	ldd	r23, Y+54	; 0x36
    2a52:	8f a9       	ldd	r24, Y+55	; 0x37
    2a54:	98 ad       	ldd	r25, Y+56	; 0x38
    2a56:	20 e0       	ldi	r18, 0x00	; 0
    2a58:	30 e0       	ldi	r19, 0x00	; 0
    2a5a:	4a ef       	ldi	r20, 0xFA	; 250
    2a5c:	54 e4       	ldi	r21, 0x44	; 68
    2a5e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a62:	dc 01       	movw	r26, r24
    2a64:	cb 01       	movw	r24, r22
    2a66:	89 ab       	std	Y+49, r24	; 0x31
    2a68:	9a ab       	std	Y+50, r25	; 0x32
    2a6a:	ab ab       	std	Y+51, r26	; 0x33
    2a6c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2a6e:	69 a9       	ldd	r22, Y+49	; 0x31
    2a70:	7a a9       	ldd	r23, Y+50	; 0x32
    2a72:	8b a9       	ldd	r24, Y+51	; 0x33
    2a74:	9c a9       	ldd	r25, Y+52	; 0x34
    2a76:	20 e0       	ldi	r18, 0x00	; 0
    2a78:	30 e0       	ldi	r19, 0x00	; 0
    2a7a:	40 e8       	ldi	r20, 0x80	; 128
    2a7c:	5f e3       	ldi	r21, 0x3F	; 63
    2a7e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2a82:	88 23       	and	r24, r24
    2a84:	2c f4       	brge	.+10     	; 0x2a90 <CLCD_VoidInitial+0x66>
		__ticks = 1;
    2a86:	81 e0       	ldi	r24, 0x01	; 1
    2a88:	90 e0       	ldi	r25, 0x00	; 0
    2a8a:	98 ab       	std	Y+48, r25	; 0x30
    2a8c:	8f a7       	std	Y+47, r24	; 0x2f
    2a8e:	3f c0       	rjmp	.+126    	; 0x2b0e <CLCD_VoidInitial+0xe4>
	else if (__tmp > 65535)
    2a90:	69 a9       	ldd	r22, Y+49	; 0x31
    2a92:	7a a9       	ldd	r23, Y+50	; 0x32
    2a94:	8b a9       	ldd	r24, Y+51	; 0x33
    2a96:	9c a9       	ldd	r25, Y+52	; 0x34
    2a98:	20 e0       	ldi	r18, 0x00	; 0
    2a9a:	3f ef       	ldi	r19, 0xFF	; 255
    2a9c:	4f e7       	ldi	r20, 0x7F	; 127
    2a9e:	57 e4       	ldi	r21, 0x47	; 71
    2aa0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2aa4:	18 16       	cp	r1, r24
    2aa6:	4c f5       	brge	.+82     	; 0x2afa <CLCD_VoidInitial+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2aa8:	6d a9       	ldd	r22, Y+53	; 0x35
    2aaa:	7e a9       	ldd	r23, Y+54	; 0x36
    2aac:	8f a9       	ldd	r24, Y+55	; 0x37
    2aae:	98 ad       	ldd	r25, Y+56	; 0x38
    2ab0:	20 e0       	ldi	r18, 0x00	; 0
    2ab2:	30 e0       	ldi	r19, 0x00	; 0
    2ab4:	40 e2       	ldi	r20, 0x20	; 32
    2ab6:	51 e4       	ldi	r21, 0x41	; 65
    2ab8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2abc:	dc 01       	movw	r26, r24
    2abe:	cb 01       	movw	r24, r22
    2ac0:	bc 01       	movw	r22, r24
    2ac2:	cd 01       	movw	r24, r26
    2ac4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ac8:	dc 01       	movw	r26, r24
    2aca:	cb 01       	movw	r24, r22
    2acc:	98 ab       	std	Y+48, r25	; 0x30
    2ace:	8f a7       	std	Y+47, r24	; 0x2f
    2ad0:	0f c0       	rjmp	.+30     	; 0x2af0 <CLCD_VoidInitial+0xc6>
    2ad2:	88 ec       	ldi	r24, 0xC8	; 200
    2ad4:	90 e0       	ldi	r25, 0x00	; 0
    2ad6:	9e a7       	std	Y+46, r25	; 0x2e
    2ad8:	8d a7       	std	Y+45, r24	; 0x2d
    2ada:	8d a5       	ldd	r24, Y+45	; 0x2d
    2adc:	9e a5       	ldd	r25, Y+46	; 0x2e
    2ade:	01 97       	sbiw	r24, 0x01	; 1
    2ae0:	f1 f7       	brne	.-4      	; 0x2ade <CLCD_VoidInitial+0xb4>
    2ae2:	9e a7       	std	Y+46, r25	; 0x2e
    2ae4:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ae6:	8f a5       	ldd	r24, Y+47	; 0x2f
    2ae8:	98 a9       	ldd	r25, Y+48	; 0x30
    2aea:	01 97       	sbiw	r24, 0x01	; 1
    2aec:	98 ab       	std	Y+48, r25	; 0x30
    2aee:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2af0:	8f a5       	ldd	r24, Y+47	; 0x2f
    2af2:	98 a9       	ldd	r25, Y+48	; 0x30
    2af4:	00 97       	sbiw	r24, 0x00	; 0
    2af6:	69 f7       	brne	.-38     	; 0x2ad2 <CLCD_VoidInitial+0xa8>
    2af8:	14 c0       	rjmp	.+40     	; 0x2b22 <CLCD_VoidInitial+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2afa:	69 a9       	ldd	r22, Y+49	; 0x31
    2afc:	7a a9       	ldd	r23, Y+50	; 0x32
    2afe:	8b a9       	ldd	r24, Y+51	; 0x33
    2b00:	9c a9       	ldd	r25, Y+52	; 0x34
    2b02:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b06:	dc 01       	movw	r26, r24
    2b08:	cb 01       	movw	r24, r22
    2b0a:	98 ab       	std	Y+48, r25	; 0x30
    2b0c:	8f a7       	std	Y+47, r24	; 0x2f
    2b0e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2b10:	98 a9       	ldd	r25, Y+48	; 0x30
    2b12:	9c a7       	std	Y+44, r25	; 0x2c
    2b14:	8b a7       	std	Y+43, r24	; 0x2b
    2b16:	8b a5       	ldd	r24, Y+43	; 0x2b
    2b18:	9c a5       	ldd	r25, Y+44	; 0x2c
    2b1a:	01 97       	sbiw	r24, 0x01	; 1
    2b1c:	f1 f7       	brne	.-4      	; 0x2b1a <CLCD_VoidInitial+0xf0>
    2b1e:	9c a7       	std	Y+44, r25	; 0x2c
    2b20:	8b a7       	std	Y+43, r24	; 0x2b

#if CLCD_MODE == CLCD_MODE_8_BIT
	_delay_ms(35); // Wait for more than 30ms
	CLCD_VoidSendCmd(0b00111000);//8 bit , N = 1 for *2 lines* ,F = 0 for *5x7*
    2b22:	88 e3       	ldi	r24, 0x38	; 56
    2b24:	0e 94 81 17 	call	0x2f02	; 0x2f02 <CLCD_VoidSendCmd>
    2b28:	80 e0       	ldi	r24, 0x00	; 0
    2b2a:	90 e0       	ldi	r25, 0x00	; 0
    2b2c:	a0 e8       	ldi	r26, 0x80	; 128
    2b2e:	bf e3       	ldi	r27, 0x3F	; 63
    2b30:	8f a3       	std	Y+39, r24	; 0x27
    2b32:	98 a7       	std	Y+40, r25	; 0x28
    2b34:	a9 a7       	std	Y+41, r26	; 0x29
    2b36:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b38:	6f a1       	ldd	r22, Y+39	; 0x27
    2b3a:	78 a5       	ldd	r23, Y+40	; 0x28
    2b3c:	89 a5       	ldd	r24, Y+41	; 0x29
    2b3e:	9a a5       	ldd	r25, Y+42	; 0x2a
    2b40:	20 e0       	ldi	r18, 0x00	; 0
    2b42:	30 e0       	ldi	r19, 0x00	; 0
    2b44:	4a ef       	ldi	r20, 0xFA	; 250
    2b46:	54 e4       	ldi	r21, 0x44	; 68
    2b48:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b4c:	dc 01       	movw	r26, r24
    2b4e:	cb 01       	movw	r24, r22
    2b50:	8b a3       	std	Y+35, r24	; 0x23
    2b52:	9c a3       	std	Y+36, r25	; 0x24
    2b54:	ad a3       	std	Y+37, r26	; 0x25
    2b56:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2b58:	6b a1       	ldd	r22, Y+35	; 0x23
    2b5a:	7c a1       	ldd	r23, Y+36	; 0x24
    2b5c:	8d a1       	ldd	r24, Y+37	; 0x25
    2b5e:	9e a1       	ldd	r25, Y+38	; 0x26
    2b60:	20 e0       	ldi	r18, 0x00	; 0
    2b62:	30 e0       	ldi	r19, 0x00	; 0
    2b64:	40 e8       	ldi	r20, 0x80	; 128
    2b66:	5f e3       	ldi	r21, 0x3F	; 63
    2b68:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2b6c:	88 23       	and	r24, r24
    2b6e:	2c f4       	brge	.+10     	; 0x2b7a <CLCD_VoidInitial+0x150>
		__ticks = 1;
    2b70:	81 e0       	ldi	r24, 0x01	; 1
    2b72:	90 e0       	ldi	r25, 0x00	; 0
    2b74:	9a a3       	std	Y+34, r25	; 0x22
    2b76:	89 a3       	std	Y+33, r24	; 0x21
    2b78:	3f c0       	rjmp	.+126    	; 0x2bf8 <CLCD_VoidInitial+0x1ce>
	else if (__tmp > 65535)
    2b7a:	6b a1       	ldd	r22, Y+35	; 0x23
    2b7c:	7c a1       	ldd	r23, Y+36	; 0x24
    2b7e:	8d a1       	ldd	r24, Y+37	; 0x25
    2b80:	9e a1       	ldd	r25, Y+38	; 0x26
    2b82:	20 e0       	ldi	r18, 0x00	; 0
    2b84:	3f ef       	ldi	r19, 0xFF	; 255
    2b86:	4f e7       	ldi	r20, 0x7F	; 127
    2b88:	57 e4       	ldi	r21, 0x47	; 71
    2b8a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2b8e:	18 16       	cp	r1, r24
    2b90:	4c f5       	brge	.+82     	; 0x2be4 <CLCD_VoidInitial+0x1ba>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b92:	6f a1       	ldd	r22, Y+39	; 0x27
    2b94:	78 a5       	ldd	r23, Y+40	; 0x28
    2b96:	89 a5       	ldd	r24, Y+41	; 0x29
    2b98:	9a a5       	ldd	r25, Y+42	; 0x2a
    2b9a:	20 e0       	ldi	r18, 0x00	; 0
    2b9c:	30 e0       	ldi	r19, 0x00	; 0
    2b9e:	40 e2       	ldi	r20, 0x20	; 32
    2ba0:	51 e4       	ldi	r21, 0x41	; 65
    2ba2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ba6:	dc 01       	movw	r26, r24
    2ba8:	cb 01       	movw	r24, r22
    2baa:	bc 01       	movw	r22, r24
    2bac:	cd 01       	movw	r24, r26
    2bae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bb2:	dc 01       	movw	r26, r24
    2bb4:	cb 01       	movw	r24, r22
    2bb6:	9a a3       	std	Y+34, r25	; 0x22
    2bb8:	89 a3       	std	Y+33, r24	; 0x21
    2bba:	0f c0       	rjmp	.+30     	; 0x2bda <CLCD_VoidInitial+0x1b0>
    2bbc:	88 ec       	ldi	r24, 0xC8	; 200
    2bbe:	90 e0       	ldi	r25, 0x00	; 0
    2bc0:	98 a3       	std	Y+32, r25	; 0x20
    2bc2:	8f 8f       	std	Y+31, r24	; 0x1f
    2bc4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2bc6:	98 a1       	ldd	r25, Y+32	; 0x20
    2bc8:	01 97       	sbiw	r24, 0x01	; 1
    2bca:	f1 f7       	brne	.-4      	; 0x2bc8 <CLCD_VoidInitial+0x19e>
    2bcc:	98 a3       	std	Y+32, r25	; 0x20
    2bce:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2bd0:	89 a1       	ldd	r24, Y+33	; 0x21
    2bd2:	9a a1       	ldd	r25, Y+34	; 0x22
    2bd4:	01 97       	sbiw	r24, 0x01	; 1
    2bd6:	9a a3       	std	Y+34, r25	; 0x22
    2bd8:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2bda:	89 a1       	ldd	r24, Y+33	; 0x21
    2bdc:	9a a1       	ldd	r25, Y+34	; 0x22
    2bde:	00 97       	sbiw	r24, 0x00	; 0
    2be0:	69 f7       	brne	.-38     	; 0x2bbc <CLCD_VoidInitial+0x192>
    2be2:	14 c0       	rjmp	.+40     	; 0x2c0c <CLCD_VoidInitial+0x1e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2be4:	6b a1       	ldd	r22, Y+35	; 0x23
    2be6:	7c a1       	ldd	r23, Y+36	; 0x24
    2be8:	8d a1       	ldd	r24, Y+37	; 0x25
    2bea:	9e a1       	ldd	r25, Y+38	; 0x26
    2bec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bf0:	dc 01       	movw	r26, r24
    2bf2:	cb 01       	movw	r24, r22
    2bf4:	9a a3       	std	Y+34, r25	; 0x22
    2bf6:	89 a3       	std	Y+33, r24	; 0x21
    2bf8:	89 a1       	ldd	r24, Y+33	; 0x21
    2bfa:	9a a1       	ldd	r25, Y+34	; 0x22
    2bfc:	9e 8f       	std	Y+30, r25	; 0x1e
    2bfe:	8d 8f       	std	Y+29, r24	; 0x1d
    2c00:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2c02:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2c04:	01 97       	sbiw	r24, 0x01	; 1
    2c06:	f1 f7       	brne	.-4      	; 0x2c04 <CLCD_VoidInitial+0x1da>
    2c08:	9e 8f       	std	Y+30, r25	; 0x1e
    2c0a:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	CLCD_VoidSendCmd(0b00001100);//D= 1 for *display on* ,C=0 for *cursor off* ,B=0 for *blink off*
    2c0c:	8c e0       	ldi	r24, 0x0C	; 12
    2c0e:	0e 94 81 17 	call	0x2f02	; 0x2f02 <CLCD_VoidSendCmd>
    2c12:	80 e0       	ldi	r24, 0x00	; 0
    2c14:	90 e0       	ldi	r25, 0x00	; 0
    2c16:	a0 e8       	ldi	r26, 0x80	; 128
    2c18:	bf e3       	ldi	r27, 0x3F	; 63
    2c1a:	89 8f       	std	Y+25, r24	; 0x19
    2c1c:	9a 8f       	std	Y+26, r25	; 0x1a
    2c1e:	ab 8f       	std	Y+27, r26	; 0x1b
    2c20:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c22:	69 8d       	ldd	r22, Y+25	; 0x19
    2c24:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2c26:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2c28:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2c2a:	20 e0       	ldi	r18, 0x00	; 0
    2c2c:	30 e0       	ldi	r19, 0x00	; 0
    2c2e:	4a ef       	ldi	r20, 0xFA	; 250
    2c30:	54 e4       	ldi	r21, 0x44	; 68
    2c32:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c36:	dc 01       	movw	r26, r24
    2c38:	cb 01       	movw	r24, r22
    2c3a:	8d 8b       	std	Y+21, r24	; 0x15
    2c3c:	9e 8b       	std	Y+22, r25	; 0x16
    2c3e:	af 8b       	std	Y+23, r26	; 0x17
    2c40:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2c42:	6d 89       	ldd	r22, Y+21	; 0x15
    2c44:	7e 89       	ldd	r23, Y+22	; 0x16
    2c46:	8f 89       	ldd	r24, Y+23	; 0x17
    2c48:	98 8d       	ldd	r25, Y+24	; 0x18
    2c4a:	20 e0       	ldi	r18, 0x00	; 0
    2c4c:	30 e0       	ldi	r19, 0x00	; 0
    2c4e:	40 e8       	ldi	r20, 0x80	; 128
    2c50:	5f e3       	ldi	r21, 0x3F	; 63
    2c52:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2c56:	88 23       	and	r24, r24
    2c58:	2c f4       	brge	.+10     	; 0x2c64 <CLCD_VoidInitial+0x23a>
		__ticks = 1;
    2c5a:	81 e0       	ldi	r24, 0x01	; 1
    2c5c:	90 e0       	ldi	r25, 0x00	; 0
    2c5e:	9c 8b       	std	Y+20, r25	; 0x14
    2c60:	8b 8b       	std	Y+19, r24	; 0x13
    2c62:	3f c0       	rjmp	.+126    	; 0x2ce2 <CLCD_VoidInitial+0x2b8>
	else if (__tmp > 65535)
    2c64:	6d 89       	ldd	r22, Y+21	; 0x15
    2c66:	7e 89       	ldd	r23, Y+22	; 0x16
    2c68:	8f 89       	ldd	r24, Y+23	; 0x17
    2c6a:	98 8d       	ldd	r25, Y+24	; 0x18
    2c6c:	20 e0       	ldi	r18, 0x00	; 0
    2c6e:	3f ef       	ldi	r19, 0xFF	; 255
    2c70:	4f e7       	ldi	r20, 0x7F	; 127
    2c72:	57 e4       	ldi	r21, 0x47	; 71
    2c74:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2c78:	18 16       	cp	r1, r24
    2c7a:	4c f5       	brge	.+82     	; 0x2cce <CLCD_VoidInitial+0x2a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c7c:	69 8d       	ldd	r22, Y+25	; 0x19
    2c7e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2c80:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2c82:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2c84:	20 e0       	ldi	r18, 0x00	; 0
    2c86:	30 e0       	ldi	r19, 0x00	; 0
    2c88:	40 e2       	ldi	r20, 0x20	; 32
    2c8a:	51 e4       	ldi	r21, 0x41	; 65
    2c8c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c90:	dc 01       	movw	r26, r24
    2c92:	cb 01       	movw	r24, r22
    2c94:	bc 01       	movw	r22, r24
    2c96:	cd 01       	movw	r24, r26
    2c98:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c9c:	dc 01       	movw	r26, r24
    2c9e:	cb 01       	movw	r24, r22
    2ca0:	9c 8b       	std	Y+20, r25	; 0x14
    2ca2:	8b 8b       	std	Y+19, r24	; 0x13
    2ca4:	0f c0       	rjmp	.+30     	; 0x2cc4 <CLCD_VoidInitial+0x29a>
    2ca6:	88 ec       	ldi	r24, 0xC8	; 200
    2ca8:	90 e0       	ldi	r25, 0x00	; 0
    2caa:	9a 8b       	std	Y+18, r25	; 0x12
    2cac:	89 8b       	std	Y+17, r24	; 0x11
    2cae:	89 89       	ldd	r24, Y+17	; 0x11
    2cb0:	9a 89       	ldd	r25, Y+18	; 0x12
    2cb2:	01 97       	sbiw	r24, 0x01	; 1
    2cb4:	f1 f7       	brne	.-4      	; 0x2cb2 <CLCD_VoidInitial+0x288>
    2cb6:	9a 8b       	std	Y+18, r25	; 0x12
    2cb8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2cba:	8b 89       	ldd	r24, Y+19	; 0x13
    2cbc:	9c 89       	ldd	r25, Y+20	; 0x14
    2cbe:	01 97       	sbiw	r24, 0x01	; 1
    2cc0:	9c 8b       	std	Y+20, r25	; 0x14
    2cc2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2cc4:	8b 89       	ldd	r24, Y+19	; 0x13
    2cc6:	9c 89       	ldd	r25, Y+20	; 0x14
    2cc8:	00 97       	sbiw	r24, 0x00	; 0
    2cca:	69 f7       	brne	.-38     	; 0x2ca6 <CLCD_VoidInitial+0x27c>
    2ccc:	14 c0       	rjmp	.+40     	; 0x2cf6 <CLCD_VoidInitial+0x2cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2cce:	6d 89       	ldd	r22, Y+21	; 0x15
    2cd0:	7e 89       	ldd	r23, Y+22	; 0x16
    2cd2:	8f 89       	ldd	r24, Y+23	; 0x17
    2cd4:	98 8d       	ldd	r25, Y+24	; 0x18
    2cd6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cda:	dc 01       	movw	r26, r24
    2cdc:	cb 01       	movw	r24, r22
    2cde:	9c 8b       	std	Y+20, r25	; 0x14
    2ce0:	8b 8b       	std	Y+19, r24	; 0x13
    2ce2:	8b 89       	ldd	r24, Y+19	; 0x13
    2ce4:	9c 89       	ldd	r25, Y+20	; 0x14
    2ce6:	98 8b       	std	Y+16, r25	; 0x10
    2ce8:	8f 87       	std	Y+15, r24	; 0x0f
    2cea:	8f 85       	ldd	r24, Y+15	; 0x0f
    2cec:	98 89       	ldd	r25, Y+16	; 0x10
    2cee:	01 97       	sbiw	r24, 0x01	; 1
    2cf0:	f1 f7       	brne	.-4      	; 0x2cee <CLCD_VoidInitial+0x2c4>
    2cf2:	98 8b       	std	Y+16, r25	; 0x10
    2cf4:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	CLCD_VoidSendCmd(0b00000001);//clear
    2cf6:	81 e0       	ldi	r24, 0x01	; 1
    2cf8:	0e 94 81 17 	call	0x2f02	; 0x2f02 <CLCD_VoidSendCmd>
    2cfc:	80 e0       	ldi	r24, 0x00	; 0
    2cfe:	90 e0       	ldi	r25, 0x00	; 0
    2d00:	a0 e0       	ldi	r26, 0x00	; 0
    2d02:	b0 e4       	ldi	r27, 0x40	; 64
    2d04:	8b 87       	std	Y+11, r24	; 0x0b
    2d06:	9c 87       	std	Y+12, r25	; 0x0c
    2d08:	ad 87       	std	Y+13, r26	; 0x0d
    2d0a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d0c:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d0e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d10:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d12:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d14:	20 e0       	ldi	r18, 0x00	; 0
    2d16:	30 e0       	ldi	r19, 0x00	; 0
    2d18:	4a ef       	ldi	r20, 0xFA	; 250
    2d1a:	54 e4       	ldi	r21, 0x44	; 68
    2d1c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d20:	dc 01       	movw	r26, r24
    2d22:	cb 01       	movw	r24, r22
    2d24:	8f 83       	std	Y+7, r24	; 0x07
    2d26:	98 87       	std	Y+8, r25	; 0x08
    2d28:	a9 87       	std	Y+9, r26	; 0x09
    2d2a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2d2c:	6f 81       	ldd	r22, Y+7	; 0x07
    2d2e:	78 85       	ldd	r23, Y+8	; 0x08
    2d30:	89 85       	ldd	r24, Y+9	; 0x09
    2d32:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d34:	20 e0       	ldi	r18, 0x00	; 0
    2d36:	30 e0       	ldi	r19, 0x00	; 0
    2d38:	40 e8       	ldi	r20, 0x80	; 128
    2d3a:	5f e3       	ldi	r21, 0x3F	; 63
    2d3c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2d40:	88 23       	and	r24, r24
    2d42:	2c f4       	brge	.+10     	; 0x2d4e <CLCD_VoidInitial+0x324>
		__ticks = 1;
    2d44:	81 e0       	ldi	r24, 0x01	; 1
    2d46:	90 e0       	ldi	r25, 0x00	; 0
    2d48:	9e 83       	std	Y+6, r25	; 0x06
    2d4a:	8d 83       	std	Y+5, r24	; 0x05
    2d4c:	3f c0       	rjmp	.+126    	; 0x2dcc <CLCD_VoidInitial+0x3a2>
	else if (__tmp > 65535)
    2d4e:	6f 81       	ldd	r22, Y+7	; 0x07
    2d50:	78 85       	ldd	r23, Y+8	; 0x08
    2d52:	89 85       	ldd	r24, Y+9	; 0x09
    2d54:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d56:	20 e0       	ldi	r18, 0x00	; 0
    2d58:	3f ef       	ldi	r19, 0xFF	; 255
    2d5a:	4f e7       	ldi	r20, 0x7F	; 127
    2d5c:	57 e4       	ldi	r21, 0x47	; 71
    2d5e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2d62:	18 16       	cp	r1, r24
    2d64:	4c f5       	brge	.+82     	; 0x2db8 <CLCD_VoidInitial+0x38e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d66:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d68:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d6a:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d6c:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d6e:	20 e0       	ldi	r18, 0x00	; 0
    2d70:	30 e0       	ldi	r19, 0x00	; 0
    2d72:	40 e2       	ldi	r20, 0x20	; 32
    2d74:	51 e4       	ldi	r21, 0x41	; 65
    2d76:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d7a:	dc 01       	movw	r26, r24
    2d7c:	cb 01       	movw	r24, r22
    2d7e:	bc 01       	movw	r22, r24
    2d80:	cd 01       	movw	r24, r26
    2d82:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d86:	dc 01       	movw	r26, r24
    2d88:	cb 01       	movw	r24, r22
    2d8a:	9e 83       	std	Y+6, r25	; 0x06
    2d8c:	8d 83       	std	Y+5, r24	; 0x05
    2d8e:	0f c0       	rjmp	.+30     	; 0x2dae <CLCD_VoidInitial+0x384>
    2d90:	88 ec       	ldi	r24, 0xC8	; 200
    2d92:	90 e0       	ldi	r25, 0x00	; 0
    2d94:	9c 83       	std	Y+4, r25	; 0x04
    2d96:	8b 83       	std	Y+3, r24	; 0x03
    2d98:	8b 81       	ldd	r24, Y+3	; 0x03
    2d9a:	9c 81       	ldd	r25, Y+4	; 0x04
    2d9c:	01 97       	sbiw	r24, 0x01	; 1
    2d9e:	f1 f7       	brne	.-4      	; 0x2d9c <CLCD_VoidInitial+0x372>
    2da0:	9c 83       	std	Y+4, r25	; 0x04
    2da2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2da4:	8d 81       	ldd	r24, Y+5	; 0x05
    2da6:	9e 81       	ldd	r25, Y+6	; 0x06
    2da8:	01 97       	sbiw	r24, 0x01	; 1
    2daa:	9e 83       	std	Y+6, r25	; 0x06
    2dac:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2dae:	8d 81       	ldd	r24, Y+5	; 0x05
    2db0:	9e 81       	ldd	r25, Y+6	; 0x06
    2db2:	00 97       	sbiw	r24, 0x00	; 0
    2db4:	69 f7       	brne	.-38     	; 0x2d90 <CLCD_VoidInitial+0x366>
    2db6:	14 c0       	rjmp	.+40     	; 0x2de0 <CLCD_VoidInitial+0x3b6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2db8:	6f 81       	ldd	r22, Y+7	; 0x07
    2dba:	78 85       	ldd	r23, Y+8	; 0x08
    2dbc:	89 85       	ldd	r24, Y+9	; 0x09
    2dbe:	9a 85       	ldd	r25, Y+10	; 0x0a
    2dc0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2dc4:	dc 01       	movw	r26, r24
    2dc6:	cb 01       	movw	r24, r22
    2dc8:	9e 83       	std	Y+6, r25	; 0x06
    2dca:	8d 83       	std	Y+5, r24	; 0x05
    2dcc:	8d 81       	ldd	r24, Y+5	; 0x05
    2dce:	9e 81       	ldd	r25, Y+6	; 0x06
    2dd0:	9a 83       	std	Y+2, r25	; 0x02
    2dd2:	89 83       	std	Y+1, r24	; 0x01
    2dd4:	89 81       	ldd	r24, Y+1	; 0x01
    2dd6:	9a 81       	ldd	r25, Y+2	; 0x02
    2dd8:	01 97       	sbiw	r24, 0x01	; 1
    2dda:	f1 f7       	brne	.-4      	; 0x2dd8 <CLCD_VoidInitial+0x3ae>
    2ddc:	9a 83       	std	Y+2, r25	; 0x02
    2dde:	89 83       	std	Y+1, r24	; 0x01
	//CLCD_VoidSendCmd(0x0c);
	_delay_ms(20);


#endif
}
    2de0:	e8 96       	adiw	r28, 0x38	; 56
    2de2:	0f b6       	in	r0, 0x3f	; 63
    2de4:	f8 94       	cli
    2de6:	de bf       	out	0x3e, r29	; 62
    2de8:	0f be       	out	0x3f, r0	; 63
    2dea:	cd bf       	out	0x3d, r28	; 61
    2dec:	cf 91       	pop	r28
    2dee:	df 91       	pop	r29
    2df0:	08 95       	ret

00002df2 <CLCD_Clear>:
void CLCD_Clear(){
    2df2:	df 93       	push	r29
    2df4:	cf 93       	push	r28
    2df6:	cd b7       	in	r28, 0x3d	; 61
    2df8:	de b7       	in	r29, 0x3e	; 62
    2dfa:	2e 97       	sbiw	r28, 0x0e	; 14
    2dfc:	0f b6       	in	r0, 0x3f	; 63
    2dfe:	f8 94       	cli
    2e00:	de bf       	out	0x3e, r29	; 62
    2e02:	0f be       	out	0x3f, r0	; 63
    2e04:	cd bf       	out	0x3d, r28	; 61
	CLCD_VoidSendCmd(0b00000001);//clear
    2e06:	81 e0       	ldi	r24, 0x01	; 1
    2e08:	0e 94 81 17 	call	0x2f02	; 0x2f02 <CLCD_VoidSendCmd>
    2e0c:	80 e0       	ldi	r24, 0x00	; 0
    2e0e:	90 e0       	ldi	r25, 0x00	; 0
    2e10:	a0 e0       	ldi	r26, 0x00	; 0
    2e12:	b0 e4       	ldi	r27, 0x40	; 64
    2e14:	8b 87       	std	Y+11, r24	; 0x0b
    2e16:	9c 87       	std	Y+12, r25	; 0x0c
    2e18:	ad 87       	std	Y+13, r26	; 0x0d
    2e1a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e1c:	6b 85       	ldd	r22, Y+11	; 0x0b
    2e1e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2e20:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e22:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e24:	20 e0       	ldi	r18, 0x00	; 0
    2e26:	30 e0       	ldi	r19, 0x00	; 0
    2e28:	4a ef       	ldi	r20, 0xFA	; 250
    2e2a:	54 e4       	ldi	r21, 0x44	; 68
    2e2c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e30:	dc 01       	movw	r26, r24
    2e32:	cb 01       	movw	r24, r22
    2e34:	8f 83       	std	Y+7, r24	; 0x07
    2e36:	98 87       	std	Y+8, r25	; 0x08
    2e38:	a9 87       	std	Y+9, r26	; 0x09
    2e3a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2e3c:	6f 81       	ldd	r22, Y+7	; 0x07
    2e3e:	78 85       	ldd	r23, Y+8	; 0x08
    2e40:	89 85       	ldd	r24, Y+9	; 0x09
    2e42:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e44:	20 e0       	ldi	r18, 0x00	; 0
    2e46:	30 e0       	ldi	r19, 0x00	; 0
    2e48:	40 e8       	ldi	r20, 0x80	; 128
    2e4a:	5f e3       	ldi	r21, 0x3F	; 63
    2e4c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2e50:	88 23       	and	r24, r24
    2e52:	2c f4       	brge	.+10     	; 0x2e5e <CLCD_Clear+0x6c>
		__ticks = 1;
    2e54:	81 e0       	ldi	r24, 0x01	; 1
    2e56:	90 e0       	ldi	r25, 0x00	; 0
    2e58:	9e 83       	std	Y+6, r25	; 0x06
    2e5a:	8d 83       	std	Y+5, r24	; 0x05
    2e5c:	3f c0       	rjmp	.+126    	; 0x2edc <CLCD_Clear+0xea>
	else if (__tmp > 65535)
    2e5e:	6f 81       	ldd	r22, Y+7	; 0x07
    2e60:	78 85       	ldd	r23, Y+8	; 0x08
    2e62:	89 85       	ldd	r24, Y+9	; 0x09
    2e64:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e66:	20 e0       	ldi	r18, 0x00	; 0
    2e68:	3f ef       	ldi	r19, 0xFF	; 255
    2e6a:	4f e7       	ldi	r20, 0x7F	; 127
    2e6c:	57 e4       	ldi	r21, 0x47	; 71
    2e6e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2e72:	18 16       	cp	r1, r24
    2e74:	4c f5       	brge	.+82     	; 0x2ec8 <CLCD_Clear+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e76:	6b 85       	ldd	r22, Y+11	; 0x0b
    2e78:	7c 85       	ldd	r23, Y+12	; 0x0c
    2e7a:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e7c:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e7e:	20 e0       	ldi	r18, 0x00	; 0
    2e80:	30 e0       	ldi	r19, 0x00	; 0
    2e82:	40 e2       	ldi	r20, 0x20	; 32
    2e84:	51 e4       	ldi	r21, 0x41	; 65
    2e86:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e8a:	dc 01       	movw	r26, r24
    2e8c:	cb 01       	movw	r24, r22
    2e8e:	bc 01       	movw	r22, r24
    2e90:	cd 01       	movw	r24, r26
    2e92:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e96:	dc 01       	movw	r26, r24
    2e98:	cb 01       	movw	r24, r22
    2e9a:	9e 83       	std	Y+6, r25	; 0x06
    2e9c:	8d 83       	std	Y+5, r24	; 0x05
    2e9e:	0f c0       	rjmp	.+30     	; 0x2ebe <CLCD_Clear+0xcc>
    2ea0:	88 ec       	ldi	r24, 0xC8	; 200
    2ea2:	90 e0       	ldi	r25, 0x00	; 0
    2ea4:	9c 83       	std	Y+4, r25	; 0x04
    2ea6:	8b 83       	std	Y+3, r24	; 0x03
    2ea8:	8b 81       	ldd	r24, Y+3	; 0x03
    2eaa:	9c 81       	ldd	r25, Y+4	; 0x04
    2eac:	01 97       	sbiw	r24, 0x01	; 1
    2eae:	f1 f7       	brne	.-4      	; 0x2eac <CLCD_Clear+0xba>
    2eb0:	9c 83       	std	Y+4, r25	; 0x04
    2eb2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2eb4:	8d 81       	ldd	r24, Y+5	; 0x05
    2eb6:	9e 81       	ldd	r25, Y+6	; 0x06
    2eb8:	01 97       	sbiw	r24, 0x01	; 1
    2eba:	9e 83       	std	Y+6, r25	; 0x06
    2ebc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ebe:	8d 81       	ldd	r24, Y+5	; 0x05
    2ec0:	9e 81       	ldd	r25, Y+6	; 0x06
    2ec2:	00 97       	sbiw	r24, 0x00	; 0
    2ec4:	69 f7       	brne	.-38     	; 0x2ea0 <CLCD_Clear+0xae>
    2ec6:	14 c0       	rjmp	.+40     	; 0x2ef0 <CLCD_Clear+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ec8:	6f 81       	ldd	r22, Y+7	; 0x07
    2eca:	78 85       	ldd	r23, Y+8	; 0x08
    2ecc:	89 85       	ldd	r24, Y+9	; 0x09
    2ece:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ed0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ed4:	dc 01       	movw	r26, r24
    2ed6:	cb 01       	movw	r24, r22
    2ed8:	9e 83       	std	Y+6, r25	; 0x06
    2eda:	8d 83       	std	Y+5, r24	; 0x05
    2edc:	8d 81       	ldd	r24, Y+5	; 0x05
    2ede:	9e 81       	ldd	r25, Y+6	; 0x06
    2ee0:	9a 83       	std	Y+2, r25	; 0x02
    2ee2:	89 83       	std	Y+1, r24	; 0x01
    2ee4:	89 81       	ldd	r24, Y+1	; 0x01
    2ee6:	9a 81       	ldd	r25, Y+2	; 0x02
    2ee8:	01 97       	sbiw	r24, 0x01	; 1
    2eea:	f1 f7       	brne	.-4      	; 0x2ee8 <CLCD_Clear+0xf6>
    2eec:	9a 83       	std	Y+2, r25	; 0x02
    2eee:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    2ef0:	2e 96       	adiw	r28, 0x0e	; 14
    2ef2:	0f b6       	in	r0, 0x3f	; 63
    2ef4:	f8 94       	cli
    2ef6:	de bf       	out	0x3e, r29	; 62
    2ef8:	0f be       	out	0x3f, r0	; 63
    2efa:	cd bf       	out	0x3d, r28	; 61
    2efc:	cf 91       	pop	r28
    2efe:	df 91       	pop	r29
    2f00:	08 95       	ret

00002f02 <CLCD_VoidSendCmd>:
void CLCD_VoidSendCmd(u8 Copy_u8cmd){
    2f02:	df 93       	push	r29
    2f04:	cf 93       	push	r28
    2f06:	cd b7       	in	r28, 0x3d	; 61
    2f08:	de b7       	in	r29, 0x3e	; 62
    2f0a:	2f 97       	sbiw	r28, 0x0f	; 15
    2f0c:	0f b6       	in	r0, 0x3f	; 63
    2f0e:	f8 94       	cli
    2f10:	de bf       	out	0x3e, r29	; 62
    2f12:	0f be       	out	0x3f, r0	; 63
    2f14:	cd bf       	out	0x3d, r28	; 61
    2f16:	8f 87       	std	Y+15, r24	; 0x0f

#if CLCD_MODE == CLCD_MODE_8_BIT

	MDIO_voidSetPinValue(CLCD_E,CLCD_CTRL_PORT,DIO_LOW);
    2f18:	82 e0       	ldi	r24, 0x02	; 2
    2f1a:	63 e0       	ldi	r22, 0x03	; 3
    2f1c:	40 e0       	ldi	r20, 0x00	; 0
    2f1e:	0e 94 95 09 	call	0x132a	; 0x132a <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(CLCD_RS,CLCD_CTRL_PORT,DIO_LOW); // Set RS to Low for command
    2f22:	80 e0       	ldi	r24, 0x00	; 0
    2f24:	63 e0       	ldi	r22, 0x03	; 3
    2f26:	40 e0       	ldi	r20, 0x00	; 0
    2f28:	0e 94 95 09 	call	0x132a	; 0x132a <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(CLCD_RW,CLCD_CTRL_PORT,DIO_LOW); // Set RW pin to Low for write
    2f2c:	81 e0       	ldi	r24, 0x01	; 1
    2f2e:	63 e0       	ldi	r22, 0x03	; 3
    2f30:	40 e0       	ldi	r20, 0x00	; 0
    2f32:	0e 94 95 09 	call	0x132a	; 0x132a <MDIO_voidSetPinValue>
	MDIO_voidSetPortValue(CLCD_DATA_PORT,Copy_u8cmd);        // Send command
    2f36:	82 e0       	ldi	r24, 0x02	; 2
    2f38:	6f 85       	ldd	r22, Y+15	; 0x0f
    2f3a:	0e 94 e6 0b 	call	0x17cc	; 0x17cc <MDIO_voidSetPortValue>
	MDIO_voidSetPinValue(CLCD_E,CLCD_CTRL_PORT,DIO_HIGH); // Send enable pulse
    2f3e:	82 e0       	ldi	r24, 0x02	; 2
    2f40:	63 e0       	ldi	r22, 0x03	; 3
    2f42:	41 e0       	ldi	r20, 0x01	; 1
    2f44:	0e 94 95 09 	call	0x132a	; 0x132a <MDIO_voidSetPinValue>
    2f48:	80 e0       	ldi	r24, 0x00	; 0
    2f4a:	90 e0       	ldi	r25, 0x00	; 0
    2f4c:	a0 e8       	ldi	r26, 0x80	; 128
    2f4e:	bf e3       	ldi	r27, 0x3F	; 63
    2f50:	8b 87       	std	Y+11, r24	; 0x0b
    2f52:	9c 87       	std	Y+12, r25	; 0x0c
    2f54:	ad 87       	std	Y+13, r26	; 0x0d
    2f56:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f58:	6b 85       	ldd	r22, Y+11	; 0x0b
    2f5a:	7c 85       	ldd	r23, Y+12	; 0x0c
    2f5c:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f5e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f60:	20 e0       	ldi	r18, 0x00	; 0
    2f62:	30 e0       	ldi	r19, 0x00	; 0
    2f64:	4a ef       	ldi	r20, 0xFA	; 250
    2f66:	54 e4       	ldi	r21, 0x44	; 68
    2f68:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f6c:	dc 01       	movw	r26, r24
    2f6e:	cb 01       	movw	r24, r22
    2f70:	8f 83       	std	Y+7, r24	; 0x07
    2f72:	98 87       	std	Y+8, r25	; 0x08
    2f74:	a9 87       	std	Y+9, r26	; 0x09
    2f76:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2f78:	6f 81       	ldd	r22, Y+7	; 0x07
    2f7a:	78 85       	ldd	r23, Y+8	; 0x08
    2f7c:	89 85       	ldd	r24, Y+9	; 0x09
    2f7e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f80:	20 e0       	ldi	r18, 0x00	; 0
    2f82:	30 e0       	ldi	r19, 0x00	; 0
    2f84:	40 e8       	ldi	r20, 0x80	; 128
    2f86:	5f e3       	ldi	r21, 0x3F	; 63
    2f88:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2f8c:	88 23       	and	r24, r24
    2f8e:	2c f4       	brge	.+10     	; 0x2f9a <CLCD_VoidSendCmd+0x98>
		__ticks = 1;
    2f90:	81 e0       	ldi	r24, 0x01	; 1
    2f92:	90 e0       	ldi	r25, 0x00	; 0
    2f94:	9e 83       	std	Y+6, r25	; 0x06
    2f96:	8d 83       	std	Y+5, r24	; 0x05
    2f98:	3f c0       	rjmp	.+126    	; 0x3018 <CLCD_VoidSendCmd+0x116>
	else if (__tmp > 65535)
    2f9a:	6f 81       	ldd	r22, Y+7	; 0x07
    2f9c:	78 85       	ldd	r23, Y+8	; 0x08
    2f9e:	89 85       	ldd	r24, Y+9	; 0x09
    2fa0:	9a 85       	ldd	r25, Y+10	; 0x0a
    2fa2:	20 e0       	ldi	r18, 0x00	; 0
    2fa4:	3f ef       	ldi	r19, 0xFF	; 255
    2fa6:	4f e7       	ldi	r20, 0x7F	; 127
    2fa8:	57 e4       	ldi	r21, 0x47	; 71
    2faa:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2fae:	18 16       	cp	r1, r24
    2fb0:	4c f5       	brge	.+82     	; 0x3004 <CLCD_VoidSendCmd+0x102>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2fb2:	6b 85       	ldd	r22, Y+11	; 0x0b
    2fb4:	7c 85       	ldd	r23, Y+12	; 0x0c
    2fb6:	8d 85       	ldd	r24, Y+13	; 0x0d
    2fb8:	9e 85       	ldd	r25, Y+14	; 0x0e
    2fba:	20 e0       	ldi	r18, 0x00	; 0
    2fbc:	30 e0       	ldi	r19, 0x00	; 0
    2fbe:	40 e2       	ldi	r20, 0x20	; 32
    2fc0:	51 e4       	ldi	r21, 0x41	; 65
    2fc2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fc6:	dc 01       	movw	r26, r24
    2fc8:	cb 01       	movw	r24, r22
    2fca:	bc 01       	movw	r22, r24
    2fcc:	cd 01       	movw	r24, r26
    2fce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fd2:	dc 01       	movw	r26, r24
    2fd4:	cb 01       	movw	r24, r22
    2fd6:	9e 83       	std	Y+6, r25	; 0x06
    2fd8:	8d 83       	std	Y+5, r24	; 0x05
    2fda:	0f c0       	rjmp	.+30     	; 0x2ffa <CLCD_VoidSendCmd+0xf8>
    2fdc:	88 ec       	ldi	r24, 0xC8	; 200
    2fde:	90 e0       	ldi	r25, 0x00	; 0
    2fe0:	9c 83       	std	Y+4, r25	; 0x04
    2fe2:	8b 83       	std	Y+3, r24	; 0x03
    2fe4:	8b 81       	ldd	r24, Y+3	; 0x03
    2fe6:	9c 81       	ldd	r25, Y+4	; 0x04
    2fe8:	01 97       	sbiw	r24, 0x01	; 1
    2fea:	f1 f7       	brne	.-4      	; 0x2fe8 <CLCD_VoidSendCmd+0xe6>
    2fec:	9c 83       	std	Y+4, r25	; 0x04
    2fee:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ff0:	8d 81       	ldd	r24, Y+5	; 0x05
    2ff2:	9e 81       	ldd	r25, Y+6	; 0x06
    2ff4:	01 97       	sbiw	r24, 0x01	; 1
    2ff6:	9e 83       	std	Y+6, r25	; 0x06
    2ff8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ffa:	8d 81       	ldd	r24, Y+5	; 0x05
    2ffc:	9e 81       	ldd	r25, Y+6	; 0x06
    2ffe:	00 97       	sbiw	r24, 0x00	; 0
    3000:	69 f7       	brne	.-38     	; 0x2fdc <CLCD_VoidSendCmd+0xda>
    3002:	14 c0       	rjmp	.+40     	; 0x302c <CLCD_VoidSendCmd+0x12a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3004:	6f 81       	ldd	r22, Y+7	; 0x07
    3006:	78 85       	ldd	r23, Y+8	; 0x08
    3008:	89 85       	ldd	r24, Y+9	; 0x09
    300a:	9a 85       	ldd	r25, Y+10	; 0x0a
    300c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3010:	dc 01       	movw	r26, r24
    3012:	cb 01       	movw	r24, r22
    3014:	9e 83       	std	Y+6, r25	; 0x06
    3016:	8d 83       	std	Y+5, r24	; 0x05
    3018:	8d 81       	ldd	r24, Y+5	; 0x05
    301a:	9e 81       	ldd	r25, Y+6	; 0x06
    301c:	9a 83       	std	Y+2, r25	; 0x02
    301e:	89 83       	std	Y+1, r24	; 0x01
    3020:	89 81       	ldd	r24, Y+1	; 0x01
    3022:	9a 81       	ldd	r25, Y+2	; 0x02
    3024:	01 97       	sbiw	r24, 0x01	; 1
    3026:	f1 f7       	brne	.-4      	; 0x3024 <CLCD_VoidSendCmd+0x122>
    3028:	9a 83       	std	Y+2, r25	; 0x02
    302a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	MDIO_voidSetPinValue(CLCD_E,CLCD_CTRL_PORT,DIO_LOW);
    302c:	82 e0       	ldi	r24, 0x02	; 2
    302e:	63 e0       	ldi	r22, 0x03	; 3
    3030:	40 e0       	ldi	r20, 0x00	; 0
    3032:	0e 94 95 09 	call	0x132a	; 0x132a <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(CLCD_CTRL_PORT,CLCD_E,DIO_HIGH); // Send enable pulse
	_delay_ms(1);
	MDIO_voidSetPinValue(CLCD_CTRL_PORT,CLCD_E,DIO_LOW);

#endif
}
    3036:	2f 96       	adiw	r28, 0x0f	; 15
    3038:	0f b6       	in	r0, 0x3f	; 63
    303a:	f8 94       	cli
    303c:	de bf       	out	0x3e, r29	; 62
    303e:	0f be       	out	0x3f, r0	; 63
    3040:	cd bf       	out	0x3d, r28	; 61
    3042:	cf 91       	pop	r28
    3044:	df 91       	pop	r29
    3046:	08 95       	ret

00003048 <CLCD_VoidWrite>:
void CLCD_VoidWrite(u8 Copy_u8Data){
    3048:	df 93       	push	r29
    304a:	cf 93       	push	r28
    304c:	cd b7       	in	r28, 0x3d	; 61
    304e:	de b7       	in	r29, 0x3e	; 62
    3050:	2f 97       	sbiw	r28, 0x0f	; 15
    3052:	0f b6       	in	r0, 0x3f	; 63
    3054:	f8 94       	cli
    3056:	de bf       	out	0x3e, r29	; 62
    3058:	0f be       	out	0x3f, r0	; 63
    305a:	cd bf       	out	0x3d, r28	; 61
    305c:	8f 87       	std	Y+15, r24	; 0x0f
#if CLCD_MODE == CLCD_MODE_8_BIT

	MDIO_voidSetPinValue(CLCD_E,CLCD_CTRL_PORT,DIO_LOW);
    305e:	82 e0       	ldi	r24, 0x02	; 2
    3060:	63 e0       	ldi	r22, 0x03	; 3
    3062:	40 e0       	ldi	r20, 0x00	; 0
    3064:	0e 94 95 09 	call	0x132a	; 0x132a <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(CLCD_RS,CLCD_CTRL_PORT,DIO_HIGH); // Set RS to High for data
    3068:	80 e0       	ldi	r24, 0x00	; 0
    306a:	63 e0       	ldi	r22, 0x03	; 3
    306c:	41 e0       	ldi	r20, 0x01	; 1
    306e:	0e 94 95 09 	call	0x132a	; 0x132a <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(CLCD_RW,CLCD_CTRL_PORT,DIO_LOW);  // Set RW to low for write
    3072:	81 e0       	ldi	r24, 0x01	; 1
    3074:	63 e0       	ldi	r22, 0x03	; 3
    3076:	40 e0       	ldi	r20, 0x00	; 0
    3078:	0e 94 95 09 	call	0x132a	; 0x132a <MDIO_voidSetPinValue>
	MDIO_voidSetPortValue(CLCD_DATA_PORT,Copy_u8Data);        // Send data
    307c:	82 e0       	ldi	r24, 0x02	; 2
    307e:	6f 85       	ldd	r22, Y+15	; 0x0f
    3080:	0e 94 e6 0b 	call	0x17cc	; 0x17cc <MDIO_voidSetPortValue>
	MDIO_voidSetPinValue(CLCD_E,CLCD_CTRL_PORT,DIO_HIGH); // Send enable pulse
    3084:	82 e0       	ldi	r24, 0x02	; 2
    3086:	63 e0       	ldi	r22, 0x03	; 3
    3088:	41 e0       	ldi	r20, 0x01	; 1
    308a:	0e 94 95 09 	call	0x132a	; 0x132a <MDIO_voidSetPinValue>
    308e:	80 e0       	ldi	r24, 0x00	; 0
    3090:	90 e0       	ldi	r25, 0x00	; 0
    3092:	a0 e8       	ldi	r26, 0x80	; 128
    3094:	bf e3       	ldi	r27, 0x3F	; 63
    3096:	8b 87       	std	Y+11, r24	; 0x0b
    3098:	9c 87       	std	Y+12, r25	; 0x0c
    309a:	ad 87       	std	Y+13, r26	; 0x0d
    309c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    309e:	6b 85       	ldd	r22, Y+11	; 0x0b
    30a0:	7c 85       	ldd	r23, Y+12	; 0x0c
    30a2:	8d 85       	ldd	r24, Y+13	; 0x0d
    30a4:	9e 85       	ldd	r25, Y+14	; 0x0e
    30a6:	20 e0       	ldi	r18, 0x00	; 0
    30a8:	30 e0       	ldi	r19, 0x00	; 0
    30aa:	4a ef       	ldi	r20, 0xFA	; 250
    30ac:	54 e4       	ldi	r21, 0x44	; 68
    30ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30b2:	dc 01       	movw	r26, r24
    30b4:	cb 01       	movw	r24, r22
    30b6:	8f 83       	std	Y+7, r24	; 0x07
    30b8:	98 87       	std	Y+8, r25	; 0x08
    30ba:	a9 87       	std	Y+9, r26	; 0x09
    30bc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    30be:	6f 81       	ldd	r22, Y+7	; 0x07
    30c0:	78 85       	ldd	r23, Y+8	; 0x08
    30c2:	89 85       	ldd	r24, Y+9	; 0x09
    30c4:	9a 85       	ldd	r25, Y+10	; 0x0a
    30c6:	20 e0       	ldi	r18, 0x00	; 0
    30c8:	30 e0       	ldi	r19, 0x00	; 0
    30ca:	40 e8       	ldi	r20, 0x80	; 128
    30cc:	5f e3       	ldi	r21, 0x3F	; 63
    30ce:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    30d2:	88 23       	and	r24, r24
    30d4:	2c f4       	brge	.+10     	; 0x30e0 <CLCD_VoidWrite+0x98>
		__ticks = 1;
    30d6:	81 e0       	ldi	r24, 0x01	; 1
    30d8:	90 e0       	ldi	r25, 0x00	; 0
    30da:	9e 83       	std	Y+6, r25	; 0x06
    30dc:	8d 83       	std	Y+5, r24	; 0x05
    30de:	3f c0       	rjmp	.+126    	; 0x315e <CLCD_VoidWrite+0x116>
	else if (__tmp > 65535)
    30e0:	6f 81       	ldd	r22, Y+7	; 0x07
    30e2:	78 85       	ldd	r23, Y+8	; 0x08
    30e4:	89 85       	ldd	r24, Y+9	; 0x09
    30e6:	9a 85       	ldd	r25, Y+10	; 0x0a
    30e8:	20 e0       	ldi	r18, 0x00	; 0
    30ea:	3f ef       	ldi	r19, 0xFF	; 255
    30ec:	4f e7       	ldi	r20, 0x7F	; 127
    30ee:	57 e4       	ldi	r21, 0x47	; 71
    30f0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    30f4:	18 16       	cp	r1, r24
    30f6:	4c f5       	brge	.+82     	; 0x314a <CLCD_VoidWrite+0x102>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    30f8:	6b 85       	ldd	r22, Y+11	; 0x0b
    30fa:	7c 85       	ldd	r23, Y+12	; 0x0c
    30fc:	8d 85       	ldd	r24, Y+13	; 0x0d
    30fe:	9e 85       	ldd	r25, Y+14	; 0x0e
    3100:	20 e0       	ldi	r18, 0x00	; 0
    3102:	30 e0       	ldi	r19, 0x00	; 0
    3104:	40 e2       	ldi	r20, 0x20	; 32
    3106:	51 e4       	ldi	r21, 0x41	; 65
    3108:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    310c:	dc 01       	movw	r26, r24
    310e:	cb 01       	movw	r24, r22
    3110:	bc 01       	movw	r22, r24
    3112:	cd 01       	movw	r24, r26
    3114:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3118:	dc 01       	movw	r26, r24
    311a:	cb 01       	movw	r24, r22
    311c:	9e 83       	std	Y+6, r25	; 0x06
    311e:	8d 83       	std	Y+5, r24	; 0x05
    3120:	0f c0       	rjmp	.+30     	; 0x3140 <CLCD_VoidWrite+0xf8>
    3122:	88 ec       	ldi	r24, 0xC8	; 200
    3124:	90 e0       	ldi	r25, 0x00	; 0
    3126:	9c 83       	std	Y+4, r25	; 0x04
    3128:	8b 83       	std	Y+3, r24	; 0x03
    312a:	8b 81       	ldd	r24, Y+3	; 0x03
    312c:	9c 81       	ldd	r25, Y+4	; 0x04
    312e:	01 97       	sbiw	r24, 0x01	; 1
    3130:	f1 f7       	brne	.-4      	; 0x312e <CLCD_VoidWrite+0xe6>
    3132:	9c 83       	std	Y+4, r25	; 0x04
    3134:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3136:	8d 81       	ldd	r24, Y+5	; 0x05
    3138:	9e 81       	ldd	r25, Y+6	; 0x06
    313a:	01 97       	sbiw	r24, 0x01	; 1
    313c:	9e 83       	std	Y+6, r25	; 0x06
    313e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3140:	8d 81       	ldd	r24, Y+5	; 0x05
    3142:	9e 81       	ldd	r25, Y+6	; 0x06
    3144:	00 97       	sbiw	r24, 0x00	; 0
    3146:	69 f7       	brne	.-38     	; 0x3122 <CLCD_VoidWrite+0xda>
    3148:	14 c0       	rjmp	.+40     	; 0x3172 <CLCD_VoidWrite+0x12a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    314a:	6f 81       	ldd	r22, Y+7	; 0x07
    314c:	78 85       	ldd	r23, Y+8	; 0x08
    314e:	89 85       	ldd	r24, Y+9	; 0x09
    3150:	9a 85       	ldd	r25, Y+10	; 0x0a
    3152:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3156:	dc 01       	movw	r26, r24
    3158:	cb 01       	movw	r24, r22
    315a:	9e 83       	std	Y+6, r25	; 0x06
    315c:	8d 83       	std	Y+5, r24	; 0x05
    315e:	8d 81       	ldd	r24, Y+5	; 0x05
    3160:	9e 81       	ldd	r25, Y+6	; 0x06
    3162:	9a 83       	std	Y+2, r25	; 0x02
    3164:	89 83       	std	Y+1, r24	; 0x01
    3166:	89 81       	ldd	r24, Y+1	; 0x01
    3168:	9a 81       	ldd	r25, Y+2	; 0x02
    316a:	01 97       	sbiw	r24, 0x01	; 1
    316c:	f1 f7       	brne	.-4      	; 0x316a <CLCD_VoidWrite+0x122>
    316e:	9a 83       	std	Y+2, r25	; 0x02
    3170:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	MDIO_voidSetPinValue(CLCD_E,CLCD_CTRL_PORT,DIO_LOW);
    3172:	82 e0       	ldi	r24, 0x02	; 2
    3174:	63 e0       	ldi	r22, 0x03	; 3
    3176:	40 e0       	ldi	r20, 0x00	; 0
    3178:	0e 94 95 09 	call	0x132a	; 0x132a <MDIO_voidSetPinValue>

	MDIO_voidSetPinValue(CLCD_E,CLCD_CTRL_PORT,DIO_HIGH); // Send enable pulse
	_delay_ms(1);
	MDIO_voidSetPinValue(CLCD_E,CLCD_CTRL_PORT,DIO_LOW);
#endif
}
    317c:	2f 96       	adiw	r28, 0x0f	; 15
    317e:	0f b6       	in	r0, 0x3f	; 63
    3180:	f8 94       	cli
    3182:	de bf       	out	0x3e, r29	; 62
    3184:	0f be       	out	0x3f, r0	; 63
    3186:	cd bf       	out	0x3d, r28	; 61
    3188:	cf 91       	pop	r28
    318a:	df 91       	pop	r29
    318c:	08 95       	ret

0000318e <CLCD_WriteString>:
void CLCD_WriteString(u8 *Copy_u8data){
    318e:	df 93       	push	r29
    3190:	cf 93       	push	r28
    3192:	00 d0       	rcall	.+0      	; 0x3194 <CLCD_WriteString+0x6>
    3194:	0f 92       	push	r0
    3196:	cd b7       	in	r28, 0x3d	; 61
    3198:	de b7       	in	r29, 0x3e	; 62
    319a:	9b 83       	std	Y+3, r25	; 0x03
    319c:	8a 83       	std	Y+2, r24	; 0x02
	u8 i=0;
    319e:	19 82       	std	Y+1, r1	; 0x01
    31a0:	0e c0       	rjmp	.+28     	; 0x31be <CLCD_WriteString+0x30>
	while(Copy_u8data[i] != '\0'){
		CLCD_VoidWrite(Copy_u8data[i]);
    31a2:	89 81       	ldd	r24, Y+1	; 0x01
    31a4:	28 2f       	mov	r18, r24
    31a6:	30 e0       	ldi	r19, 0x00	; 0
    31a8:	8a 81       	ldd	r24, Y+2	; 0x02
    31aa:	9b 81       	ldd	r25, Y+3	; 0x03
    31ac:	fc 01       	movw	r30, r24
    31ae:	e2 0f       	add	r30, r18
    31b0:	f3 1f       	adc	r31, r19
    31b2:	80 81       	ld	r24, Z
    31b4:	0e 94 24 18 	call	0x3048	; 0x3048 <CLCD_VoidWrite>
		i++;
    31b8:	89 81       	ldd	r24, Y+1	; 0x01
    31ba:	8f 5f       	subi	r24, 0xFF	; 255
    31bc:	89 83       	std	Y+1, r24	; 0x01
	MDIO_voidSetPinValue(CLCD_E,CLCD_CTRL_PORT,DIO_LOW);
#endif
}
void CLCD_WriteString(u8 *Copy_u8data){
	u8 i=0;
	while(Copy_u8data[i] != '\0'){
    31be:	89 81       	ldd	r24, Y+1	; 0x01
    31c0:	28 2f       	mov	r18, r24
    31c2:	30 e0       	ldi	r19, 0x00	; 0
    31c4:	8a 81       	ldd	r24, Y+2	; 0x02
    31c6:	9b 81       	ldd	r25, Y+3	; 0x03
    31c8:	fc 01       	movw	r30, r24
    31ca:	e2 0f       	add	r30, r18
    31cc:	f3 1f       	adc	r31, r19
    31ce:	80 81       	ld	r24, Z
    31d0:	88 23       	and	r24, r24
    31d2:	39 f7       	brne	.-50     	; 0x31a2 <CLCD_WriteString+0x14>
		CLCD_VoidWrite(Copy_u8data[i]);
		i++;
	}
}
    31d4:	0f 90       	pop	r0
    31d6:	0f 90       	pop	r0
    31d8:	0f 90       	pop	r0
    31da:	cf 91       	pop	r28
    31dc:	df 91       	pop	r29
    31de:	08 95       	ret

000031e0 <CLCD_VoidGoToXY>:
void CLCD_VoidGoToXY(u8 Copy_u8X,u8 Copy_u8Y){
    31e0:	df 93       	push	r29
    31e2:	cf 93       	push	r28
    31e4:	00 d0       	rcall	.+0      	; 0x31e6 <CLCD_VoidGoToXY+0x6>
    31e6:	0f 92       	push	r0
    31e8:	cd b7       	in	r28, 0x3d	; 61
    31ea:	de b7       	in	r29, 0x3e	; 62
    31ec:	8a 83       	std	Y+2, r24	; 0x02
    31ee:	6b 83       	std	Y+3, r22	; 0x03
	u8 pos=0;
    31f0:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8Y==0)
    31f2:	8b 81       	ldd	r24, Y+3	; 0x03
    31f4:	88 23       	and	r24, r24
    31f6:	21 f4       	brne	.+8      	; 0x3200 <CLCD_VoidGoToXY+0x20>
	{
		pos=128+Copy_u8X; // 0b01000000 + x
    31f8:	8a 81       	ldd	r24, Y+2	; 0x02
    31fa:	80 58       	subi	r24, 0x80	; 128
    31fc:	89 83       	std	Y+1, r24	; 0x01
    31fe:	06 c0       	rjmp	.+12     	; 0x320c <CLCD_VoidGoToXY+0x2c>
	}
	else if(Copy_u8Y==1){
    3200:	8b 81       	ldd	r24, Y+3	; 0x03
    3202:	81 30       	cpi	r24, 0x01	; 1
    3204:	19 f4       	brne	.+6      	; 0x320c <CLCD_VoidGoToXY+0x2c>
		pos=128+0x40+Copy_u8X;
    3206:	8a 81       	ldd	r24, Y+2	; 0x02
    3208:	80 54       	subi	r24, 0x40	; 64
    320a:	89 83       	std	Y+1, r24	; 0x01
	}
	//Send the address for DDRAM with set bit 7 =1
	CLCD_VoidSendCmd(pos);
    320c:	89 81       	ldd	r24, Y+1	; 0x01
    320e:	0e 94 81 17 	call	0x2f02	; 0x2f02 <CLCD_VoidSendCmd>
}
    3212:	0f 90       	pop	r0
    3214:	0f 90       	pop	r0
    3216:	0f 90       	pop	r0
    3218:	cf 91       	pop	r28
    321a:	df 91       	pop	r29
    321c:	08 95       	ret

0000321e <CLCD_VoidWriteSpecialCharacter>:
void CLCD_VoidWriteSpecialCharacter(u8 *Copy_pPattern,u8 blockNo,u8 Copy_u8X,u8 Copy_u8Y){
    321e:	df 93       	push	r29
    3220:	cf 93       	push	r28
    3222:	cd b7       	in	r28, 0x3d	; 61
    3224:	de b7       	in	r29, 0x3e	; 62
    3226:	27 97       	sbiw	r28, 0x07	; 7
    3228:	0f b6       	in	r0, 0x3f	; 63
    322a:	f8 94       	cli
    322c:	de bf       	out	0x3e, r29	; 62
    322e:	0f be       	out	0x3f, r0	; 63
    3230:	cd bf       	out	0x3d, r28	; 61
    3232:	9c 83       	std	Y+4, r25	; 0x04
    3234:	8b 83       	std	Y+3, r24	; 0x03
    3236:	6d 83       	std	Y+5, r22	; 0x05
    3238:	4e 83       	std	Y+6, r20	; 0x06
    323a:	2f 83       	std	Y+7, r18	; 0x07
	u8 address = blockNo*8+0x40;
    323c:	8d 81       	ldd	r24, Y+5	; 0x05
    323e:	88 2f       	mov	r24, r24
    3240:	90 e0       	ldi	r25, 0x00	; 0
    3242:	08 96       	adiw	r24, 0x08	; 8
    3244:	88 0f       	add	r24, r24
    3246:	99 1f       	adc	r25, r25
    3248:	88 0f       	add	r24, r24
    324a:	99 1f       	adc	r25, r25
    324c:	88 0f       	add	r24, r24
    324e:	99 1f       	adc	r25, r25
    3250:	8a 83       	std	Y+2, r24	; 0x02
	CLCD_VoidSendCmd(address);
    3252:	8a 81       	ldd	r24, Y+2	; 0x02
    3254:	0e 94 81 17 	call	0x2f02	; 0x2f02 <CLCD_VoidSendCmd>
	for(u8 i=0;i<8;i++){
    3258:	19 82       	std	Y+1, r1	; 0x01
    325a:	0e c0       	rjmp	.+28     	; 0x3278 <CLCD_VoidWriteSpecialCharacter+0x5a>
		CLCD_VoidWrite(Copy_pPattern[i]);
    325c:	89 81       	ldd	r24, Y+1	; 0x01
    325e:	28 2f       	mov	r18, r24
    3260:	30 e0       	ldi	r19, 0x00	; 0
    3262:	8b 81       	ldd	r24, Y+3	; 0x03
    3264:	9c 81       	ldd	r25, Y+4	; 0x04
    3266:	fc 01       	movw	r30, r24
    3268:	e2 0f       	add	r30, r18
    326a:	f3 1f       	adc	r31, r19
    326c:	80 81       	ld	r24, Z
    326e:	0e 94 24 18 	call	0x3048	; 0x3048 <CLCD_VoidWrite>
	CLCD_VoidSendCmd(pos);
}
void CLCD_VoidWriteSpecialCharacter(u8 *Copy_pPattern,u8 blockNo,u8 Copy_u8X,u8 Copy_u8Y){
	u8 address = blockNo*8+0x40;
	CLCD_VoidSendCmd(address);
	for(u8 i=0;i<8;i++){
    3272:	89 81       	ldd	r24, Y+1	; 0x01
    3274:	8f 5f       	subi	r24, 0xFF	; 255
    3276:	89 83       	std	Y+1, r24	; 0x01
    3278:	89 81       	ldd	r24, Y+1	; 0x01
    327a:	88 30       	cpi	r24, 0x08	; 8
    327c:	78 f3       	brcs	.-34     	; 0x325c <CLCD_VoidWriteSpecialCharacter+0x3e>
		CLCD_VoidWrite(Copy_pPattern[i]);
	}
	CLCD_VoidGoToXY(Copy_u8X,Copy_u8Y);
    327e:	8e 81       	ldd	r24, Y+6	; 0x06
    3280:	6f 81       	ldd	r22, Y+7	; 0x07
    3282:	0e 94 f0 18 	call	0x31e0	; 0x31e0 <CLCD_VoidGoToXY>
	CLCD_VoidWrite(blockNo);
    3286:	8d 81       	ldd	r24, Y+5	; 0x05
    3288:	0e 94 24 18 	call	0x3048	; 0x3048 <CLCD_VoidWrite>
}
    328c:	27 96       	adiw	r28, 0x07	; 7
    328e:	0f b6       	in	r0, 0x3f	; 63
    3290:	f8 94       	cli
    3292:	de bf       	out	0x3e, r29	; 62
    3294:	0f be       	out	0x3f, r0	; 63
    3296:	cd bf       	out	0x3d, r28	; 61
    3298:	cf 91       	pop	r28
    329a:	df 91       	pop	r29
    329c:	08 95       	ret

0000329e <CLCD_WriteNumber>:
void CLCD_WriteNumber(u32 Copy_u32num){
    329e:	df 93       	push	r29
    32a0:	cf 93       	push	r28
    32a2:	cd b7       	in	r28, 0x3d	; 61
    32a4:	de b7       	in	r29, 0x3e	; 62
    32a6:	2a 97       	sbiw	r28, 0x0a	; 10
    32a8:	0f b6       	in	r0, 0x3f	; 63
    32aa:	f8 94       	cli
    32ac:	de bf       	out	0x3e, r29	; 62
    32ae:	0f be       	out	0x3f, r0	; 63
    32b0:	cd bf       	out	0x3d, r28	; 61
    32b2:	6f 83       	std	Y+7, r22	; 0x07
    32b4:	78 87       	std	Y+8, r23	; 0x08
    32b6:	89 87       	std	Y+9, r24	; 0x09
    32b8:	9a 87       	std	Y+10, r25	; 0x0a

	u8 digit1,digit2,digit3,digit4,digit5,digit6;

	digit1=Copy_u32num/100000;
    32ba:	8f 81       	ldd	r24, Y+7	; 0x07
    32bc:	98 85       	ldd	r25, Y+8	; 0x08
    32be:	a9 85       	ldd	r26, Y+9	; 0x09
    32c0:	ba 85       	ldd	r27, Y+10	; 0x0a
    32c2:	20 ea       	ldi	r18, 0xA0	; 160
    32c4:	36 e8       	ldi	r19, 0x86	; 134
    32c6:	41 e0       	ldi	r20, 0x01	; 1
    32c8:	50 e0       	ldi	r21, 0x00	; 0
    32ca:	bc 01       	movw	r22, r24
    32cc:	cd 01       	movw	r24, r26
    32ce:	0e 94 7d 20 	call	0x40fa	; 0x40fa <__udivmodsi4>
    32d2:	da 01       	movw	r26, r20
    32d4:	c9 01       	movw	r24, r18
    32d6:	8e 83       	std	Y+6, r24	; 0x06
	Copy_u32num=Copy_u32num%100000;
    32d8:	8f 81       	ldd	r24, Y+7	; 0x07
    32da:	98 85       	ldd	r25, Y+8	; 0x08
    32dc:	a9 85       	ldd	r26, Y+9	; 0x09
    32de:	ba 85       	ldd	r27, Y+10	; 0x0a
    32e0:	20 ea       	ldi	r18, 0xA0	; 160
    32e2:	36 e8       	ldi	r19, 0x86	; 134
    32e4:	41 e0       	ldi	r20, 0x01	; 1
    32e6:	50 e0       	ldi	r21, 0x00	; 0
    32e8:	bc 01       	movw	r22, r24
    32ea:	cd 01       	movw	r24, r26
    32ec:	0e 94 7d 20 	call	0x40fa	; 0x40fa <__udivmodsi4>
    32f0:	dc 01       	movw	r26, r24
    32f2:	cb 01       	movw	r24, r22
    32f4:	8f 83       	std	Y+7, r24	; 0x07
    32f6:	98 87       	std	Y+8, r25	; 0x08
    32f8:	a9 87       	std	Y+9, r26	; 0x09
    32fa:	ba 87       	std	Y+10, r27	; 0x0a

	digit2=Copy_u32num/10000;
    32fc:	8f 81       	ldd	r24, Y+7	; 0x07
    32fe:	98 85       	ldd	r25, Y+8	; 0x08
    3300:	a9 85       	ldd	r26, Y+9	; 0x09
    3302:	ba 85       	ldd	r27, Y+10	; 0x0a
    3304:	20 e1       	ldi	r18, 0x10	; 16
    3306:	37 e2       	ldi	r19, 0x27	; 39
    3308:	40 e0       	ldi	r20, 0x00	; 0
    330a:	50 e0       	ldi	r21, 0x00	; 0
    330c:	bc 01       	movw	r22, r24
    330e:	cd 01       	movw	r24, r26
    3310:	0e 94 7d 20 	call	0x40fa	; 0x40fa <__udivmodsi4>
    3314:	da 01       	movw	r26, r20
    3316:	c9 01       	movw	r24, r18
    3318:	8d 83       	std	Y+5, r24	; 0x05
	Copy_u32num=Copy_u32num%10000;
    331a:	8f 81       	ldd	r24, Y+7	; 0x07
    331c:	98 85       	ldd	r25, Y+8	; 0x08
    331e:	a9 85       	ldd	r26, Y+9	; 0x09
    3320:	ba 85       	ldd	r27, Y+10	; 0x0a
    3322:	20 e1       	ldi	r18, 0x10	; 16
    3324:	37 e2       	ldi	r19, 0x27	; 39
    3326:	40 e0       	ldi	r20, 0x00	; 0
    3328:	50 e0       	ldi	r21, 0x00	; 0
    332a:	bc 01       	movw	r22, r24
    332c:	cd 01       	movw	r24, r26
    332e:	0e 94 7d 20 	call	0x40fa	; 0x40fa <__udivmodsi4>
    3332:	dc 01       	movw	r26, r24
    3334:	cb 01       	movw	r24, r22
    3336:	8f 83       	std	Y+7, r24	; 0x07
    3338:	98 87       	std	Y+8, r25	; 0x08
    333a:	a9 87       	std	Y+9, r26	; 0x09
    333c:	ba 87       	std	Y+10, r27	; 0x0a

	digit3=Copy_u32num/1000;
    333e:	8f 81       	ldd	r24, Y+7	; 0x07
    3340:	98 85       	ldd	r25, Y+8	; 0x08
    3342:	a9 85       	ldd	r26, Y+9	; 0x09
    3344:	ba 85       	ldd	r27, Y+10	; 0x0a
    3346:	28 ee       	ldi	r18, 0xE8	; 232
    3348:	33 e0       	ldi	r19, 0x03	; 3
    334a:	40 e0       	ldi	r20, 0x00	; 0
    334c:	50 e0       	ldi	r21, 0x00	; 0
    334e:	bc 01       	movw	r22, r24
    3350:	cd 01       	movw	r24, r26
    3352:	0e 94 7d 20 	call	0x40fa	; 0x40fa <__udivmodsi4>
    3356:	da 01       	movw	r26, r20
    3358:	c9 01       	movw	r24, r18
    335a:	8c 83       	std	Y+4, r24	; 0x04
	Copy_u32num=Copy_u32num%1000;
    335c:	8f 81       	ldd	r24, Y+7	; 0x07
    335e:	98 85       	ldd	r25, Y+8	; 0x08
    3360:	a9 85       	ldd	r26, Y+9	; 0x09
    3362:	ba 85       	ldd	r27, Y+10	; 0x0a
    3364:	28 ee       	ldi	r18, 0xE8	; 232
    3366:	33 e0       	ldi	r19, 0x03	; 3
    3368:	40 e0       	ldi	r20, 0x00	; 0
    336a:	50 e0       	ldi	r21, 0x00	; 0
    336c:	bc 01       	movw	r22, r24
    336e:	cd 01       	movw	r24, r26
    3370:	0e 94 7d 20 	call	0x40fa	; 0x40fa <__udivmodsi4>
    3374:	dc 01       	movw	r26, r24
    3376:	cb 01       	movw	r24, r22
    3378:	8f 83       	std	Y+7, r24	; 0x07
    337a:	98 87       	std	Y+8, r25	; 0x08
    337c:	a9 87       	std	Y+9, r26	; 0x09
    337e:	ba 87       	std	Y+10, r27	; 0x0a

	digit4=Copy_u32num/100;
    3380:	8f 81       	ldd	r24, Y+7	; 0x07
    3382:	98 85       	ldd	r25, Y+8	; 0x08
    3384:	a9 85       	ldd	r26, Y+9	; 0x09
    3386:	ba 85       	ldd	r27, Y+10	; 0x0a
    3388:	24 e6       	ldi	r18, 0x64	; 100
    338a:	30 e0       	ldi	r19, 0x00	; 0
    338c:	40 e0       	ldi	r20, 0x00	; 0
    338e:	50 e0       	ldi	r21, 0x00	; 0
    3390:	bc 01       	movw	r22, r24
    3392:	cd 01       	movw	r24, r26
    3394:	0e 94 7d 20 	call	0x40fa	; 0x40fa <__udivmodsi4>
    3398:	da 01       	movw	r26, r20
    339a:	c9 01       	movw	r24, r18
    339c:	8b 83       	std	Y+3, r24	; 0x03
	Copy_u32num=Copy_u32num%100;
    339e:	8f 81       	ldd	r24, Y+7	; 0x07
    33a0:	98 85       	ldd	r25, Y+8	; 0x08
    33a2:	a9 85       	ldd	r26, Y+9	; 0x09
    33a4:	ba 85       	ldd	r27, Y+10	; 0x0a
    33a6:	24 e6       	ldi	r18, 0x64	; 100
    33a8:	30 e0       	ldi	r19, 0x00	; 0
    33aa:	40 e0       	ldi	r20, 0x00	; 0
    33ac:	50 e0       	ldi	r21, 0x00	; 0
    33ae:	bc 01       	movw	r22, r24
    33b0:	cd 01       	movw	r24, r26
    33b2:	0e 94 7d 20 	call	0x40fa	; 0x40fa <__udivmodsi4>
    33b6:	dc 01       	movw	r26, r24
    33b8:	cb 01       	movw	r24, r22
    33ba:	8f 83       	std	Y+7, r24	; 0x07
    33bc:	98 87       	std	Y+8, r25	; 0x08
    33be:	a9 87       	std	Y+9, r26	; 0x09
    33c0:	ba 87       	std	Y+10, r27	; 0x0a

	digit5=Copy_u32num/10;
    33c2:	8f 81       	ldd	r24, Y+7	; 0x07
    33c4:	98 85       	ldd	r25, Y+8	; 0x08
    33c6:	a9 85       	ldd	r26, Y+9	; 0x09
    33c8:	ba 85       	ldd	r27, Y+10	; 0x0a
    33ca:	2a e0       	ldi	r18, 0x0A	; 10
    33cc:	30 e0       	ldi	r19, 0x00	; 0
    33ce:	40 e0       	ldi	r20, 0x00	; 0
    33d0:	50 e0       	ldi	r21, 0x00	; 0
    33d2:	bc 01       	movw	r22, r24
    33d4:	cd 01       	movw	r24, r26
    33d6:	0e 94 7d 20 	call	0x40fa	; 0x40fa <__udivmodsi4>
    33da:	da 01       	movw	r26, r20
    33dc:	c9 01       	movw	r24, r18
    33de:	8a 83       	std	Y+2, r24	; 0x02
	Copy_u32num=Copy_u32num%10;
    33e0:	8f 81       	ldd	r24, Y+7	; 0x07
    33e2:	98 85       	ldd	r25, Y+8	; 0x08
    33e4:	a9 85       	ldd	r26, Y+9	; 0x09
    33e6:	ba 85       	ldd	r27, Y+10	; 0x0a
    33e8:	2a e0       	ldi	r18, 0x0A	; 10
    33ea:	30 e0       	ldi	r19, 0x00	; 0
    33ec:	40 e0       	ldi	r20, 0x00	; 0
    33ee:	50 e0       	ldi	r21, 0x00	; 0
    33f0:	bc 01       	movw	r22, r24
    33f2:	cd 01       	movw	r24, r26
    33f4:	0e 94 7d 20 	call	0x40fa	; 0x40fa <__udivmodsi4>
    33f8:	dc 01       	movw	r26, r24
    33fa:	cb 01       	movw	r24, r22
    33fc:	8f 83       	std	Y+7, r24	; 0x07
    33fe:	98 87       	std	Y+8, r25	; 0x08
    3400:	a9 87       	std	Y+9, r26	; 0x09
    3402:	ba 87       	std	Y+10, r27	; 0x0a

	digit6=Copy_u32num/1;
    3404:	8f 81       	ldd	r24, Y+7	; 0x07
    3406:	89 83       	std	Y+1, r24	; 0x01
	Copy_u32num=Copy_u32num%1;
    3408:	1f 82       	std	Y+7, r1	; 0x07
    340a:	18 86       	std	Y+8, r1	; 0x08
    340c:	19 86       	std	Y+9, r1	; 0x09
    340e:	1a 86       	std	Y+10, r1	; 0x0a

	if(digit1==0 && digit2==0 && digit3==0 && digit4==0 && digit5==0){
    3410:	8e 81       	ldd	r24, Y+6	; 0x06
    3412:	88 23       	and	r24, r24
    3414:	89 f4       	brne	.+34     	; 0x3438 <CLCD_WriteNumber+0x19a>
    3416:	8d 81       	ldd	r24, Y+5	; 0x05
    3418:	88 23       	and	r24, r24
    341a:	71 f4       	brne	.+28     	; 0x3438 <CLCD_WriteNumber+0x19a>
    341c:	8c 81       	ldd	r24, Y+4	; 0x04
    341e:	88 23       	and	r24, r24
    3420:	59 f4       	brne	.+22     	; 0x3438 <CLCD_WriteNumber+0x19a>
    3422:	8b 81       	ldd	r24, Y+3	; 0x03
    3424:	88 23       	and	r24, r24
    3426:	41 f4       	brne	.+16     	; 0x3438 <CLCD_WriteNumber+0x19a>
    3428:	8a 81       	ldd	r24, Y+2	; 0x02
    342a:	88 23       	and	r24, r24
    342c:	29 f4       	brne	.+10     	; 0x3438 <CLCD_WriteNumber+0x19a>
		CLCD_VoidWrite(digit6+48);
    342e:	89 81       	ldd	r24, Y+1	; 0x01
    3430:	80 5d       	subi	r24, 0xD0	; 208
    3432:	0e 94 24 18 	call	0x3048	; 0x3048 <CLCD_VoidWrite>
    3436:	75 c0       	rjmp	.+234    	; 0x3522 <CLCD_WriteNumber+0x284>
	}
	else if(digit1==0 && digit2==0 && digit3==0 && digit4==0){
    3438:	8e 81       	ldd	r24, Y+6	; 0x06
    343a:	88 23       	and	r24, r24
    343c:	91 f4       	brne	.+36     	; 0x3462 <CLCD_WriteNumber+0x1c4>
    343e:	8d 81       	ldd	r24, Y+5	; 0x05
    3440:	88 23       	and	r24, r24
    3442:	79 f4       	brne	.+30     	; 0x3462 <CLCD_WriteNumber+0x1c4>
    3444:	8c 81       	ldd	r24, Y+4	; 0x04
    3446:	88 23       	and	r24, r24
    3448:	61 f4       	brne	.+24     	; 0x3462 <CLCD_WriteNumber+0x1c4>
    344a:	8b 81       	ldd	r24, Y+3	; 0x03
    344c:	88 23       	and	r24, r24
    344e:	49 f4       	brne	.+18     	; 0x3462 <CLCD_WriteNumber+0x1c4>
		CLCD_VoidWrite(digit5+48);
    3450:	8a 81       	ldd	r24, Y+2	; 0x02
    3452:	80 5d       	subi	r24, 0xD0	; 208
    3454:	0e 94 24 18 	call	0x3048	; 0x3048 <CLCD_VoidWrite>
		CLCD_VoidWrite(digit6+48);
    3458:	89 81       	ldd	r24, Y+1	; 0x01
    345a:	80 5d       	subi	r24, 0xD0	; 208
    345c:	0e 94 24 18 	call	0x3048	; 0x3048 <CLCD_VoidWrite>
    3460:	60 c0       	rjmp	.+192    	; 0x3522 <CLCD_WriteNumber+0x284>
	}
	else if(digit1==0 && digit2==0 && digit3==0){
    3462:	8e 81       	ldd	r24, Y+6	; 0x06
    3464:	88 23       	and	r24, r24
    3466:	99 f4       	brne	.+38     	; 0x348e <CLCD_WriteNumber+0x1f0>
    3468:	8d 81       	ldd	r24, Y+5	; 0x05
    346a:	88 23       	and	r24, r24
    346c:	81 f4       	brne	.+32     	; 0x348e <CLCD_WriteNumber+0x1f0>
    346e:	8c 81       	ldd	r24, Y+4	; 0x04
    3470:	88 23       	and	r24, r24
    3472:	69 f4       	brne	.+26     	; 0x348e <CLCD_WriteNumber+0x1f0>
		CLCD_VoidWrite(digit4+48);
    3474:	8b 81       	ldd	r24, Y+3	; 0x03
    3476:	80 5d       	subi	r24, 0xD0	; 208
    3478:	0e 94 24 18 	call	0x3048	; 0x3048 <CLCD_VoidWrite>
		CLCD_VoidWrite(digit5+48);
    347c:	8a 81       	ldd	r24, Y+2	; 0x02
    347e:	80 5d       	subi	r24, 0xD0	; 208
    3480:	0e 94 24 18 	call	0x3048	; 0x3048 <CLCD_VoidWrite>
		CLCD_VoidWrite(digit6+48);
    3484:	89 81       	ldd	r24, Y+1	; 0x01
    3486:	80 5d       	subi	r24, 0xD0	; 208
    3488:	0e 94 24 18 	call	0x3048	; 0x3048 <CLCD_VoidWrite>
    348c:	4a c0       	rjmp	.+148    	; 0x3522 <CLCD_WriteNumber+0x284>
	}
	else if(digit1==0 && digit2==0){
    348e:	8e 81       	ldd	r24, Y+6	; 0x06
    3490:	88 23       	and	r24, r24
    3492:	a1 f4       	brne	.+40     	; 0x34bc <CLCD_WriteNumber+0x21e>
    3494:	8d 81       	ldd	r24, Y+5	; 0x05
    3496:	88 23       	and	r24, r24
    3498:	89 f4       	brne	.+34     	; 0x34bc <CLCD_WriteNumber+0x21e>
		CLCD_VoidWrite(digit3+48);
    349a:	8c 81       	ldd	r24, Y+4	; 0x04
    349c:	80 5d       	subi	r24, 0xD0	; 208
    349e:	0e 94 24 18 	call	0x3048	; 0x3048 <CLCD_VoidWrite>
		CLCD_VoidWrite(digit4+48);
    34a2:	8b 81       	ldd	r24, Y+3	; 0x03
    34a4:	80 5d       	subi	r24, 0xD0	; 208
    34a6:	0e 94 24 18 	call	0x3048	; 0x3048 <CLCD_VoidWrite>
		CLCD_VoidWrite(digit5+48);
    34aa:	8a 81       	ldd	r24, Y+2	; 0x02
    34ac:	80 5d       	subi	r24, 0xD0	; 208
    34ae:	0e 94 24 18 	call	0x3048	; 0x3048 <CLCD_VoidWrite>
		CLCD_VoidWrite(digit6+48);
    34b2:	89 81       	ldd	r24, Y+1	; 0x01
    34b4:	80 5d       	subi	r24, 0xD0	; 208
    34b6:	0e 94 24 18 	call	0x3048	; 0x3048 <CLCD_VoidWrite>
    34ba:	33 c0       	rjmp	.+102    	; 0x3522 <CLCD_WriteNumber+0x284>
	}
	else if(digit1==0){
    34bc:	8e 81       	ldd	r24, Y+6	; 0x06
    34be:	88 23       	and	r24, r24
    34c0:	a9 f4       	brne	.+42     	; 0x34ec <CLCD_WriteNumber+0x24e>
		CLCD_VoidWrite(digit2+48);
    34c2:	8d 81       	ldd	r24, Y+5	; 0x05
    34c4:	80 5d       	subi	r24, 0xD0	; 208
    34c6:	0e 94 24 18 	call	0x3048	; 0x3048 <CLCD_VoidWrite>
		CLCD_VoidWrite(digit3+48);
    34ca:	8c 81       	ldd	r24, Y+4	; 0x04
    34cc:	80 5d       	subi	r24, 0xD0	; 208
    34ce:	0e 94 24 18 	call	0x3048	; 0x3048 <CLCD_VoidWrite>
		CLCD_VoidWrite(digit4+48);
    34d2:	8b 81       	ldd	r24, Y+3	; 0x03
    34d4:	80 5d       	subi	r24, 0xD0	; 208
    34d6:	0e 94 24 18 	call	0x3048	; 0x3048 <CLCD_VoidWrite>
		CLCD_VoidWrite(digit5+48);
    34da:	8a 81       	ldd	r24, Y+2	; 0x02
    34dc:	80 5d       	subi	r24, 0xD0	; 208
    34de:	0e 94 24 18 	call	0x3048	; 0x3048 <CLCD_VoidWrite>
		CLCD_VoidWrite(digit6+48);
    34e2:	89 81       	ldd	r24, Y+1	; 0x01
    34e4:	80 5d       	subi	r24, 0xD0	; 208
    34e6:	0e 94 24 18 	call	0x3048	; 0x3048 <CLCD_VoidWrite>
    34ea:	1b c0       	rjmp	.+54     	; 0x3522 <CLCD_WriteNumber+0x284>
		}
	else if(digit1>0){
    34ec:	8e 81       	ldd	r24, Y+6	; 0x06
    34ee:	88 23       	and	r24, r24
    34f0:	c1 f0       	breq	.+48     	; 0x3522 <CLCD_WriteNumber+0x284>
		CLCD_VoidWrite(digit1+48);
    34f2:	8e 81       	ldd	r24, Y+6	; 0x06
    34f4:	80 5d       	subi	r24, 0xD0	; 208
    34f6:	0e 94 24 18 	call	0x3048	; 0x3048 <CLCD_VoidWrite>
		CLCD_VoidWrite(digit2+48);
    34fa:	8d 81       	ldd	r24, Y+5	; 0x05
    34fc:	80 5d       	subi	r24, 0xD0	; 208
    34fe:	0e 94 24 18 	call	0x3048	; 0x3048 <CLCD_VoidWrite>
		CLCD_VoidWrite(digit3+48);
    3502:	8c 81       	ldd	r24, Y+4	; 0x04
    3504:	80 5d       	subi	r24, 0xD0	; 208
    3506:	0e 94 24 18 	call	0x3048	; 0x3048 <CLCD_VoidWrite>
		CLCD_VoidWrite(digit4+48);
    350a:	8b 81       	ldd	r24, Y+3	; 0x03
    350c:	80 5d       	subi	r24, 0xD0	; 208
    350e:	0e 94 24 18 	call	0x3048	; 0x3048 <CLCD_VoidWrite>
		CLCD_VoidWrite(digit5+48);
    3512:	8a 81       	ldd	r24, Y+2	; 0x02
    3514:	80 5d       	subi	r24, 0xD0	; 208
    3516:	0e 94 24 18 	call	0x3048	; 0x3048 <CLCD_VoidWrite>
		CLCD_VoidWrite(digit6+48);
    351a:	89 81       	ldd	r24, Y+1	; 0x01
    351c:	80 5d       	subi	r24, 0xD0	; 208
    351e:	0e 94 24 18 	call	0x3048	; 0x3048 <CLCD_VoidWrite>
			}
}
    3522:	2a 96       	adiw	r28, 0x0a	; 10
    3524:	0f b6       	in	r0, 0x3f	; 63
    3526:	f8 94       	cli
    3528:	de bf       	out	0x3e, r29	; 62
    352a:	0f be       	out	0x3f, r0	; 63
    352c:	cd bf       	out	0x3d, r28	; 61
    352e:	cf 91       	pop	r28
    3530:	df 91       	pop	r29
    3532:	08 95       	ret

00003534 <main>:

static u8 Open_Flag=DIO_LOW;

void OpenSystem();

void main(void){
    3534:	0f 93       	push	r16
    3536:	1f 93       	push	r17
    3538:	df 93       	push	r29
    353a:	cf 93       	push	r28
    353c:	cd b7       	in	r28, 0x3d	; 61
    353e:	de b7       	in	r29, 0x3e	; 62
    3540:	c0 58       	subi	r28, 0x80	; 128
    3542:	d0 40       	sbci	r29, 0x00	; 0
    3544:	0f b6       	in	r0, 0x3f	; 63
    3546:	f8 94       	cli
    3548:	de bf       	out	0x3e, r29	; 62
    354a:	0f be       	out	0x3f, r0	; 63
    354c:	cd bf       	out	0x3d, r28	; 61

	u8 u8KpdOutput;            // Store Output key from KPD
	u8 passwordData[10]="";    // Array to store the password
    354e:	fe 01       	movw	r30, r28
    3550:	e9 58       	subi	r30, 0x89	; 137
    3552:	ff 4f       	sbci	r31, 0xFF	; 255
    3554:	10 82       	st	Z, r1
    3556:	11 82       	std	Z+1, r1	; 0x01
    3558:	12 82       	std	Z+2, r1	; 0x02
    355a:	13 82       	std	Z+3, r1	; 0x03
    355c:	86 e0       	ldi	r24, 0x06	; 6
    355e:	34 96       	adiw	r30, 0x04	; 4
    3560:	df 01       	movw	r26, r30
    3562:	98 2f       	mov	r25, r24
    3564:	1d 92       	st	X+, r1
    3566:	9a 95       	dec	r25
    3568:	e9 f7       	brne	.-6      	; 0x3564 <main+0x30>
	u8 index=0;				   // counter to move in password array
    356a:	fe 01       	movw	r30, r28
    356c:	eb 58       	subi	r30, 0x8B	; 139
    356e:	ff 4f       	sbci	r31, 0xFF	; 255
    3570:	10 82       	st	Z, r1
	u32 WrongCounter=2;		   // Counter number of wrong password
    3572:	fe 01       	movw	r30, r28
    3574:	ef 58       	subi	r30, 0x8F	; 143
    3576:	ff 4f       	sbci	r31, 0xFF	; 255
    3578:	82 e0       	ldi	r24, 0x02	; 2
    357a:	90 e0       	ldi	r25, 0x00	; 0
    357c:	a0 e0       	ldi	r26, 0x00	; 0
    357e:	b0 e0       	ldi	r27, 0x00	; 0
    3580:	80 83       	st	Z, r24
    3582:	91 83       	std	Z+1, r25	; 0x01
    3584:	a2 83       	std	Z+2, r26	; 0x02
    3586:	b3 83       	std	Z+3, r27	; 0x03

	// LCD Direction pins
	MDIO_voidSetPortMode(DIO_PORTC, 0xff);
    3588:	82 e0       	ldi	r24, 0x02	; 2
    358a:	6f ef       	ldi	r22, 0xFF	; 255
    358c:	0e 94 a2 0b 	call	0x1744	; 0x1744 <MDIO_voidSetPortMode>
	MDIO_voidSetPortMode(DIO_PORTD, 0b00000111);
    3590:	83 e0       	ldi	r24, 0x03	; 3
    3592:	67 e0       	ldi	r22, 0x07	; 7
    3594:	0e 94 a2 0b 	call	0x1744	; 0x1744 <MDIO_voidSetPortMode>

	// KPD Direction pins
	MDIO_voidSetPortMode(DIO_PORTA, 0b00011100);
    3598:	80 e0       	ldi	r24, 0x00	; 0
    359a:	6c e1       	ldi	r22, 0x1C	; 28
    359c:	0e 94 a2 0b 	call	0x1744	; 0x1744 <MDIO_voidSetPortMode>
	MDIO_voidSetPortValue(DIO_PORTA,0b11111100);
    35a0:	80 e0       	ldi	r24, 0x00	; 0
    35a2:	6c ef       	ldi	r22, 0xFC	; 252
    35a4:	0e 94 e6 0b 	call	0x17cc	; 0x17cc <MDIO_voidSetPortValue>

	// EXT Interrupt Pull Up
	MDIO_voidSetPinMode(DIO_PIN3, DIO_PORTD, DIO_INPUT);
    35a8:	83 e0       	ldi	r24, 0x03	; 3
    35aa:	63 e0       	ldi	r22, 0x03	; 3
    35ac:	40 e0       	ldi	r20, 0x00	; 0
    35ae:	0e 94 8d 08 	call	0x111a	; 0x111a <MDIO_voidSetPinMode>
	MDIO_voidSetPinValue(DIO_PIN3, DIO_PORTD, DIO_HIGH);
    35b2:	83 e0       	ldi	r24, 0x03	; 3
    35b4:	63 e0       	ldi	r22, 0x03	; 3
    35b6:	41 e0       	ldi	r20, 0x01	; 1
    35b8:	0e 94 95 09 	call	0x132a	; 0x132a <MDIO_voidSetPinValue>

	// Initialize Functions
	CLCD_VoidInitial();
    35bc:	0e 94 15 15 	call	0x2a2a	; 0x2a2a <CLCD_VoidInitial>
	HLCD_voidInit();
    35c0:	0e 94 bd 0c 	call	0x197a	; 0x197a <HLCD_voidInit>
	EXTI_voidINT1Init();
    35c4:	0e 94 a3 06 	call	0xd46	; 0xd46 <EXTI_voidINT1Init>
	GIE_voidEnableGlobal();
    35c8:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <GIE_voidEnableGlobal>


	while(1){

		EXTI_u8INTSetCallBack(&OpenSystem,EXTI_INT1); /* Use call Back function in Exti Interrupt 1*/
    35cc:	83 e7       	ldi	r24, 0x73	; 115
    35ce:	90 e2       	ldi	r25, 0x20	; 32
    35d0:	61 e0       	ldi	r22, 0x01	; 1
    35d2:	0e 94 d5 07 	call	0xfaa	; 0xfaa <EXTI_u8INTSetCallBack>

		//HLCD_voidWriteString("welcome");
		if(Open_Flag == 1){                          /* you will enter here if you press on EXTI 1  'PD3' */
    35d6:	80 91 fe 01 	lds	r24, 0x01FE
    35da:	81 30       	cpi	r24, 0x01	; 1
    35dc:	09 f0       	breq	.+2      	; 0x35e0 <main+0xac>
    35de:	0a c5       	rjmp	.+2580   	; 0x3ff4 <main+0xac0>
			CLCD_WriteString("Welcome :)");				/* Start Open Mode */
    35e0:	80 e6       	ldi	r24, 0x60	; 96
    35e2:	90 e0       	ldi	r25, 0x00	; 0
    35e4:	0e 94 c7 18 	call	0x318e	; 0x318e <CLCD_WriteString>
    35e8:	fe 01       	movw	r30, r28
    35ea:	e3 59       	subi	r30, 0x93	; 147
    35ec:	ff 4f       	sbci	r31, 0xFF	; 255
    35ee:	80 e0       	ldi	r24, 0x00	; 0
    35f0:	90 e0       	ldi	r25, 0x00	; 0
    35f2:	a8 ec       	ldi	r26, 0xC8	; 200
    35f4:	b2 e4       	ldi	r27, 0x42	; 66
    35f6:	80 83       	st	Z, r24
    35f8:	91 83       	std	Z+1, r25	; 0x01
    35fa:	a2 83       	std	Z+2, r26	; 0x02
    35fc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    35fe:	8e 01       	movw	r16, r28
    3600:	07 59       	subi	r16, 0x97	; 151
    3602:	1f 4f       	sbci	r17, 0xFF	; 255
    3604:	fe 01       	movw	r30, r28
    3606:	e3 59       	subi	r30, 0x93	; 147
    3608:	ff 4f       	sbci	r31, 0xFF	; 255
    360a:	60 81       	ld	r22, Z
    360c:	71 81       	ldd	r23, Z+1	; 0x01
    360e:	82 81       	ldd	r24, Z+2	; 0x02
    3610:	93 81       	ldd	r25, Z+3	; 0x03
    3612:	20 e0       	ldi	r18, 0x00	; 0
    3614:	30 e0       	ldi	r19, 0x00	; 0
    3616:	4a ef       	ldi	r20, 0xFA	; 250
    3618:	54 e4       	ldi	r21, 0x44	; 68
    361a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    361e:	dc 01       	movw	r26, r24
    3620:	cb 01       	movw	r24, r22
    3622:	f8 01       	movw	r30, r16
    3624:	80 83       	st	Z, r24
    3626:	91 83       	std	Z+1, r25	; 0x01
    3628:	a2 83       	std	Z+2, r26	; 0x02
    362a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    362c:	fe 01       	movw	r30, r28
    362e:	e7 59       	subi	r30, 0x97	; 151
    3630:	ff 4f       	sbci	r31, 0xFF	; 255
    3632:	60 81       	ld	r22, Z
    3634:	71 81       	ldd	r23, Z+1	; 0x01
    3636:	82 81       	ldd	r24, Z+2	; 0x02
    3638:	93 81       	ldd	r25, Z+3	; 0x03
    363a:	20 e0       	ldi	r18, 0x00	; 0
    363c:	30 e0       	ldi	r19, 0x00	; 0
    363e:	40 e8       	ldi	r20, 0x80	; 128
    3640:	5f e3       	ldi	r21, 0x3F	; 63
    3642:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3646:	88 23       	and	r24, r24
    3648:	44 f4       	brge	.+16     	; 0x365a <main+0x126>
		__ticks = 1;
    364a:	fe 01       	movw	r30, r28
    364c:	e9 59       	subi	r30, 0x99	; 153
    364e:	ff 4f       	sbci	r31, 0xFF	; 255
    3650:	81 e0       	ldi	r24, 0x01	; 1
    3652:	90 e0       	ldi	r25, 0x00	; 0
    3654:	91 83       	std	Z+1, r25	; 0x01
    3656:	80 83       	st	Z, r24
    3658:	64 c0       	rjmp	.+200    	; 0x3722 <main+0x1ee>
	else if (__tmp > 65535)
    365a:	fe 01       	movw	r30, r28
    365c:	e7 59       	subi	r30, 0x97	; 151
    365e:	ff 4f       	sbci	r31, 0xFF	; 255
    3660:	60 81       	ld	r22, Z
    3662:	71 81       	ldd	r23, Z+1	; 0x01
    3664:	82 81       	ldd	r24, Z+2	; 0x02
    3666:	93 81       	ldd	r25, Z+3	; 0x03
    3668:	20 e0       	ldi	r18, 0x00	; 0
    366a:	3f ef       	ldi	r19, 0xFF	; 255
    366c:	4f e7       	ldi	r20, 0x7F	; 127
    366e:	57 e4       	ldi	r21, 0x47	; 71
    3670:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3674:	18 16       	cp	r1, r24
    3676:	0c f0       	brlt	.+2      	; 0x367a <main+0x146>
    3678:	43 c0       	rjmp	.+134    	; 0x3700 <main+0x1cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    367a:	fe 01       	movw	r30, r28
    367c:	e3 59       	subi	r30, 0x93	; 147
    367e:	ff 4f       	sbci	r31, 0xFF	; 255
    3680:	60 81       	ld	r22, Z
    3682:	71 81       	ldd	r23, Z+1	; 0x01
    3684:	82 81       	ldd	r24, Z+2	; 0x02
    3686:	93 81       	ldd	r25, Z+3	; 0x03
    3688:	20 e0       	ldi	r18, 0x00	; 0
    368a:	30 e0       	ldi	r19, 0x00	; 0
    368c:	40 e2       	ldi	r20, 0x20	; 32
    368e:	51 e4       	ldi	r21, 0x41	; 65
    3690:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3694:	dc 01       	movw	r26, r24
    3696:	cb 01       	movw	r24, r22
    3698:	8e 01       	movw	r16, r28
    369a:	09 59       	subi	r16, 0x99	; 153
    369c:	1f 4f       	sbci	r17, 0xFF	; 255
    369e:	bc 01       	movw	r22, r24
    36a0:	cd 01       	movw	r24, r26
    36a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36a6:	dc 01       	movw	r26, r24
    36a8:	cb 01       	movw	r24, r22
    36aa:	f8 01       	movw	r30, r16
    36ac:	91 83       	std	Z+1, r25	; 0x01
    36ae:	80 83       	st	Z, r24
    36b0:	1f c0       	rjmp	.+62     	; 0x36f0 <main+0x1bc>
    36b2:	fe 01       	movw	r30, r28
    36b4:	eb 59       	subi	r30, 0x9B	; 155
    36b6:	ff 4f       	sbci	r31, 0xFF	; 255
    36b8:	88 ec       	ldi	r24, 0xC8	; 200
    36ba:	90 e0       	ldi	r25, 0x00	; 0
    36bc:	91 83       	std	Z+1, r25	; 0x01
    36be:	80 83       	st	Z, r24
    36c0:	fe 01       	movw	r30, r28
    36c2:	eb 59       	subi	r30, 0x9B	; 155
    36c4:	ff 4f       	sbci	r31, 0xFF	; 255
    36c6:	80 81       	ld	r24, Z
    36c8:	91 81       	ldd	r25, Z+1	; 0x01
    36ca:	01 97       	sbiw	r24, 0x01	; 1
    36cc:	f1 f7       	brne	.-4      	; 0x36ca <main+0x196>
    36ce:	fe 01       	movw	r30, r28
    36d0:	eb 59       	subi	r30, 0x9B	; 155
    36d2:	ff 4f       	sbci	r31, 0xFF	; 255
    36d4:	91 83       	std	Z+1, r25	; 0x01
    36d6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    36d8:	de 01       	movw	r26, r28
    36da:	a9 59       	subi	r26, 0x99	; 153
    36dc:	bf 4f       	sbci	r27, 0xFF	; 255
    36de:	fe 01       	movw	r30, r28
    36e0:	e9 59       	subi	r30, 0x99	; 153
    36e2:	ff 4f       	sbci	r31, 0xFF	; 255
    36e4:	80 81       	ld	r24, Z
    36e6:	91 81       	ldd	r25, Z+1	; 0x01
    36e8:	01 97       	sbiw	r24, 0x01	; 1
    36ea:	11 96       	adiw	r26, 0x01	; 1
    36ec:	9c 93       	st	X, r25
    36ee:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    36f0:	fe 01       	movw	r30, r28
    36f2:	e9 59       	subi	r30, 0x99	; 153
    36f4:	ff 4f       	sbci	r31, 0xFF	; 255
    36f6:	80 81       	ld	r24, Z
    36f8:	91 81       	ldd	r25, Z+1	; 0x01
    36fa:	00 97       	sbiw	r24, 0x00	; 0
    36fc:	d1 f6       	brne	.-76     	; 0x36b2 <main+0x17e>
    36fe:	27 c0       	rjmp	.+78     	; 0x374e <main+0x21a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3700:	8e 01       	movw	r16, r28
    3702:	09 59       	subi	r16, 0x99	; 153
    3704:	1f 4f       	sbci	r17, 0xFF	; 255
    3706:	fe 01       	movw	r30, r28
    3708:	e7 59       	subi	r30, 0x97	; 151
    370a:	ff 4f       	sbci	r31, 0xFF	; 255
    370c:	60 81       	ld	r22, Z
    370e:	71 81       	ldd	r23, Z+1	; 0x01
    3710:	82 81       	ldd	r24, Z+2	; 0x02
    3712:	93 81       	ldd	r25, Z+3	; 0x03
    3714:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3718:	dc 01       	movw	r26, r24
    371a:	cb 01       	movw	r24, r22
    371c:	f8 01       	movw	r30, r16
    371e:	91 83       	std	Z+1, r25	; 0x01
    3720:	80 83       	st	Z, r24
    3722:	de 01       	movw	r26, r28
    3724:	ad 59       	subi	r26, 0x9D	; 157
    3726:	bf 4f       	sbci	r27, 0xFF	; 255
    3728:	fe 01       	movw	r30, r28
    372a:	e9 59       	subi	r30, 0x99	; 153
    372c:	ff 4f       	sbci	r31, 0xFF	; 255
    372e:	80 81       	ld	r24, Z
    3730:	91 81       	ldd	r25, Z+1	; 0x01
    3732:	8d 93       	st	X+, r24
    3734:	9c 93       	st	X, r25
    3736:	fe 01       	movw	r30, r28
    3738:	ed 59       	subi	r30, 0x9D	; 157
    373a:	ff 4f       	sbci	r31, 0xFF	; 255
    373c:	80 81       	ld	r24, Z
    373e:	91 81       	ldd	r25, Z+1	; 0x01
    3740:	01 97       	sbiw	r24, 0x01	; 1
    3742:	f1 f7       	brne	.-4      	; 0x3740 <main+0x20c>
    3744:	fe 01       	movw	r30, r28
    3746:	ed 59       	subi	r30, 0x9D	; 157
    3748:	ff 4f       	sbci	r31, 0xFF	; 255
    374a:	91 83       	std	Z+1, r25	; 0x01
    374c:	80 83       	st	Z, r24
			_delay_ms(100);
			while(WrongCounter >=0){				/*Loop Just 3 Times */
				index=0;			  				// Return the counter of array of password in beginning
    374e:	fe 01       	movw	r30, r28
    3750:	eb 58       	subi	r30, 0x8B	; 139
    3752:	ff 4f       	sbci	r31, 0xFF	; 255
    3754:	10 82       	st	Z, r1
				CLCD_Clear();
    3756:	0e 94 f9 16 	call	0x2df2	; 0x2df2 <CLCD_Clear>
				CLCD_WriteString("Your Password:");
    375a:	8b e6       	ldi	r24, 0x6B	; 107
    375c:	90 e0       	ldi	r25, 0x00	; 0
    375e:	0e 94 c7 18 	call	0x318e	; 0x318e <CLCD_WriteString>
				CLCD_VoidGoToXY(1, 1);
    3762:	81 e0       	ldi	r24, 0x01	; 1
    3764:	61 e0       	ldi	r22, 0x01	; 1
    3766:	0e 94 f0 18 	call	0x31e0	; 0x31e0 <CLCD_VoidGoToXY>
    376a:	13 c1       	rjmp	.+550    	; 0x3992 <main+0x45e>
				while(u8KpdOutput != 'e'){					/*The user should press enter to take the password*/
					if(u8KpdOutput == 'c'){					/*if the user press Clear the password*/
    376c:	fe 01       	movw	r30, r28
    376e:	ea 58       	subi	r30, 0x8A	; 138
    3770:	ff 4f       	sbci	r31, 0xFF	; 255
    3772:	80 81       	ld	r24, Z
    3774:	83 36       	cpi	r24, 0x63	; 99
    3776:	71 f4       	brne	.+28     	; 0x3794 <main+0x260>
						CLCD_Clear();
    3778:	0e 94 f9 16 	call	0x2df2	; 0x2df2 <CLCD_Clear>
						CLCD_WriteString("Your Password:");
    377c:	8b e6       	ldi	r24, 0x6B	; 107
    377e:	90 e0       	ldi	r25, 0x00	; 0
    3780:	0e 94 c7 18 	call	0x318e	; 0x318e <CLCD_WriteString>
						CLCD_VoidGoToXY(1, 1);
    3784:	81 e0       	ldi	r24, 0x01	; 1
    3786:	61 e0       	ldi	r22, 0x01	; 1
    3788:	0e 94 f0 18 	call	0x31e0	; 0x31e0 <CLCD_VoidGoToXY>
						index = 0;
    378c:	fe 01       	movw	r30, r28
    378e:	eb 58       	subi	r30, 0x8B	; 139
    3790:	ff 4f       	sbci	r31, 0xFF	; 255
    3792:	10 82       	st	Z, r1
					}
					if(u8KpdOutput >= '1' && u8KpdOutput <= '6'){       /*Make sure the data from 1 to 6 to display it*/
    3794:	fe 01       	movw	r30, r28
    3796:	ea 58       	subi	r30, 0x8A	; 138
    3798:	ff 4f       	sbci	r31, 0xFF	; 255
    379a:	80 81       	ld	r24, Z
    379c:	81 33       	cpi	r24, 0x31	; 49
    379e:	08 f4       	brcc	.+2      	; 0x37a2 <main+0x26e>
    37a0:	e5 c0       	rjmp	.+458    	; 0x396c <main+0x438>
    37a2:	fe 01       	movw	r30, r28
    37a4:	ea 58       	subi	r30, 0x8A	; 138
    37a6:	ff 4f       	sbci	r31, 0xFF	; 255
    37a8:	80 81       	ld	r24, Z
    37aa:	87 33       	cpi	r24, 0x37	; 55
    37ac:	08 f0       	brcs	.+2      	; 0x37b0 <main+0x27c>
    37ae:	de c0       	rjmp	.+444    	; 0x396c <main+0x438>
					CLCD_VoidWrite(u8KpdOutput);
    37b0:	fe 01       	movw	r30, r28
    37b2:	ea 58       	subi	r30, 0x8A	; 138
    37b4:	ff 4f       	sbci	r31, 0xFF	; 255
    37b6:	80 81       	ld	r24, Z
    37b8:	0e 94 24 18 	call	0x3048	; 0x3048 <CLCD_VoidWrite>
    37bc:	fe 01       	movw	r30, r28
    37be:	e1 5a       	subi	r30, 0xA1	; 161
    37c0:	ff 4f       	sbci	r31, 0xFF	; 255
    37c2:	80 e0       	ldi	r24, 0x00	; 0
    37c4:	90 e0       	ldi	r25, 0x00	; 0
    37c6:	a0 e2       	ldi	r26, 0x20	; 32
    37c8:	b1 e4       	ldi	r27, 0x41	; 65
    37ca:	80 83       	st	Z, r24
    37cc:	91 83       	std	Z+1, r25	; 0x01
    37ce:	a2 83       	std	Z+2, r26	; 0x02
    37d0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    37d2:	8e 01       	movw	r16, r28
    37d4:	05 5a       	subi	r16, 0xA5	; 165
    37d6:	1f 4f       	sbci	r17, 0xFF	; 255
    37d8:	fe 01       	movw	r30, r28
    37da:	e1 5a       	subi	r30, 0xA1	; 161
    37dc:	ff 4f       	sbci	r31, 0xFF	; 255
    37de:	60 81       	ld	r22, Z
    37e0:	71 81       	ldd	r23, Z+1	; 0x01
    37e2:	82 81       	ldd	r24, Z+2	; 0x02
    37e4:	93 81       	ldd	r25, Z+3	; 0x03
    37e6:	20 e0       	ldi	r18, 0x00	; 0
    37e8:	30 e0       	ldi	r19, 0x00	; 0
    37ea:	4a ef       	ldi	r20, 0xFA	; 250
    37ec:	54 e4       	ldi	r21, 0x44	; 68
    37ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    37f2:	dc 01       	movw	r26, r24
    37f4:	cb 01       	movw	r24, r22
    37f6:	f8 01       	movw	r30, r16
    37f8:	80 83       	st	Z, r24
    37fa:	91 83       	std	Z+1, r25	; 0x01
    37fc:	a2 83       	std	Z+2, r26	; 0x02
    37fe:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3800:	fe 01       	movw	r30, r28
    3802:	e5 5a       	subi	r30, 0xA5	; 165
    3804:	ff 4f       	sbci	r31, 0xFF	; 255
    3806:	60 81       	ld	r22, Z
    3808:	71 81       	ldd	r23, Z+1	; 0x01
    380a:	82 81       	ldd	r24, Z+2	; 0x02
    380c:	93 81       	ldd	r25, Z+3	; 0x03
    380e:	20 e0       	ldi	r18, 0x00	; 0
    3810:	30 e0       	ldi	r19, 0x00	; 0
    3812:	40 e8       	ldi	r20, 0x80	; 128
    3814:	5f e3       	ldi	r21, 0x3F	; 63
    3816:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    381a:	88 23       	and	r24, r24
    381c:	44 f4       	brge	.+16     	; 0x382e <main+0x2fa>
		__ticks = 1;
    381e:	fe 01       	movw	r30, r28
    3820:	e7 5a       	subi	r30, 0xA7	; 167
    3822:	ff 4f       	sbci	r31, 0xFF	; 255
    3824:	81 e0       	ldi	r24, 0x01	; 1
    3826:	90 e0       	ldi	r25, 0x00	; 0
    3828:	91 83       	std	Z+1, r25	; 0x01
    382a:	80 83       	st	Z, r24
    382c:	64 c0       	rjmp	.+200    	; 0x38f6 <main+0x3c2>
	else if (__tmp > 65535)
    382e:	fe 01       	movw	r30, r28
    3830:	e5 5a       	subi	r30, 0xA5	; 165
    3832:	ff 4f       	sbci	r31, 0xFF	; 255
    3834:	60 81       	ld	r22, Z
    3836:	71 81       	ldd	r23, Z+1	; 0x01
    3838:	82 81       	ldd	r24, Z+2	; 0x02
    383a:	93 81       	ldd	r25, Z+3	; 0x03
    383c:	20 e0       	ldi	r18, 0x00	; 0
    383e:	3f ef       	ldi	r19, 0xFF	; 255
    3840:	4f e7       	ldi	r20, 0x7F	; 127
    3842:	57 e4       	ldi	r21, 0x47	; 71
    3844:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3848:	18 16       	cp	r1, r24
    384a:	0c f0       	brlt	.+2      	; 0x384e <main+0x31a>
    384c:	43 c0       	rjmp	.+134    	; 0x38d4 <main+0x3a0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    384e:	fe 01       	movw	r30, r28
    3850:	e1 5a       	subi	r30, 0xA1	; 161
    3852:	ff 4f       	sbci	r31, 0xFF	; 255
    3854:	60 81       	ld	r22, Z
    3856:	71 81       	ldd	r23, Z+1	; 0x01
    3858:	82 81       	ldd	r24, Z+2	; 0x02
    385a:	93 81       	ldd	r25, Z+3	; 0x03
    385c:	20 e0       	ldi	r18, 0x00	; 0
    385e:	30 e0       	ldi	r19, 0x00	; 0
    3860:	40 e2       	ldi	r20, 0x20	; 32
    3862:	51 e4       	ldi	r21, 0x41	; 65
    3864:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3868:	dc 01       	movw	r26, r24
    386a:	cb 01       	movw	r24, r22
    386c:	8e 01       	movw	r16, r28
    386e:	07 5a       	subi	r16, 0xA7	; 167
    3870:	1f 4f       	sbci	r17, 0xFF	; 255
    3872:	bc 01       	movw	r22, r24
    3874:	cd 01       	movw	r24, r26
    3876:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    387a:	dc 01       	movw	r26, r24
    387c:	cb 01       	movw	r24, r22
    387e:	f8 01       	movw	r30, r16
    3880:	91 83       	std	Z+1, r25	; 0x01
    3882:	80 83       	st	Z, r24
    3884:	1f c0       	rjmp	.+62     	; 0x38c4 <main+0x390>
    3886:	fe 01       	movw	r30, r28
    3888:	e9 5a       	subi	r30, 0xA9	; 169
    388a:	ff 4f       	sbci	r31, 0xFF	; 255
    388c:	88 ec       	ldi	r24, 0xC8	; 200
    388e:	90 e0       	ldi	r25, 0x00	; 0
    3890:	91 83       	std	Z+1, r25	; 0x01
    3892:	80 83       	st	Z, r24
    3894:	fe 01       	movw	r30, r28
    3896:	e9 5a       	subi	r30, 0xA9	; 169
    3898:	ff 4f       	sbci	r31, 0xFF	; 255
    389a:	80 81       	ld	r24, Z
    389c:	91 81       	ldd	r25, Z+1	; 0x01
    389e:	01 97       	sbiw	r24, 0x01	; 1
    38a0:	f1 f7       	brne	.-4      	; 0x389e <main+0x36a>
    38a2:	fe 01       	movw	r30, r28
    38a4:	e9 5a       	subi	r30, 0xA9	; 169
    38a6:	ff 4f       	sbci	r31, 0xFF	; 255
    38a8:	91 83       	std	Z+1, r25	; 0x01
    38aa:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    38ac:	de 01       	movw	r26, r28
    38ae:	a7 5a       	subi	r26, 0xA7	; 167
    38b0:	bf 4f       	sbci	r27, 0xFF	; 255
    38b2:	fe 01       	movw	r30, r28
    38b4:	e7 5a       	subi	r30, 0xA7	; 167
    38b6:	ff 4f       	sbci	r31, 0xFF	; 255
    38b8:	80 81       	ld	r24, Z
    38ba:	91 81       	ldd	r25, Z+1	; 0x01
    38bc:	01 97       	sbiw	r24, 0x01	; 1
    38be:	11 96       	adiw	r26, 0x01	; 1
    38c0:	9c 93       	st	X, r25
    38c2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    38c4:	fe 01       	movw	r30, r28
    38c6:	e7 5a       	subi	r30, 0xA7	; 167
    38c8:	ff 4f       	sbci	r31, 0xFF	; 255
    38ca:	80 81       	ld	r24, Z
    38cc:	91 81       	ldd	r25, Z+1	; 0x01
    38ce:	00 97       	sbiw	r24, 0x00	; 0
    38d0:	d1 f6       	brne	.-76     	; 0x3886 <main+0x352>
    38d2:	27 c0       	rjmp	.+78     	; 0x3922 <main+0x3ee>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    38d4:	8e 01       	movw	r16, r28
    38d6:	07 5a       	subi	r16, 0xA7	; 167
    38d8:	1f 4f       	sbci	r17, 0xFF	; 255
    38da:	fe 01       	movw	r30, r28
    38dc:	e5 5a       	subi	r30, 0xA5	; 165
    38de:	ff 4f       	sbci	r31, 0xFF	; 255
    38e0:	60 81       	ld	r22, Z
    38e2:	71 81       	ldd	r23, Z+1	; 0x01
    38e4:	82 81       	ldd	r24, Z+2	; 0x02
    38e6:	93 81       	ldd	r25, Z+3	; 0x03
    38e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    38ec:	dc 01       	movw	r26, r24
    38ee:	cb 01       	movw	r24, r22
    38f0:	f8 01       	movw	r30, r16
    38f2:	91 83       	std	Z+1, r25	; 0x01
    38f4:	80 83       	st	Z, r24
    38f6:	de 01       	movw	r26, r28
    38f8:	ab 5a       	subi	r26, 0xAB	; 171
    38fa:	bf 4f       	sbci	r27, 0xFF	; 255
    38fc:	fe 01       	movw	r30, r28
    38fe:	e7 5a       	subi	r30, 0xA7	; 167
    3900:	ff 4f       	sbci	r31, 0xFF	; 255
    3902:	80 81       	ld	r24, Z
    3904:	91 81       	ldd	r25, Z+1	; 0x01
    3906:	8d 93       	st	X+, r24
    3908:	9c 93       	st	X, r25
    390a:	fe 01       	movw	r30, r28
    390c:	eb 5a       	subi	r30, 0xAB	; 171
    390e:	ff 4f       	sbci	r31, 0xFF	; 255
    3910:	80 81       	ld	r24, Z
    3912:	91 81       	ldd	r25, Z+1	; 0x01
    3914:	01 97       	sbiw	r24, 0x01	; 1
    3916:	f1 f7       	brne	.-4      	; 0x3914 <main+0x3e0>
    3918:	fe 01       	movw	r30, r28
    391a:	eb 5a       	subi	r30, 0xAB	; 171
    391c:	ff 4f       	sbci	r31, 0xFF	; 255
    391e:	91 83       	std	Z+1, r25	; 0x01
    3920:	80 83       	st	Z, r24
					_delay_ms(10);
					CLCD_VoidGoToXY(index+1, 1);                      /* Go to the same position */
    3922:	fe 01       	movw	r30, r28
    3924:	eb 58       	subi	r30, 0x8B	; 139
    3926:	ff 4f       	sbci	r31, 0xFF	; 255
    3928:	80 81       	ld	r24, Z
    392a:	8f 5f       	subi	r24, 0xFF	; 255
    392c:	61 e0       	ldi	r22, 0x01	; 1
    392e:	0e 94 f0 18 	call	0x31e0	; 0x31e0 <CLCD_VoidGoToXY>
					CLCD_VoidWrite('*');							  /* 		to write *       */
    3932:	8a e2       	ldi	r24, 0x2A	; 42
    3934:	0e 94 24 18 	call	0x3048	; 0x3048 <CLCD_VoidWrite>
					passwordData[index]= u8KpdOutput;
    3938:	fe 01       	movw	r30, r28
    393a:	eb 58       	subi	r30, 0x8B	; 139
    393c:	ff 4f       	sbci	r31, 0xFF	; 255
    393e:	80 81       	ld	r24, Z
    3940:	28 2f       	mov	r18, r24
    3942:	30 e0       	ldi	r19, 0x00	; 0
    3944:	ce 01       	movw	r24, r28
    3946:	89 58       	subi	r24, 0x89	; 137
    3948:	9f 4f       	sbci	r25, 0xFF	; 255
    394a:	dc 01       	movw	r26, r24
    394c:	a2 0f       	add	r26, r18
    394e:	b3 1f       	adc	r27, r19
    3950:	fe 01       	movw	r30, r28
    3952:	ea 58       	subi	r30, 0x8A	; 138
    3954:	ff 4f       	sbci	r31, 0xFF	; 255
    3956:	80 81       	ld	r24, Z
    3958:	8c 93       	st	X, r24
					index++;
    395a:	de 01       	movw	r26, r28
    395c:	ab 58       	subi	r26, 0x8B	; 139
    395e:	bf 4f       	sbci	r27, 0xFF	; 255
    3960:	fe 01       	movw	r30, r28
    3962:	eb 58       	subi	r30, 0x8B	; 139
    3964:	ff 4f       	sbci	r31, 0xFF	; 255
    3966:	80 81       	ld	r24, Z
    3968:	8f 5f       	subi	r24, 0xFF	; 255
    396a:	8c 93       	st	X, r24
					//HLCD_voidWriteChracter("Welcome");
					}

					u8KpdOutput = KPD_U8GetPressedKey();				/* Wait until user 		*/
    396c:	0e 94 37 14 	call	0x286e	; 0x286e <KPD_U8GetPressedKey>
    3970:	fe 01       	movw	r30, r28
    3972:	ea 58       	subi	r30, 0x8A	; 138
    3974:	ff 4f       	sbci	r31, 0xFF	; 255
    3976:	80 83       	st	Z, r24
    3978:	06 c0       	rjmp	.+12     	; 0x3986 <main+0x452>
					while(u8KpdOutput == NO_PRESSED_KEY_VALUE){			/*	press any key 		*/
						u8KpdOutput = KPD_U8GetPressedKey();
    397a:	0e 94 37 14 	call	0x286e	; 0x286e <KPD_U8GetPressedKey>
    397e:	fe 01       	movw	r30, r28
    3980:	ea 58       	subi	r30, 0x8A	; 138
    3982:	ff 4f       	sbci	r31, 0xFF	; 255
    3984:	80 83       	st	Z, r24
					index++;
					//HLCD_voidWriteChracter("Welcome");
					}

					u8KpdOutput = KPD_U8GetPressedKey();				/* Wait until user 		*/
					while(u8KpdOutput == NO_PRESSED_KEY_VALUE){			/*	press any key 		*/
    3986:	fe 01       	movw	r30, r28
    3988:	ea 58       	subi	r30, 0x8A	; 138
    398a:	ff 4f       	sbci	r31, 0xFF	; 255
    398c:	80 81       	ld	r24, Z
    398e:	8f 3f       	cpi	r24, 0xFF	; 255
    3990:	a1 f3       	breq	.-24     	; 0x397a <main+0x446>
			while(WrongCounter >=0){				/*Loop Just 3 Times */
				index=0;			  				// Return the counter of array of password in beginning
				CLCD_Clear();
				CLCD_WriteString("Your Password:");
				CLCD_VoidGoToXY(1, 1);
				while(u8KpdOutput != 'e'){					/*The user should press enter to take the password*/
    3992:	fe 01       	movw	r30, r28
    3994:	ea 58       	subi	r30, 0x8A	; 138
    3996:	ff 4f       	sbci	r31, 0xFF	; 255
    3998:	80 81       	ld	r24, Z
    399a:	85 36       	cpi	r24, 0x65	; 101
    399c:	09 f0       	breq	.+2      	; 0x39a0 <main+0x46c>
    399e:	e6 ce       	rjmp	.-564    	; 0x376c <main+0x238>
					u8KpdOutput = KPD_U8GetPressedKey();				/* Wait until user 		*/
					while(u8KpdOutput == NO_PRESSED_KEY_VALUE){			/*	press any key 		*/
						u8KpdOutput = KPD_U8GetPressedKey();
					}
				}
				passwordData[index]='\0';							 /*End the password with \0 to make sure*/
    39a0:	fe 01       	movw	r30, r28
    39a2:	eb 58       	subi	r30, 0x8B	; 139
    39a4:	ff 4f       	sbci	r31, 0xFF	; 255
    39a6:	80 81       	ld	r24, Z
    39a8:	28 2f       	mov	r18, r24
    39aa:	30 e0       	ldi	r19, 0x00	; 0
    39ac:	ce 01       	movw	r24, r28
    39ae:	89 58       	subi	r24, 0x89	; 137
    39b0:	9f 4f       	sbci	r25, 0xFF	; 255
    39b2:	fc 01       	movw	r30, r24
    39b4:	e2 0f       	add	r30, r18
    39b6:	f3 1f       	adc	r31, r19
    39b8:	10 82       	st	Z, r1
				u8KpdOutput =NO_PRESSED_KEY_VALUE;                   /* Clear the data from KPD output  */
    39ba:	fe 01       	movw	r30, r28
    39bc:	ea 58       	subi	r30, 0x8A	; 138
    39be:	ff 4f       	sbci	r31, 0xFF	; 255
    39c0:	8f ef       	ldi	r24, 0xFF	; 255
    39c2:	80 83       	st	Z, r24
				CLCD_Clear();
    39c4:	0e 94 f9 16 	call	0x2df2	; 0x2df2 <CLCD_Clear>

				if(passwordData[0]=='1' && passwordData[1]=='2' && passwordData[2]=='3' && passwordData[3]=='4'){   /*Check the pass*/
    39c8:	fe 01       	movw	r30, r28
    39ca:	e9 58       	subi	r30, 0x89	; 137
    39cc:	ff 4f       	sbci	r31, 0xFF	; 255
    39ce:	80 81       	ld	r24, Z
    39d0:	81 33       	cpi	r24, 0x31	; 49
    39d2:	09 f0       	breq	.+2      	; 0x39d6 <main+0x4a2>
    39d4:	62 c1       	rjmp	.+708    	; 0x3c9a <main+0x766>
    39d6:	fe 01       	movw	r30, r28
    39d8:	e9 58       	subi	r30, 0x89	; 137
    39da:	ff 4f       	sbci	r31, 0xFF	; 255
    39dc:	81 81       	ldd	r24, Z+1	; 0x01
    39de:	82 33       	cpi	r24, 0x32	; 50
    39e0:	09 f0       	breq	.+2      	; 0x39e4 <main+0x4b0>
    39e2:	5b c1       	rjmp	.+694    	; 0x3c9a <main+0x766>
    39e4:	fe 01       	movw	r30, r28
    39e6:	e9 58       	subi	r30, 0x89	; 137
    39e8:	ff 4f       	sbci	r31, 0xFF	; 255
    39ea:	82 81       	ldd	r24, Z+2	; 0x02
    39ec:	83 33       	cpi	r24, 0x33	; 51
    39ee:	09 f0       	breq	.+2      	; 0x39f2 <main+0x4be>
    39f0:	54 c1       	rjmp	.+680    	; 0x3c9a <main+0x766>
    39f2:	fe 01       	movw	r30, r28
    39f4:	e9 58       	subi	r30, 0x89	; 137
    39f6:	ff 4f       	sbci	r31, 0xFF	; 255
    39f8:	83 81       	ldd	r24, Z+3	; 0x03
    39fa:	84 33       	cpi	r24, 0x34	; 52
    39fc:	09 f0       	breq	.+2      	; 0x3a00 <main+0x4cc>
    39fe:	4d c1       	rjmp	.+666    	; 0x3c9a <main+0x766>
					// Display Message on LCD The Password Correct
					CLCD_WriteString("Success :) ");
    3a00:	8a e7       	ldi	r24, 0x7A	; 122
    3a02:	90 e0       	ldi	r25, 0x00	; 0
    3a04:	0e 94 c7 18 	call	0x318e	; 0x318e <CLCD_WriteString>
					CLCD_VoidGoToXY(0, 1);
    3a08:	80 e0       	ldi	r24, 0x00	; 0
    3a0a:	61 e0       	ldi	r22, 0x01	; 1
    3a0c:	0e 94 f0 18 	call	0x31e0	; 0x31e0 <CLCD_VoidGoToXY>
					CLCD_WriteString("System Opening....");
    3a10:	86 e8       	ldi	r24, 0x86	; 134
    3a12:	90 e0       	ldi	r25, 0x00	; 0
    3a14:	0e 94 c7 18 	call	0x318e	; 0x318e <CLCD_WriteString>
    3a18:	fe 01       	movw	r30, r28
    3a1a:	ef 5a       	subi	r30, 0xAF	; 175
    3a1c:	ff 4f       	sbci	r31, 0xFF	; 255
    3a1e:	80 e0       	ldi	r24, 0x00	; 0
    3a20:	90 e0       	ldi	r25, 0x00	; 0
    3a22:	a8 ec       	ldi	r26, 0xC8	; 200
    3a24:	b2 e4       	ldi	r27, 0x42	; 66
    3a26:	80 83       	st	Z, r24
    3a28:	91 83       	std	Z+1, r25	; 0x01
    3a2a:	a2 83       	std	Z+2, r26	; 0x02
    3a2c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3a2e:	8e 01       	movw	r16, r28
    3a30:	03 5b       	subi	r16, 0xB3	; 179
    3a32:	1f 4f       	sbci	r17, 0xFF	; 255
    3a34:	fe 01       	movw	r30, r28
    3a36:	ef 5a       	subi	r30, 0xAF	; 175
    3a38:	ff 4f       	sbci	r31, 0xFF	; 255
    3a3a:	60 81       	ld	r22, Z
    3a3c:	71 81       	ldd	r23, Z+1	; 0x01
    3a3e:	82 81       	ldd	r24, Z+2	; 0x02
    3a40:	93 81       	ldd	r25, Z+3	; 0x03
    3a42:	20 e0       	ldi	r18, 0x00	; 0
    3a44:	30 e0       	ldi	r19, 0x00	; 0
    3a46:	4a ef       	ldi	r20, 0xFA	; 250
    3a48:	54 e4       	ldi	r21, 0x44	; 68
    3a4a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a4e:	dc 01       	movw	r26, r24
    3a50:	cb 01       	movw	r24, r22
    3a52:	f8 01       	movw	r30, r16
    3a54:	80 83       	st	Z, r24
    3a56:	91 83       	std	Z+1, r25	; 0x01
    3a58:	a2 83       	std	Z+2, r26	; 0x02
    3a5a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3a5c:	fe 01       	movw	r30, r28
    3a5e:	e3 5b       	subi	r30, 0xB3	; 179
    3a60:	ff 4f       	sbci	r31, 0xFF	; 255
    3a62:	60 81       	ld	r22, Z
    3a64:	71 81       	ldd	r23, Z+1	; 0x01
    3a66:	82 81       	ldd	r24, Z+2	; 0x02
    3a68:	93 81       	ldd	r25, Z+3	; 0x03
    3a6a:	20 e0       	ldi	r18, 0x00	; 0
    3a6c:	30 e0       	ldi	r19, 0x00	; 0
    3a6e:	40 e8       	ldi	r20, 0x80	; 128
    3a70:	5f e3       	ldi	r21, 0x3F	; 63
    3a72:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3a76:	88 23       	and	r24, r24
    3a78:	44 f4       	brge	.+16     	; 0x3a8a <main+0x556>
		__ticks = 1;
    3a7a:	fe 01       	movw	r30, r28
    3a7c:	e5 5b       	subi	r30, 0xB5	; 181
    3a7e:	ff 4f       	sbci	r31, 0xFF	; 255
    3a80:	81 e0       	ldi	r24, 0x01	; 1
    3a82:	90 e0       	ldi	r25, 0x00	; 0
    3a84:	91 83       	std	Z+1, r25	; 0x01
    3a86:	80 83       	st	Z, r24
    3a88:	64 c0       	rjmp	.+200    	; 0x3b52 <main+0x61e>
	else if (__tmp > 65535)
    3a8a:	fe 01       	movw	r30, r28
    3a8c:	e3 5b       	subi	r30, 0xB3	; 179
    3a8e:	ff 4f       	sbci	r31, 0xFF	; 255
    3a90:	60 81       	ld	r22, Z
    3a92:	71 81       	ldd	r23, Z+1	; 0x01
    3a94:	82 81       	ldd	r24, Z+2	; 0x02
    3a96:	93 81       	ldd	r25, Z+3	; 0x03
    3a98:	20 e0       	ldi	r18, 0x00	; 0
    3a9a:	3f ef       	ldi	r19, 0xFF	; 255
    3a9c:	4f e7       	ldi	r20, 0x7F	; 127
    3a9e:	57 e4       	ldi	r21, 0x47	; 71
    3aa0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3aa4:	18 16       	cp	r1, r24
    3aa6:	0c f0       	brlt	.+2      	; 0x3aaa <main+0x576>
    3aa8:	43 c0       	rjmp	.+134    	; 0x3b30 <main+0x5fc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3aaa:	fe 01       	movw	r30, r28
    3aac:	ef 5a       	subi	r30, 0xAF	; 175
    3aae:	ff 4f       	sbci	r31, 0xFF	; 255
    3ab0:	60 81       	ld	r22, Z
    3ab2:	71 81       	ldd	r23, Z+1	; 0x01
    3ab4:	82 81       	ldd	r24, Z+2	; 0x02
    3ab6:	93 81       	ldd	r25, Z+3	; 0x03
    3ab8:	20 e0       	ldi	r18, 0x00	; 0
    3aba:	30 e0       	ldi	r19, 0x00	; 0
    3abc:	40 e2       	ldi	r20, 0x20	; 32
    3abe:	51 e4       	ldi	r21, 0x41	; 65
    3ac0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ac4:	dc 01       	movw	r26, r24
    3ac6:	cb 01       	movw	r24, r22
    3ac8:	8e 01       	movw	r16, r28
    3aca:	05 5b       	subi	r16, 0xB5	; 181
    3acc:	1f 4f       	sbci	r17, 0xFF	; 255
    3ace:	bc 01       	movw	r22, r24
    3ad0:	cd 01       	movw	r24, r26
    3ad2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ad6:	dc 01       	movw	r26, r24
    3ad8:	cb 01       	movw	r24, r22
    3ada:	f8 01       	movw	r30, r16
    3adc:	91 83       	std	Z+1, r25	; 0x01
    3ade:	80 83       	st	Z, r24
    3ae0:	1f c0       	rjmp	.+62     	; 0x3b20 <main+0x5ec>
    3ae2:	fe 01       	movw	r30, r28
    3ae4:	e7 5b       	subi	r30, 0xB7	; 183
    3ae6:	ff 4f       	sbci	r31, 0xFF	; 255
    3ae8:	88 ec       	ldi	r24, 0xC8	; 200
    3aea:	90 e0       	ldi	r25, 0x00	; 0
    3aec:	91 83       	std	Z+1, r25	; 0x01
    3aee:	80 83       	st	Z, r24
    3af0:	fe 01       	movw	r30, r28
    3af2:	e7 5b       	subi	r30, 0xB7	; 183
    3af4:	ff 4f       	sbci	r31, 0xFF	; 255
    3af6:	80 81       	ld	r24, Z
    3af8:	91 81       	ldd	r25, Z+1	; 0x01
    3afa:	01 97       	sbiw	r24, 0x01	; 1
    3afc:	f1 f7       	brne	.-4      	; 0x3afa <main+0x5c6>
    3afe:	fe 01       	movw	r30, r28
    3b00:	e7 5b       	subi	r30, 0xB7	; 183
    3b02:	ff 4f       	sbci	r31, 0xFF	; 255
    3b04:	91 83       	std	Z+1, r25	; 0x01
    3b06:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3b08:	de 01       	movw	r26, r28
    3b0a:	a5 5b       	subi	r26, 0xB5	; 181
    3b0c:	bf 4f       	sbci	r27, 0xFF	; 255
    3b0e:	fe 01       	movw	r30, r28
    3b10:	e5 5b       	subi	r30, 0xB5	; 181
    3b12:	ff 4f       	sbci	r31, 0xFF	; 255
    3b14:	80 81       	ld	r24, Z
    3b16:	91 81       	ldd	r25, Z+1	; 0x01
    3b18:	01 97       	sbiw	r24, 0x01	; 1
    3b1a:	11 96       	adiw	r26, 0x01	; 1
    3b1c:	9c 93       	st	X, r25
    3b1e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3b20:	fe 01       	movw	r30, r28
    3b22:	e5 5b       	subi	r30, 0xB5	; 181
    3b24:	ff 4f       	sbci	r31, 0xFF	; 255
    3b26:	80 81       	ld	r24, Z
    3b28:	91 81       	ldd	r25, Z+1	; 0x01
    3b2a:	00 97       	sbiw	r24, 0x00	; 0
    3b2c:	d1 f6       	brne	.-76     	; 0x3ae2 <main+0x5ae>
    3b2e:	27 c0       	rjmp	.+78     	; 0x3b7e <main+0x64a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3b30:	8e 01       	movw	r16, r28
    3b32:	05 5b       	subi	r16, 0xB5	; 181
    3b34:	1f 4f       	sbci	r17, 0xFF	; 255
    3b36:	fe 01       	movw	r30, r28
    3b38:	e3 5b       	subi	r30, 0xB3	; 179
    3b3a:	ff 4f       	sbci	r31, 0xFF	; 255
    3b3c:	60 81       	ld	r22, Z
    3b3e:	71 81       	ldd	r23, Z+1	; 0x01
    3b40:	82 81       	ldd	r24, Z+2	; 0x02
    3b42:	93 81       	ldd	r25, Z+3	; 0x03
    3b44:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b48:	dc 01       	movw	r26, r24
    3b4a:	cb 01       	movw	r24, r22
    3b4c:	f8 01       	movw	r30, r16
    3b4e:	91 83       	std	Z+1, r25	; 0x01
    3b50:	80 83       	st	Z, r24
    3b52:	de 01       	movw	r26, r28
    3b54:	a9 5b       	subi	r26, 0xB9	; 185
    3b56:	bf 4f       	sbci	r27, 0xFF	; 255
    3b58:	fe 01       	movw	r30, r28
    3b5a:	e5 5b       	subi	r30, 0xB5	; 181
    3b5c:	ff 4f       	sbci	r31, 0xFF	; 255
    3b5e:	80 81       	ld	r24, Z
    3b60:	91 81       	ldd	r25, Z+1	; 0x01
    3b62:	8d 93       	st	X+, r24
    3b64:	9c 93       	st	X, r25
    3b66:	fe 01       	movw	r30, r28
    3b68:	e9 5b       	subi	r30, 0xB9	; 185
    3b6a:	ff 4f       	sbci	r31, 0xFF	; 255
    3b6c:	80 81       	ld	r24, Z
    3b6e:	91 81       	ldd	r25, Z+1	; 0x01
    3b70:	01 97       	sbiw	r24, 0x01	; 1
    3b72:	f1 f7       	brne	.-4      	; 0x3b70 <main+0x63c>
    3b74:	fe 01       	movw	r30, r28
    3b76:	e9 5b       	subi	r30, 0xB9	; 185
    3b78:	ff 4f       	sbci	r31, 0xFF	; 255
    3b7a:	91 83       	std	Z+1, r25	; 0x01
    3b7c:	80 83       	st	Z, r24
					_delay_ms(100);
					CLCD_Clear();
    3b7e:	0e 94 f9 16 	call	0x2df2	; 0x2df2 <CLCD_Clear>
					CLCD_WriteString("Door Opened");
    3b82:	89 e9       	ldi	r24, 0x99	; 153
    3b84:	90 e0       	ldi	r25, 0x00	; 0
    3b86:	0e 94 c7 18 	call	0x318e	; 0x318e <CLCD_WriteString>
    3b8a:	fe 01       	movw	r30, r28
    3b8c:	ed 5b       	subi	r30, 0xBD	; 189
    3b8e:	ff 4f       	sbci	r31, 0xFF	; 255
    3b90:	80 e0       	ldi	r24, 0x00	; 0
    3b92:	90 e0       	ldi	r25, 0x00	; 0
    3b94:	a8 ec       	ldi	r26, 0xC8	; 200
    3b96:	b2 e4       	ldi	r27, 0x42	; 66
    3b98:	80 83       	st	Z, r24
    3b9a:	91 83       	std	Z+1, r25	; 0x01
    3b9c:	a2 83       	std	Z+2, r26	; 0x02
    3b9e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3ba0:	8e 01       	movw	r16, r28
    3ba2:	01 5c       	subi	r16, 0xC1	; 193
    3ba4:	1f 4f       	sbci	r17, 0xFF	; 255
    3ba6:	fe 01       	movw	r30, r28
    3ba8:	ed 5b       	subi	r30, 0xBD	; 189
    3baa:	ff 4f       	sbci	r31, 0xFF	; 255
    3bac:	60 81       	ld	r22, Z
    3bae:	71 81       	ldd	r23, Z+1	; 0x01
    3bb0:	82 81       	ldd	r24, Z+2	; 0x02
    3bb2:	93 81       	ldd	r25, Z+3	; 0x03
    3bb4:	20 e0       	ldi	r18, 0x00	; 0
    3bb6:	30 e0       	ldi	r19, 0x00	; 0
    3bb8:	4a ef       	ldi	r20, 0xFA	; 250
    3bba:	54 e4       	ldi	r21, 0x44	; 68
    3bbc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3bc0:	dc 01       	movw	r26, r24
    3bc2:	cb 01       	movw	r24, r22
    3bc4:	f8 01       	movw	r30, r16
    3bc6:	80 83       	st	Z, r24
    3bc8:	91 83       	std	Z+1, r25	; 0x01
    3bca:	a2 83       	std	Z+2, r26	; 0x02
    3bcc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3bce:	fe 01       	movw	r30, r28
    3bd0:	ff 96       	adiw	r30, 0x3f	; 63
    3bd2:	60 81       	ld	r22, Z
    3bd4:	71 81       	ldd	r23, Z+1	; 0x01
    3bd6:	82 81       	ldd	r24, Z+2	; 0x02
    3bd8:	93 81       	ldd	r25, Z+3	; 0x03
    3bda:	20 e0       	ldi	r18, 0x00	; 0
    3bdc:	30 e0       	ldi	r19, 0x00	; 0
    3bde:	40 e8       	ldi	r20, 0x80	; 128
    3be0:	5f e3       	ldi	r21, 0x3F	; 63
    3be2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3be6:	88 23       	and	r24, r24
    3be8:	2c f4       	brge	.+10     	; 0x3bf4 <main+0x6c0>
		__ticks = 1;
    3bea:	81 e0       	ldi	r24, 0x01	; 1
    3bec:	90 e0       	ldi	r25, 0x00	; 0
    3bee:	9e af       	std	Y+62, r25	; 0x3e
    3bf0:	8d af       	std	Y+61, r24	; 0x3d
    3bf2:	46 c0       	rjmp	.+140    	; 0x3c80 <main+0x74c>
	else if (__tmp > 65535)
    3bf4:	fe 01       	movw	r30, r28
    3bf6:	ff 96       	adiw	r30, 0x3f	; 63
    3bf8:	60 81       	ld	r22, Z
    3bfa:	71 81       	ldd	r23, Z+1	; 0x01
    3bfc:	82 81       	ldd	r24, Z+2	; 0x02
    3bfe:	93 81       	ldd	r25, Z+3	; 0x03
    3c00:	20 e0       	ldi	r18, 0x00	; 0
    3c02:	3f ef       	ldi	r19, 0xFF	; 255
    3c04:	4f e7       	ldi	r20, 0x7F	; 127
    3c06:	57 e4       	ldi	r21, 0x47	; 71
    3c08:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3c0c:	18 16       	cp	r1, r24
    3c0e:	64 f5       	brge	.+88     	; 0x3c68 <main+0x734>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3c10:	fe 01       	movw	r30, r28
    3c12:	ed 5b       	subi	r30, 0xBD	; 189
    3c14:	ff 4f       	sbci	r31, 0xFF	; 255
    3c16:	60 81       	ld	r22, Z
    3c18:	71 81       	ldd	r23, Z+1	; 0x01
    3c1a:	82 81       	ldd	r24, Z+2	; 0x02
    3c1c:	93 81       	ldd	r25, Z+3	; 0x03
    3c1e:	20 e0       	ldi	r18, 0x00	; 0
    3c20:	30 e0       	ldi	r19, 0x00	; 0
    3c22:	40 e2       	ldi	r20, 0x20	; 32
    3c24:	51 e4       	ldi	r21, 0x41	; 65
    3c26:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c2a:	dc 01       	movw	r26, r24
    3c2c:	cb 01       	movw	r24, r22
    3c2e:	bc 01       	movw	r22, r24
    3c30:	cd 01       	movw	r24, r26
    3c32:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c36:	dc 01       	movw	r26, r24
    3c38:	cb 01       	movw	r24, r22
    3c3a:	9e af       	std	Y+62, r25	; 0x3e
    3c3c:	8d af       	std	Y+61, r24	; 0x3d
    3c3e:	0f c0       	rjmp	.+30     	; 0x3c5e <main+0x72a>
    3c40:	88 ec       	ldi	r24, 0xC8	; 200
    3c42:	90 e0       	ldi	r25, 0x00	; 0
    3c44:	9c af       	std	Y+60, r25	; 0x3c
    3c46:	8b af       	std	Y+59, r24	; 0x3b
    3c48:	8b ad       	ldd	r24, Y+59	; 0x3b
    3c4a:	9c ad       	ldd	r25, Y+60	; 0x3c
    3c4c:	01 97       	sbiw	r24, 0x01	; 1
    3c4e:	f1 f7       	brne	.-4      	; 0x3c4c <main+0x718>
    3c50:	9c af       	std	Y+60, r25	; 0x3c
    3c52:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3c54:	8d ad       	ldd	r24, Y+61	; 0x3d
    3c56:	9e ad       	ldd	r25, Y+62	; 0x3e
    3c58:	01 97       	sbiw	r24, 0x01	; 1
    3c5a:	9e af       	std	Y+62, r25	; 0x3e
    3c5c:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3c5e:	8d ad       	ldd	r24, Y+61	; 0x3d
    3c60:	9e ad       	ldd	r25, Y+62	; 0x3e
    3c62:	00 97       	sbiw	r24, 0x00	; 0
    3c64:	69 f7       	brne	.-38     	; 0x3c40 <main+0x70c>
    3c66:	16 c0       	rjmp	.+44     	; 0x3c94 <main+0x760>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3c68:	fe 01       	movw	r30, r28
    3c6a:	ff 96       	adiw	r30, 0x3f	; 63
    3c6c:	60 81       	ld	r22, Z
    3c6e:	71 81       	ldd	r23, Z+1	; 0x01
    3c70:	82 81       	ldd	r24, Z+2	; 0x02
    3c72:	93 81       	ldd	r25, Z+3	; 0x03
    3c74:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c78:	dc 01       	movw	r26, r24
    3c7a:	cb 01       	movw	r24, r22
    3c7c:	9e af       	std	Y+62, r25	; 0x3e
    3c7e:	8d af       	std	Y+61, r24	; 0x3d
    3c80:	8d ad       	ldd	r24, Y+61	; 0x3d
    3c82:	9e ad       	ldd	r25, Y+62	; 0x3e
    3c84:	9a af       	std	Y+58, r25	; 0x3a
    3c86:	89 af       	std	Y+57, r24	; 0x39
    3c88:	89 ad       	ldd	r24, Y+57	; 0x39
    3c8a:	9a ad       	ldd	r25, Y+58	; 0x3a
    3c8c:	01 97       	sbiw	r24, 0x01	; 1
    3c8e:	f1 f7       	brne	.-4      	; 0x3c8c <main+0x758>
    3c90:	9a af       	std	Y+58, r25	; 0x3a
    3c92:	89 af       	std	Y+57, r24	; 0x39
					_delay_ms(100);
					CLCD_Clear();
    3c94:	0e 94 f9 16 	call	0x2df2	; 0x2df2 <CLCD_Clear>
    3c98:	9f c1       	rjmp	.+830    	; 0x3fd8 <main+0xaa4>
					break;
				}else{
					// Display Message on LCD The Password Wrong
					CLCD_WriteString("Wrong :( ");
    3c9a:	85 ea       	ldi	r24, 0xA5	; 165
    3c9c:	90 e0       	ldi	r25, 0x00	; 0
    3c9e:	0e 94 c7 18 	call	0x318e	; 0x318e <CLCD_WriteString>
    3ca2:	80 e0       	ldi	r24, 0x00	; 0
    3ca4:	90 e0       	ldi	r25, 0x00	; 0
    3ca6:	a8 ec       	ldi	r26, 0xC8	; 200
    3ca8:	b2 e4       	ldi	r27, 0x42	; 66
    3caa:	8d ab       	std	Y+53, r24	; 0x35
    3cac:	9e ab       	std	Y+54, r25	; 0x36
    3cae:	af ab       	std	Y+55, r26	; 0x37
    3cb0:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3cb2:	6d a9       	ldd	r22, Y+53	; 0x35
    3cb4:	7e a9       	ldd	r23, Y+54	; 0x36
    3cb6:	8f a9       	ldd	r24, Y+55	; 0x37
    3cb8:	98 ad       	ldd	r25, Y+56	; 0x38
    3cba:	20 e0       	ldi	r18, 0x00	; 0
    3cbc:	30 e0       	ldi	r19, 0x00	; 0
    3cbe:	4a ef       	ldi	r20, 0xFA	; 250
    3cc0:	54 e4       	ldi	r21, 0x44	; 68
    3cc2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3cc6:	dc 01       	movw	r26, r24
    3cc8:	cb 01       	movw	r24, r22
    3cca:	89 ab       	std	Y+49, r24	; 0x31
    3ccc:	9a ab       	std	Y+50, r25	; 0x32
    3cce:	ab ab       	std	Y+51, r26	; 0x33
    3cd0:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3cd2:	69 a9       	ldd	r22, Y+49	; 0x31
    3cd4:	7a a9       	ldd	r23, Y+50	; 0x32
    3cd6:	8b a9       	ldd	r24, Y+51	; 0x33
    3cd8:	9c a9       	ldd	r25, Y+52	; 0x34
    3cda:	20 e0       	ldi	r18, 0x00	; 0
    3cdc:	30 e0       	ldi	r19, 0x00	; 0
    3cde:	40 e8       	ldi	r20, 0x80	; 128
    3ce0:	5f e3       	ldi	r21, 0x3F	; 63
    3ce2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3ce6:	88 23       	and	r24, r24
    3ce8:	2c f4       	brge	.+10     	; 0x3cf4 <main+0x7c0>
		__ticks = 1;
    3cea:	81 e0       	ldi	r24, 0x01	; 1
    3cec:	90 e0       	ldi	r25, 0x00	; 0
    3cee:	98 ab       	std	Y+48, r25	; 0x30
    3cf0:	8f a7       	std	Y+47, r24	; 0x2f
    3cf2:	3f c0       	rjmp	.+126    	; 0x3d72 <main+0x83e>
	else if (__tmp > 65535)
    3cf4:	69 a9       	ldd	r22, Y+49	; 0x31
    3cf6:	7a a9       	ldd	r23, Y+50	; 0x32
    3cf8:	8b a9       	ldd	r24, Y+51	; 0x33
    3cfa:	9c a9       	ldd	r25, Y+52	; 0x34
    3cfc:	20 e0       	ldi	r18, 0x00	; 0
    3cfe:	3f ef       	ldi	r19, 0xFF	; 255
    3d00:	4f e7       	ldi	r20, 0x7F	; 127
    3d02:	57 e4       	ldi	r21, 0x47	; 71
    3d04:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3d08:	18 16       	cp	r1, r24
    3d0a:	4c f5       	brge	.+82     	; 0x3d5e <main+0x82a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3d0c:	6d a9       	ldd	r22, Y+53	; 0x35
    3d0e:	7e a9       	ldd	r23, Y+54	; 0x36
    3d10:	8f a9       	ldd	r24, Y+55	; 0x37
    3d12:	98 ad       	ldd	r25, Y+56	; 0x38
    3d14:	20 e0       	ldi	r18, 0x00	; 0
    3d16:	30 e0       	ldi	r19, 0x00	; 0
    3d18:	40 e2       	ldi	r20, 0x20	; 32
    3d1a:	51 e4       	ldi	r21, 0x41	; 65
    3d1c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d20:	dc 01       	movw	r26, r24
    3d22:	cb 01       	movw	r24, r22
    3d24:	bc 01       	movw	r22, r24
    3d26:	cd 01       	movw	r24, r26
    3d28:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d2c:	dc 01       	movw	r26, r24
    3d2e:	cb 01       	movw	r24, r22
    3d30:	98 ab       	std	Y+48, r25	; 0x30
    3d32:	8f a7       	std	Y+47, r24	; 0x2f
    3d34:	0f c0       	rjmp	.+30     	; 0x3d54 <main+0x820>
    3d36:	88 ec       	ldi	r24, 0xC8	; 200
    3d38:	90 e0       	ldi	r25, 0x00	; 0
    3d3a:	9e a7       	std	Y+46, r25	; 0x2e
    3d3c:	8d a7       	std	Y+45, r24	; 0x2d
    3d3e:	8d a5       	ldd	r24, Y+45	; 0x2d
    3d40:	9e a5       	ldd	r25, Y+46	; 0x2e
    3d42:	01 97       	sbiw	r24, 0x01	; 1
    3d44:	f1 f7       	brne	.-4      	; 0x3d42 <main+0x80e>
    3d46:	9e a7       	std	Y+46, r25	; 0x2e
    3d48:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3d4a:	8f a5       	ldd	r24, Y+47	; 0x2f
    3d4c:	98 a9       	ldd	r25, Y+48	; 0x30
    3d4e:	01 97       	sbiw	r24, 0x01	; 1
    3d50:	98 ab       	std	Y+48, r25	; 0x30
    3d52:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3d54:	8f a5       	ldd	r24, Y+47	; 0x2f
    3d56:	98 a9       	ldd	r25, Y+48	; 0x30
    3d58:	00 97       	sbiw	r24, 0x00	; 0
    3d5a:	69 f7       	brne	.-38     	; 0x3d36 <main+0x802>
    3d5c:	14 c0       	rjmp	.+40     	; 0x3d86 <main+0x852>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3d5e:	69 a9       	ldd	r22, Y+49	; 0x31
    3d60:	7a a9       	ldd	r23, Y+50	; 0x32
    3d62:	8b a9       	ldd	r24, Y+51	; 0x33
    3d64:	9c a9       	ldd	r25, Y+52	; 0x34
    3d66:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d6a:	dc 01       	movw	r26, r24
    3d6c:	cb 01       	movw	r24, r22
    3d6e:	98 ab       	std	Y+48, r25	; 0x30
    3d70:	8f a7       	std	Y+47, r24	; 0x2f
    3d72:	8f a5       	ldd	r24, Y+47	; 0x2f
    3d74:	98 a9       	ldd	r25, Y+48	; 0x30
    3d76:	9c a7       	std	Y+44, r25	; 0x2c
    3d78:	8b a7       	std	Y+43, r24	; 0x2b
    3d7a:	8b a5       	ldd	r24, Y+43	; 0x2b
    3d7c:	9c a5       	ldd	r25, Y+44	; 0x2c
    3d7e:	01 97       	sbiw	r24, 0x01	; 1
    3d80:	f1 f7       	brne	.-4      	; 0x3d7e <main+0x84a>
    3d82:	9c a7       	std	Y+44, r25	; 0x2c
    3d84:	8b a7       	std	Y+43, r24	; 0x2b
					_delay_ms(100);
					CLCD_Clear();
    3d86:	0e 94 f9 16 	call	0x2df2	; 0x2df2 <CLCD_Clear>

					// Close the system when WrongCounter = 0 you don't have any chance
					if(WrongCounter == 0){
    3d8a:	fe 01       	movw	r30, r28
    3d8c:	ef 58       	subi	r30, 0x8F	; 143
    3d8e:	ff 4f       	sbci	r31, 0xFF	; 255
    3d90:	80 81       	ld	r24, Z
    3d92:	91 81       	ldd	r25, Z+1	; 0x01
    3d94:	a2 81       	ldd	r26, Z+2	; 0x02
    3d96:	b3 81       	ldd	r27, Z+3	; 0x03
    3d98:	00 97       	sbiw	r24, 0x00	; 0
    3d9a:	a1 05       	cpc	r26, r1
    3d9c:	b1 05       	cpc	r27, r1
    3d9e:	09 f0       	breq	.+2      	; 0x3da2 <main+0x86e>
    3da0:	7d c0       	rjmp	.+250    	; 0x3e9c <main+0x968>
						CLCD_Clear();
    3da2:	0e 94 f9 16 	call	0x2df2	; 0x2df2 <CLCD_Clear>
						CLCD_WriteString("System Closing....");
    3da6:	8f ea       	ldi	r24, 0xAF	; 175
    3da8:	90 e0       	ldi	r25, 0x00	; 0
    3daa:	0e 94 c7 18 	call	0x318e	; 0x318e <CLCD_WriteString>
    3dae:	80 e0       	ldi	r24, 0x00	; 0
    3db0:	90 e0       	ldi	r25, 0x00	; 0
    3db2:	a8 ec       	ldi	r26, 0xC8	; 200
    3db4:	b2 e4       	ldi	r27, 0x42	; 66
    3db6:	8f a3       	std	Y+39, r24	; 0x27
    3db8:	98 a7       	std	Y+40, r25	; 0x28
    3dba:	a9 a7       	std	Y+41, r26	; 0x29
    3dbc:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3dbe:	6f a1       	ldd	r22, Y+39	; 0x27
    3dc0:	78 a5       	ldd	r23, Y+40	; 0x28
    3dc2:	89 a5       	ldd	r24, Y+41	; 0x29
    3dc4:	9a a5       	ldd	r25, Y+42	; 0x2a
    3dc6:	20 e0       	ldi	r18, 0x00	; 0
    3dc8:	30 e0       	ldi	r19, 0x00	; 0
    3dca:	4a ef       	ldi	r20, 0xFA	; 250
    3dcc:	54 e4       	ldi	r21, 0x44	; 68
    3dce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3dd2:	dc 01       	movw	r26, r24
    3dd4:	cb 01       	movw	r24, r22
    3dd6:	8b a3       	std	Y+35, r24	; 0x23
    3dd8:	9c a3       	std	Y+36, r25	; 0x24
    3dda:	ad a3       	std	Y+37, r26	; 0x25
    3ddc:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3dde:	6b a1       	ldd	r22, Y+35	; 0x23
    3de0:	7c a1       	ldd	r23, Y+36	; 0x24
    3de2:	8d a1       	ldd	r24, Y+37	; 0x25
    3de4:	9e a1       	ldd	r25, Y+38	; 0x26
    3de6:	20 e0       	ldi	r18, 0x00	; 0
    3de8:	30 e0       	ldi	r19, 0x00	; 0
    3dea:	40 e8       	ldi	r20, 0x80	; 128
    3dec:	5f e3       	ldi	r21, 0x3F	; 63
    3dee:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3df2:	88 23       	and	r24, r24
    3df4:	2c f4       	brge	.+10     	; 0x3e00 <main+0x8cc>
		__ticks = 1;
    3df6:	81 e0       	ldi	r24, 0x01	; 1
    3df8:	90 e0       	ldi	r25, 0x00	; 0
    3dfa:	9a a3       	std	Y+34, r25	; 0x22
    3dfc:	89 a3       	std	Y+33, r24	; 0x21
    3dfe:	3f c0       	rjmp	.+126    	; 0x3e7e <main+0x94a>
	else if (__tmp > 65535)
    3e00:	6b a1       	ldd	r22, Y+35	; 0x23
    3e02:	7c a1       	ldd	r23, Y+36	; 0x24
    3e04:	8d a1       	ldd	r24, Y+37	; 0x25
    3e06:	9e a1       	ldd	r25, Y+38	; 0x26
    3e08:	20 e0       	ldi	r18, 0x00	; 0
    3e0a:	3f ef       	ldi	r19, 0xFF	; 255
    3e0c:	4f e7       	ldi	r20, 0x7F	; 127
    3e0e:	57 e4       	ldi	r21, 0x47	; 71
    3e10:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3e14:	18 16       	cp	r1, r24
    3e16:	4c f5       	brge	.+82     	; 0x3e6a <main+0x936>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3e18:	6f a1       	ldd	r22, Y+39	; 0x27
    3e1a:	78 a5       	ldd	r23, Y+40	; 0x28
    3e1c:	89 a5       	ldd	r24, Y+41	; 0x29
    3e1e:	9a a5       	ldd	r25, Y+42	; 0x2a
    3e20:	20 e0       	ldi	r18, 0x00	; 0
    3e22:	30 e0       	ldi	r19, 0x00	; 0
    3e24:	40 e2       	ldi	r20, 0x20	; 32
    3e26:	51 e4       	ldi	r21, 0x41	; 65
    3e28:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e2c:	dc 01       	movw	r26, r24
    3e2e:	cb 01       	movw	r24, r22
    3e30:	bc 01       	movw	r22, r24
    3e32:	cd 01       	movw	r24, r26
    3e34:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e38:	dc 01       	movw	r26, r24
    3e3a:	cb 01       	movw	r24, r22
    3e3c:	9a a3       	std	Y+34, r25	; 0x22
    3e3e:	89 a3       	std	Y+33, r24	; 0x21
    3e40:	0f c0       	rjmp	.+30     	; 0x3e60 <main+0x92c>
    3e42:	88 ec       	ldi	r24, 0xC8	; 200
    3e44:	90 e0       	ldi	r25, 0x00	; 0
    3e46:	98 a3       	std	Y+32, r25	; 0x20
    3e48:	8f 8f       	std	Y+31, r24	; 0x1f
    3e4a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3e4c:	98 a1       	ldd	r25, Y+32	; 0x20
    3e4e:	01 97       	sbiw	r24, 0x01	; 1
    3e50:	f1 f7       	brne	.-4      	; 0x3e4e <main+0x91a>
    3e52:	98 a3       	std	Y+32, r25	; 0x20
    3e54:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3e56:	89 a1       	ldd	r24, Y+33	; 0x21
    3e58:	9a a1       	ldd	r25, Y+34	; 0x22
    3e5a:	01 97       	sbiw	r24, 0x01	; 1
    3e5c:	9a a3       	std	Y+34, r25	; 0x22
    3e5e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3e60:	89 a1       	ldd	r24, Y+33	; 0x21
    3e62:	9a a1       	ldd	r25, Y+34	; 0x22
    3e64:	00 97       	sbiw	r24, 0x00	; 0
    3e66:	69 f7       	brne	.-38     	; 0x3e42 <main+0x90e>
    3e68:	14 c0       	rjmp	.+40     	; 0x3e92 <main+0x95e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3e6a:	6b a1       	ldd	r22, Y+35	; 0x23
    3e6c:	7c a1       	ldd	r23, Y+36	; 0x24
    3e6e:	8d a1       	ldd	r24, Y+37	; 0x25
    3e70:	9e a1       	ldd	r25, Y+38	; 0x26
    3e72:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e76:	dc 01       	movw	r26, r24
    3e78:	cb 01       	movw	r24, r22
    3e7a:	9a a3       	std	Y+34, r25	; 0x22
    3e7c:	89 a3       	std	Y+33, r24	; 0x21
    3e7e:	89 a1       	ldd	r24, Y+33	; 0x21
    3e80:	9a a1       	ldd	r25, Y+34	; 0x22
    3e82:	9e 8f       	std	Y+30, r25	; 0x1e
    3e84:	8d 8f       	std	Y+29, r24	; 0x1d
    3e86:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3e88:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3e8a:	01 97       	sbiw	r24, 0x01	; 1
    3e8c:	f1 f7       	brne	.-4      	; 0x3e8a <main+0x956>
    3e8e:	9e 8f       	std	Y+30, r25	; 0x1e
    3e90:	8d 8f       	std	Y+29, r24	; 0x1d
						_delay_ms(100);
						index=0;
    3e92:	fe 01       	movw	r30, r28
    3e94:	eb 58       	subi	r30, 0x8B	; 139
    3e96:	ff 4f       	sbci	r31, 0xFF	; 255
    3e98:	10 82       	st	Z, r1
    3e9a:	9e c0       	rjmp	.+316    	; 0x3fd8 <main+0xaa4>
						break;
					}
					CLCD_WriteString("Try Again ");
    3e9c:	82 ec       	ldi	r24, 0xC2	; 194
    3e9e:	90 e0       	ldi	r25, 0x00	; 0
    3ea0:	0e 94 c7 18 	call	0x318e	; 0x318e <CLCD_WriteString>
					CLCD_VoidGoToXY(3, 1);
    3ea4:	83 e0       	ldi	r24, 0x03	; 3
    3ea6:	61 e0       	ldi	r22, 0x01	; 1
    3ea8:	0e 94 f0 18 	call	0x31e0	; 0x31e0 <CLCD_VoidGoToXY>
					CLCD_WriteNumber(WrongCounter);
    3eac:	fe 01       	movw	r30, r28
    3eae:	ef 58       	subi	r30, 0x8F	; 143
    3eb0:	ff 4f       	sbci	r31, 0xFF	; 255
    3eb2:	80 81       	ld	r24, Z
    3eb4:	91 81       	ldd	r25, Z+1	; 0x01
    3eb6:	a2 81       	ldd	r26, Z+2	; 0x02
    3eb8:	b3 81       	ldd	r27, Z+3	; 0x03
    3eba:	bc 01       	movw	r22, r24
    3ebc:	cd 01       	movw	r24, r26
    3ebe:	0e 94 4f 19 	call	0x329e	; 0x329e <CLCD_WriteNumber>
					CLCD_WriteString(" Chance");
    3ec2:	8d ec       	ldi	r24, 0xCD	; 205
    3ec4:	90 e0       	ldi	r25, 0x00	; 0
    3ec6:	0e 94 c7 18 	call	0x318e	; 0x318e <CLCD_WriteString>
    3eca:	80 e0       	ldi	r24, 0x00	; 0
    3ecc:	90 e0       	ldi	r25, 0x00	; 0
    3ece:	a8 ec       	ldi	r26, 0xC8	; 200
    3ed0:	b2 e4       	ldi	r27, 0x42	; 66
    3ed2:	89 8f       	std	Y+25, r24	; 0x19
    3ed4:	9a 8f       	std	Y+26, r25	; 0x1a
    3ed6:	ab 8f       	std	Y+27, r26	; 0x1b
    3ed8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3eda:	69 8d       	ldd	r22, Y+25	; 0x19
    3edc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3ede:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3ee0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3ee2:	20 e0       	ldi	r18, 0x00	; 0
    3ee4:	30 e0       	ldi	r19, 0x00	; 0
    3ee6:	4a ef       	ldi	r20, 0xFA	; 250
    3ee8:	54 e4       	ldi	r21, 0x44	; 68
    3eea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3eee:	dc 01       	movw	r26, r24
    3ef0:	cb 01       	movw	r24, r22
    3ef2:	8d 8b       	std	Y+21, r24	; 0x15
    3ef4:	9e 8b       	std	Y+22, r25	; 0x16
    3ef6:	af 8b       	std	Y+23, r26	; 0x17
    3ef8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3efa:	6d 89       	ldd	r22, Y+21	; 0x15
    3efc:	7e 89       	ldd	r23, Y+22	; 0x16
    3efe:	8f 89       	ldd	r24, Y+23	; 0x17
    3f00:	98 8d       	ldd	r25, Y+24	; 0x18
    3f02:	20 e0       	ldi	r18, 0x00	; 0
    3f04:	30 e0       	ldi	r19, 0x00	; 0
    3f06:	40 e8       	ldi	r20, 0x80	; 128
    3f08:	5f e3       	ldi	r21, 0x3F	; 63
    3f0a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3f0e:	88 23       	and	r24, r24
    3f10:	2c f4       	brge	.+10     	; 0x3f1c <main+0x9e8>
		__ticks = 1;
    3f12:	81 e0       	ldi	r24, 0x01	; 1
    3f14:	90 e0       	ldi	r25, 0x00	; 0
    3f16:	9c 8b       	std	Y+20, r25	; 0x14
    3f18:	8b 8b       	std	Y+19, r24	; 0x13
    3f1a:	3f c0       	rjmp	.+126    	; 0x3f9a <main+0xa66>
	else if (__tmp > 65535)
    3f1c:	6d 89       	ldd	r22, Y+21	; 0x15
    3f1e:	7e 89       	ldd	r23, Y+22	; 0x16
    3f20:	8f 89       	ldd	r24, Y+23	; 0x17
    3f22:	98 8d       	ldd	r25, Y+24	; 0x18
    3f24:	20 e0       	ldi	r18, 0x00	; 0
    3f26:	3f ef       	ldi	r19, 0xFF	; 255
    3f28:	4f e7       	ldi	r20, 0x7F	; 127
    3f2a:	57 e4       	ldi	r21, 0x47	; 71
    3f2c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3f30:	18 16       	cp	r1, r24
    3f32:	4c f5       	brge	.+82     	; 0x3f86 <main+0xa52>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3f34:	69 8d       	ldd	r22, Y+25	; 0x19
    3f36:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3f38:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3f3a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3f3c:	20 e0       	ldi	r18, 0x00	; 0
    3f3e:	30 e0       	ldi	r19, 0x00	; 0
    3f40:	40 e2       	ldi	r20, 0x20	; 32
    3f42:	51 e4       	ldi	r21, 0x41	; 65
    3f44:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f48:	dc 01       	movw	r26, r24
    3f4a:	cb 01       	movw	r24, r22
    3f4c:	bc 01       	movw	r22, r24
    3f4e:	cd 01       	movw	r24, r26
    3f50:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3f54:	dc 01       	movw	r26, r24
    3f56:	cb 01       	movw	r24, r22
    3f58:	9c 8b       	std	Y+20, r25	; 0x14
    3f5a:	8b 8b       	std	Y+19, r24	; 0x13
    3f5c:	0f c0       	rjmp	.+30     	; 0x3f7c <main+0xa48>
    3f5e:	88 ec       	ldi	r24, 0xC8	; 200
    3f60:	90 e0       	ldi	r25, 0x00	; 0
    3f62:	9a 8b       	std	Y+18, r25	; 0x12
    3f64:	89 8b       	std	Y+17, r24	; 0x11
    3f66:	89 89       	ldd	r24, Y+17	; 0x11
    3f68:	9a 89       	ldd	r25, Y+18	; 0x12
    3f6a:	01 97       	sbiw	r24, 0x01	; 1
    3f6c:	f1 f7       	brne	.-4      	; 0x3f6a <main+0xa36>
    3f6e:	9a 8b       	std	Y+18, r25	; 0x12
    3f70:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3f72:	8b 89       	ldd	r24, Y+19	; 0x13
    3f74:	9c 89       	ldd	r25, Y+20	; 0x14
    3f76:	01 97       	sbiw	r24, 0x01	; 1
    3f78:	9c 8b       	std	Y+20, r25	; 0x14
    3f7a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3f7c:	8b 89       	ldd	r24, Y+19	; 0x13
    3f7e:	9c 89       	ldd	r25, Y+20	; 0x14
    3f80:	00 97       	sbiw	r24, 0x00	; 0
    3f82:	69 f7       	brne	.-38     	; 0x3f5e <main+0xa2a>
    3f84:	14 c0       	rjmp	.+40     	; 0x3fae <main+0xa7a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3f86:	6d 89       	ldd	r22, Y+21	; 0x15
    3f88:	7e 89       	ldd	r23, Y+22	; 0x16
    3f8a:	8f 89       	ldd	r24, Y+23	; 0x17
    3f8c:	98 8d       	ldd	r25, Y+24	; 0x18
    3f8e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3f92:	dc 01       	movw	r26, r24
    3f94:	cb 01       	movw	r24, r22
    3f96:	9c 8b       	std	Y+20, r25	; 0x14
    3f98:	8b 8b       	std	Y+19, r24	; 0x13
    3f9a:	8b 89       	ldd	r24, Y+19	; 0x13
    3f9c:	9c 89       	ldd	r25, Y+20	; 0x14
    3f9e:	98 8b       	std	Y+16, r25	; 0x10
    3fa0:	8f 87       	std	Y+15, r24	; 0x0f
    3fa2:	8f 85       	ldd	r24, Y+15	; 0x0f
    3fa4:	98 89       	ldd	r25, Y+16	; 0x10
    3fa6:	01 97       	sbiw	r24, 0x01	; 1
    3fa8:	f1 f7       	brne	.-4      	; 0x3fa6 <main+0xa72>
    3faa:	98 8b       	std	Y+16, r25	; 0x10
    3fac:	8f 87       	std	Y+15, r24	; 0x0f
					_delay_ms(100);
					CLCD_Clear();
    3fae:	0e 94 f9 16 	call	0x2df2	; 0x2df2 <CLCD_Clear>
					WrongCounter--;       // decrease the counter by 1
    3fb2:	9e 01       	movw	r18, r28
    3fb4:	2f 58       	subi	r18, 0x8F	; 143
    3fb6:	3f 4f       	sbci	r19, 0xFF	; 255
    3fb8:	fe 01       	movw	r30, r28
    3fba:	ef 58       	subi	r30, 0x8F	; 143
    3fbc:	ff 4f       	sbci	r31, 0xFF	; 255
    3fbe:	80 81       	ld	r24, Z
    3fc0:	91 81       	ldd	r25, Z+1	; 0x01
    3fc2:	a2 81       	ldd	r26, Z+2	; 0x02
    3fc4:	b3 81       	ldd	r27, Z+3	; 0x03
    3fc6:	01 97       	sbiw	r24, 0x01	; 1
    3fc8:	a1 09       	sbc	r26, r1
    3fca:	b1 09       	sbc	r27, r1
    3fcc:	f9 01       	movw	r30, r18
    3fce:	80 83       	st	Z, r24
    3fd0:	91 83       	std	Z+1, r25	; 0x01
    3fd2:	a2 83       	std	Z+2, r26	; 0x02
    3fd4:	b3 83       	std	Z+3, r27	; 0x03
    3fd6:	bb cb       	rjmp	.-2186   	; 0x374e <main+0x21a>

				}
			}
			Open_Flag = 0;                // Close this mode by return the flag to 0
    3fd8:	10 92 fe 01 	sts	0x01FE, r1
			WrongCounter = 2;
    3fdc:	fe 01       	movw	r30, r28
    3fde:	ef 58       	subi	r30, 0x8F	; 143
    3fe0:	ff 4f       	sbci	r31, 0xFF	; 255
    3fe2:	82 e0       	ldi	r24, 0x02	; 2
    3fe4:	90 e0       	ldi	r25, 0x00	; 0
    3fe6:	a0 e0       	ldi	r26, 0x00	; 0
    3fe8:	b0 e0       	ldi	r27, 0x00	; 0
    3fea:	80 83       	st	Z, r24
    3fec:	91 83       	std	Z+1, r25	; 0x01
    3fee:	a2 83       	std	Z+2, r26	; 0x02
    3ff0:	b3 83       	std	Z+3, r27	; 0x03
    3ff2:	ec ca       	rjmp	.-2600   	; 0x35cc <main+0x98>
		}else{
			/* That is the LDR and temperature Mode
			 *     First MODE */
			CLCD_WriteString("First Mode");
    3ff4:	85 ed       	ldi	r24, 0xD5	; 213
    3ff6:	90 e0       	ldi	r25, 0x00	; 0
    3ff8:	0e 94 c7 18 	call	0x318e	; 0x318e <CLCD_WriteString>
    3ffc:	80 e0       	ldi	r24, 0x00	; 0
    3ffe:	90 e0       	ldi	r25, 0x00	; 0
    4000:	a8 e4       	ldi	r26, 0x48	; 72
    4002:	b2 e4       	ldi	r27, 0x42	; 66
    4004:	8b 87       	std	Y+11, r24	; 0x0b
    4006:	9c 87       	std	Y+12, r25	; 0x0c
    4008:	ad 87       	std	Y+13, r26	; 0x0d
    400a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    400c:	6b 85       	ldd	r22, Y+11	; 0x0b
    400e:	7c 85       	ldd	r23, Y+12	; 0x0c
    4010:	8d 85       	ldd	r24, Y+13	; 0x0d
    4012:	9e 85       	ldd	r25, Y+14	; 0x0e
    4014:	20 e0       	ldi	r18, 0x00	; 0
    4016:	30 e0       	ldi	r19, 0x00	; 0
    4018:	4a ef       	ldi	r20, 0xFA	; 250
    401a:	54 e4       	ldi	r21, 0x44	; 68
    401c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4020:	dc 01       	movw	r26, r24
    4022:	cb 01       	movw	r24, r22
    4024:	8f 83       	std	Y+7, r24	; 0x07
    4026:	98 87       	std	Y+8, r25	; 0x08
    4028:	a9 87       	std	Y+9, r26	; 0x09
    402a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    402c:	6f 81       	ldd	r22, Y+7	; 0x07
    402e:	78 85       	ldd	r23, Y+8	; 0x08
    4030:	89 85       	ldd	r24, Y+9	; 0x09
    4032:	9a 85       	ldd	r25, Y+10	; 0x0a
    4034:	20 e0       	ldi	r18, 0x00	; 0
    4036:	30 e0       	ldi	r19, 0x00	; 0
    4038:	40 e8       	ldi	r20, 0x80	; 128
    403a:	5f e3       	ldi	r21, 0x3F	; 63
    403c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4040:	88 23       	and	r24, r24
    4042:	2c f4       	brge	.+10     	; 0x404e <main+0xb1a>
		__ticks = 1;
    4044:	81 e0       	ldi	r24, 0x01	; 1
    4046:	90 e0       	ldi	r25, 0x00	; 0
    4048:	9e 83       	std	Y+6, r25	; 0x06
    404a:	8d 83       	std	Y+5, r24	; 0x05
    404c:	3f c0       	rjmp	.+126    	; 0x40cc <main+0xb98>
	else if (__tmp > 65535)
    404e:	6f 81       	ldd	r22, Y+7	; 0x07
    4050:	78 85       	ldd	r23, Y+8	; 0x08
    4052:	89 85       	ldd	r24, Y+9	; 0x09
    4054:	9a 85       	ldd	r25, Y+10	; 0x0a
    4056:	20 e0       	ldi	r18, 0x00	; 0
    4058:	3f ef       	ldi	r19, 0xFF	; 255
    405a:	4f e7       	ldi	r20, 0x7F	; 127
    405c:	57 e4       	ldi	r21, 0x47	; 71
    405e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4062:	18 16       	cp	r1, r24
    4064:	4c f5       	brge	.+82     	; 0x40b8 <main+0xb84>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4066:	6b 85       	ldd	r22, Y+11	; 0x0b
    4068:	7c 85       	ldd	r23, Y+12	; 0x0c
    406a:	8d 85       	ldd	r24, Y+13	; 0x0d
    406c:	9e 85       	ldd	r25, Y+14	; 0x0e
    406e:	20 e0       	ldi	r18, 0x00	; 0
    4070:	30 e0       	ldi	r19, 0x00	; 0
    4072:	40 e2       	ldi	r20, 0x20	; 32
    4074:	51 e4       	ldi	r21, 0x41	; 65
    4076:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    407a:	dc 01       	movw	r26, r24
    407c:	cb 01       	movw	r24, r22
    407e:	bc 01       	movw	r22, r24
    4080:	cd 01       	movw	r24, r26
    4082:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4086:	dc 01       	movw	r26, r24
    4088:	cb 01       	movw	r24, r22
    408a:	9e 83       	std	Y+6, r25	; 0x06
    408c:	8d 83       	std	Y+5, r24	; 0x05
    408e:	0f c0       	rjmp	.+30     	; 0x40ae <main+0xb7a>
    4090:	88 ec       	ldi	r24, 0xC8	; 200
    4092:	90 e0       	ldi	r25, 0x00	; 0
    4094:	9c 83       	std	Y+4, r25	; 0x04
    4096:	8b 83       	std	Y+3, r24	; 0x03
    4098:	8b 81       	ldd	r24, Y+3	; 0x03
    409a:	9c 81       	ldd	r25, Y+4	; 0x04
    409c:	01 97       	sbiw	r24, 0x01	; 1
    409e:	f1 f7       	brne	.-4      	; 0x409c <main+0xb68>
    40a0:	9c 83       	std	Y+4, r25	; 0x04
    40a2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    40a4:	8d 81       	ldd	r24, Y+5	; 0x05
    40a6:	9e 81       	ldd	r25, Y+6	; 0x06
    40a8:	01 97       	sbiw	r24, 0x01	; 1
    40aa:	9e 83       	std	Y+6, r25	; 0x06
    40ac:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    40ae:	8d 81       	ldd	r24, Y+5	; 0x05
    40b0:	9e 81       	ldd	r25, Y+6	; 0x06
    40b2:	00 97       	sbiw	r24, 0x00	; 0
    40b4:	69 f7       	brne	.-38     	; 0x4090 <main+0xb5c>
    40b6:	14 c0       	rjmp	.+40     	; 0x40e0 <main+0xbac>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    40b8:	6f 81       	ldd	r22, Y+7	; 0x07
    40ba:	78 85       	ldd	r23, Y+8	; 0x08
    40bc:	89 85       	ldd	r24, Y+9	; 0x09
    40be:	9a 85       	ldd	r25, Y+10	; 0x0a
    40c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    40c4:	dc 01       	movw	r26, r24
    40c6:	cb 01       	movw	r24, r22
    40c8:	9e 83       	std	Y+6, r25	; 0x06
    40ca:	8d 83       	std	Y+5, r24	; 0x05
    40cc:	8d 81       	ldd	r24, Y+5	; 0x05
    40ce:	9e 81       	ldd	r25, Y+6	; 0x06
    40d0:	9a 83       	std	Y+2, r25	; 0x02
    40d2:	89 83       	std	Y+1, r24	; 0x01
    40d4:	89 81       	ldd	r24, Y+1	; 0x01
    40d6:	9a 81       	ldd	r25, Y+2	; 0x02
    40d8:	01 97       	sbiw	r24, 0x01	; 1
    40da:	f1 f7       	brne	.-4      	; 0x40d8 <main+0xba4>
    40dc:	9a 83       	std	Y+2, r25	; 0x02
    40de:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(50);
			CLCD_Clear();
    40e0:	0e 94 f9 16 	call	0x2df2	; 0x2df2 <CLCD_Clear>
    40e4:	73 ca       	rjmp	.-2842   	; 0x35cc <main+0x98>

000040e6 <OpenSystem>:
}


// Function send to ISR for EXTI 1
// Change the flag to 1 to open the second mode
void OpenSystem(){
    40e6:	df 93       	push	r29
    40e8:	cf 93       	push	r28
    40ea:	cd b7       	in	r28, 0x3d	; 61
    40ec:	de b7       	in	r29, 0x3e	; 62
	Open_Flag = 1;
    40ee:	81 e0       	ldi	r24, 0x01	; 1
    40f0:	80 93 fe 01 	sts	0x01FE, r24
}
    40f4:	cf 91       	pop	r28
    40f6:	df 91       	pop	r29
    40f8:	08 95       	ret

000040fa <__udivmodsi4>:
    40fa:	a1 e2       	ldi	r26, 0x21	; 33
    40fc:	1a 2e       	mov	r1, r26
    40fe:	aa 1b       	sub	r26, r26
    4100:	bb 1b       	sub	r27, r27
    4102:	fd 01       	movw	r30, r26
    4104:	0d c0       	rjmp	.+26     	; 0x4120 <__udivmodsi4_ep>

00004106 <__udivmodsi4_loop>:
    4106:	aa 1f       	adc	r26, r26
    4108:	bb 1f       	adc	r27, r27
    410a:	ee 1f       	adc	r30, r30
    410c:	ff 1f       	adc	r31, r31
    410e:	a2 17       	cp	r26, r18
    4110:	b3 07       	cpc	r27, r19
    4112:	e4 07       	cpc	r30, r20
    4114:	f5 07       	cpc	r31, r21
    4116:	20 f0       	brcs	.+8      	; 0x4120 <__udivmodsi4_ep>
    4118:	a2 1b       	sub	r26, r18
    411a:	b3 0b       	sbc	r27, r19
    411c:	e4 0b       	sbc	r30, r20
    411e:	f5 0b       	sbc	r31, r21

00004120 <__udivmodsi4_ep>:
    4120:	66 1f       	adc	r22, r22
    4122:	77 1f       	adc	r23, r23
    4124:	88 1f       	adc	r24, r24
    4126:	99 1f       	adc	r25, r25
    4128:	1a 94       	dec	r1
    412a:	69 f7       	brne	.-38     	; 0x4106 <__udivmodsi4_loop>
    412c:	60 95       	com	r22
    412e:	70 95       	com	r23
    4130:	80 95       	com	r24
    4132:	90 95       	com	r25
    4134:	9b 01       	movw	r18, r22
    4136:	ac 01       	movw	r20, r24
    4138:	bd 01       	movw	r22, r26
    413a:	cf 01       	movw	r24, r30
    413c:	08 95       	ret

0000413e <__prologue_saves__>:
    413e:	2f 92       	push	r2
    4140:	3f 92       	push	r3
    4142:	4f 92       	push	r4
    4144:	5f 92       	push	r5
    4146:	6f 92       	push	r6
    4148:	7f 92       	push	r7
    414a:	8f 92       	push	r8
    414c:	9f 92       	push	r9
    414e:	af 92       	push	r10
    4150:	bf 92       	push	r11
    4152:	cf 92       	push	r12
    4154:	df 92       	push	r13
    4156:	ef 92       	push	r14
    4158:	ff 92       	push	r15
    415a:	0f 93       	push	r16
    415c:	1f 93       	push	r17
    415e:	cf 93       	push	r28
    4160:	df 93       	push	r29
    4162:	cd b7       	in	r28, 0x3d	; 61
    4164:	de b7       	in	r29, 0x3e	; 62
    4166:	ca 1b       	sub	r28, r26
    4168:	db 0b       	sbc	r29, r27
    416a:	0f b6       	in	r0, 0x3f	; 63
    416c:	f8 94       	cli
    416e:	de bf       	out	0x3e, r29	; 62
    4170:	0f be       	out	0x3f, r0	; 63
    4172:	cd bf       	out	0x3d, r28	; 61
    4174:	09 94       	ijmp

00004176 <__epilogue_restores__>:
    4176:	2a 88       	ldd	r2, Y+18	; 0x12
    4178:	39 88       	ldd	r3, Y+17	; 0x11
    417a:	48 88       	ldd	r4, Y+16	; 0x10
    417c:	5f 84       	ldd	r5, Y+15	; 0x0f
    417e:	6e 84       	ldd	r6, Y+14	; 0x0e
    4180:	7d 84       	ldd	r7, Y+13	; 0x0d
    4182:	8c 84       	ldd	r8, Y+12	; 0x0c
    4184:	9b 84       	ldd	r9, Y+11	; 0x0b
    4186:	aa 84       	ldd	r10, Y+10	; 0x0a
    4188:	b9 84       	ldd	r11, Y+9	; 0x09
    418a:	c8 84       	ldd	r12, Y+8	; 0x08
    418c:	df 80       	ldd	r13, Y+7	; 0x07
    418e:	ee 80       	ldd	r14, Y+6	; 0x06
    4190:	fd 80       	ldd	r15, Y+5	; 0x05
    4192:	0c 81       	ldd	r16, Y+4	; 0x04
    4194:	1b 81       	ldd	r17, Y+3	; 0x03
    4196:	aa 81       	ldd	r26, Y+2	; 0x02
    4198:	b9 81       	ldd	r27, Y+1	; 0x01
    419a:	ce 0f       	add	r28, r30
    419c:	d1 1d       	adc	r29, r1
    419e:	0f b6       	in	r0, 0x3f	; 63
    41a0:	f8 94       	cli
    41a2:	de bf       	out	0x3e, r29	; 62
    41a4:	0f be       	out	0x3f, r0	; 63
    41a6:	cd bf       	out	0x3d, r28	; 61
    41a8:	ed 01       	movw	r28, r26
    41aa:	08 95       	ret

000041ac <_exit>:
    41ac:	f8 94       	cli

000041ae <__stop_program>:
    41ae:	ff cf       	rjmp	.-2      	; 0x41ae <__stop_program>
