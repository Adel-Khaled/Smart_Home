
SMART_HOME_SYSTM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000054b0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000001dc  00800060  000054b0  00005544  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000034  0080023c  0080023c  00005720  2**0
                  ALLOC
  3 .stab         00004e54  00000000  00000000  00005720  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000017a8  00000000  00000000  0000a574  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000180  00000000  00000000  0000bd1c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001d3  00000000  00000000  0000be9c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000200f  00000000  00000000  0000c06f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001170  00000000  00000000  0000e07e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001001  00000000  00000000  0000f1ee  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001a0  00000000  00000000  000101f0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c1  00000000  00000000  00010390  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000008ae  00000000  00000000  00010651  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00010eff  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 66 0c 	jmp	0x18cc	; 0x18cc <__vector_1>
       8:	0c 94 99 0c 	jmp	0x1932	; 0x1932 <__vector_2>
       c:	0c 94 cc 0c 	jmp	0x1998	; 0x1998 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 49 08 	jmp	0x1092	; 0x1092 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 17 0a 	jmp	0x142e	; 0x142e <__vector_10>
      2c:	0c 94 74 0a 	jmp	0x14e8	; 0x14e8 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	12 e0       	ldi	r17, 0x02	; 2
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 eb       	ldi	r30, 0xB0	; 176
      68:	f4 e5       	ldi	r31, 0x54	; 84
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 33       	cpi	r26, 0x3C	; 60
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	12 e0       	ldi	r17, 0x02	; 2
      78:	ac e3       	ldi	r26, 0x3C	; 60
      7a:	b2 e0       	ldi	r27, 0x02	; 2
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a0 37       	cpi	r26, 0x70	; 112
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 ba 21 	call	0x4374	; 0x4374 <main>
      8a:	0c 94 56 2a 	jmp	0x54ac	; 0x54ac <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 1f 2a 	jmp	0x543e	; 0x543e <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a6 e1       	ldi	r26, 0x16	; 22
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 3b 2a 	jmp	0x5476	; 0x5476 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 2b 2a 	jmp	0x5456	; 0x5456 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 c5 04 	call	0x98a	; 0x98a <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 47 2a 	jmp	0x548e	; 0x548e <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 2b 2a 	jmp	0x5456	; 0x5456 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 c5 04 	call	0x98a	; 0x98a <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 47 2a 	jmp	0x548e	; 0x548e <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 1f 2a 	jmp	0x543e	; 0x543e <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	86 e1       	ldi	r24, 0x16	; 22
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 c5 04 	call	0x98a	; 0x98a <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 3b 2a 	jmp	0x5476	; 0x5476 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 2b 2a 	jmp	0x5456	; 0x5456 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 12 06 	call	0xc24	; 0xc24 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 47 2a 	jmp	0x548e	; 0x548e <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 2b 2a 	jmp	0x5456	; 0x5456 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 12 06 	call	0xc24	; 0xc24 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 47 2a 	jmp	0x548e	; 0x548e <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 2b 2a 	jmp	0x5456	; 0x5456 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 12 06 	call	0xc24	; 0xc24 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 47 2a 	jmp	0x548e	; 0x548e <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 2f 2a 	jmp	0x545e	; 0x545e <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 4b 2a 	jmp	0x5496	; 0x5496 <__epilogue_restores__+0x20>

000007fa <__floatunsisf>:
     7fa:	a8 e0       	ldi	r26, 0x08	; 8
     7fc:	b0 e0       	ldi	r27, 0x00	; 0
     7fe:	e3 e0       	ldi	r30, 0x03	; 3
     800:	f4 e0       	ldi	r31, 0x04	; 4
     802:	0c 94 27 2a 	jmp	0x544e	; 0x544e <__prologue_saves__+0x10>
     806:	7b 01       	movw	r14, r22
     808:	8c 01       	movw	r16, r24
     80a:	61 15       	cp	r22, r1
     80c:	71 05       	cpc	r23, r1
     80e:	81 05       	cpc	r24, r1
     810:	91 05       	cpc	r25, r1
     812:	19 f4       	brne	.+6      	; 0x81a <__floatunsisf+0x20>
     814:	82 e0       	ldi	r24, 0x02	; 2
     816:	89 83       	std	Y+1, r24	; 0x01
     818:	60 c0       	rjmp	.+192    	; 0x8da <__stack+0x7b>
     81a:	83 e0       	ldi	r24, 0x03	; 3
     81c:	89 83       	std	Y+1, r24	; 0x01
     81e:	8e e1       	ldi	r24, 0x1E	; 30
     820:	c8 2e       	mov	r12, r24
     822:	d1 2c       	mov	r13, r1
     824:	dc 82       	std	Y+4, r13	; 0x04
     826:	cb 82       	std	Y+3, r12	; 0x03
     828:	ed 82       	std	Y+5, r14	; 0x05
     82a:	fe 82       	std	Y+6, r15	; 0x06
     82c:	0f 83       	std	Y+7, r16	; 0x07
     82e:	18 87       	std	Y+8, r17	; 0x08
     830:	c8 01       	movw	r24, r16
     832:	b7 01       	movw	r22, r14
     834:	0e 94 76 04 	call	0x8ec	; 0x8ec <__clzsi2>
     838:	fc 01       	movw	r30, r24
     83a:	31 97       	sbiw	r30, 0x01	; 1
     83c:	f7 ff       	sbrs	r31, 7
     83e:	3b c0       	rjmp	.+118    	; 0x8b6 <__stack+0x57>
     840:	22 27       	eor	r18, r18
     842:	33 27       	eor	r19, r19
     844:	2e 1b       	sub	r18, r30
     846:	3f 0b       	sbc	r19, r31
     848:	57 01       	movw	r10, r14
     84a:	68 01       	movw	r12, r16
     84c:	02 2e       	mov	r0, r18
     84e:	04 c0       	rjmp	.+8      	; 0x858 <__floatunsisf+0x5e>
     850:	d6 94       	lsr	r13
     852:	c7 94       	ror	r12
     854:	b7 94       	ror	r11
     856:	a7 94       	ror	r10
     858:	0a 94       	dec	r0
     85a:	d2 f7       	brpl	.-12     	; 0x850 <__floatunsisf+0x56>
     85c:	40 e0       	ldi	r20, 0x00	; 0
     85e:	50 e0       	ldi	r21, 0x00	; 0
     860:	60 e0       	ldi	r22, 0x00	; 0
     862:	70 e0       	ldi	r23, 0x00	; 0
     864:	81 e0       	ldi	r24, 0x01	; 1
     866:	90 e0       	ldi	r25, 0x00	; 0
     868:	a0 e0       	ldi	r26, 0x00	; 0
     86a:	b0 e0       	ldi	r27, 0x00	; 0
     86c:	04 c0       	rjmp	.+8      	; 0x876 <__stack+0x17>
     86e:	88 0f       	add	r24, r24
     870:	99 1f       	adc	r25, r25
     872:	aa 1f       	adc	r26, r26
     874:	bb 1f       	adc	r27, r27
     876:	2a 95       	dec	r18
     878:	d2 f7       	brpl	.-12     	; 0x86e <__stack+0xf>
     87a:	01 97       	sbiw	r24, 0x01	; 1
     87c:	a1 09       	sbc	r26, r1
     87e:	b1 09       	sbc	r27, r1
     880:	8e 21       	and	r24, r14
     882:	9f 21       	and	r25, r15
     884:	a0 23       	and	r26, r16
     886:	b1 23       	and	r27, r17
     888:	00 97       	sbiw	r24, 0x00	; 0
     88a:	a1 05       	cpc	r26, r1
     88c:	b1 05       	cpc	r27, r1
     88e:	21 f0       	breq	.+8      	; 0x898 <__stack+0x39>
     890:	41 e0       	ldi	r20, 0x01	; 1
     892:	50 e0       	ldi	r21, 0x00	; 0
     894:	60 e0       	ldi	r22, 0x00	; 0
     896:	70 e0       	ldi	r23, 0x00	; 0
     898:	4a 29       	or	r20, r10
     89a:	5b 29       	or	r21, r11
     89c:	6c 29       	or	r22, r12
     89e:	7d 29       	or	r23, r13
     8a0:	4d 83       	std	Y+5, r20	; 0x05
     8a2:	5e 83       	std	Y+6, r21	; 0x06
     8a4:	6f 83       	std	Y+7, r22	; 0x07
     8a6:	78 87       	std	Y+8, r23	; 0x08
     8a8:	8e e1       	ldi	r24, 0x1E	; 30
     8aa:	90 e0       	ldi	r25, 0x00	; 0
     8ac:	8e 1b       	sub	r24, r30
     8ae:	9f 0b       	sbc	r25, r31
     8b0:	9c 83       	std	Y+4, r25	; 0x04
     8b2:	8b 83       	std	Y+3, r24	; 0x03
     8b4:	12 c0       	rjmp	.+36     	; 0x8da <__stack+0x7b>
     8b6:	30 97       	sbiw	r30, 0x00	; 0
     8b8:	81 f0       	breq	.+32     	; 0x8da <__stack+0x7b>
     8ba:	0e 2e       	mov	r0, r30
     8bc:	04 c0       	rjmp	.+8      	; 0x8c6 <__stack+0x67>
     8be:	ee 0c       	add	r14, r14
     8c0:	ff 1c       	adc	r15, r15
     8c2:	00 1f       	adc	r16, r16
     8c4:	11 1f       	adc	r17, r17
     8c6:	0a 94       	dec	r0
     8c8:	d2 f7       	brpl	.-12     	; 0x8be <__stack+0x5f>
     8ca:	ed 82       	std	Y+5, r14	; 0x05
     8cc:	fe 82       	std	Y+6, r15	; 0x06
     8ce:	0f 83       	std	Y+7, r16	; 0x07
     8d0:	18 87       	std	Y+8, r17	; 0x08
     8d2:	ce 1a       	sub	r12, r30
     8d4:	df 0a       	sbc	r13, r31
     8d6:	dc 82       	std	Y+4, r13	; 0x04
     8d8:	cb 82       	std	Y+3, r12	; 0x03
     8da:	1a 82       	std	Y+2, r1	; 0x02
     8dc:	ce 01       	movw	r24, r28
     8de:	01 96       	adiw	r24, 0x01	; 1
     8e0:	0e 94 c5 04 	call	0x98a	; 0x98a <__pack_f>
     8e4:	28 96       	adiw	r28, 0x08	; 8
     8e6:	ea e0       	ldi	r30, 0x0A	; 10
     8e8:	0c 94 43 2a 	jmp	0x5486	; 0x5486 <__epilogue_restores__+0x10>

000008ec <__clzsi2>:
     8ec:	ef 92       	push	r14
     8ee:	ff 92       	push	r15
     8f0:	0f 93       	push	r16
     8f2:	1f 93       	push	r17
     8f4:	7b 01       	movw	r14, r22
     8f6:	8c 01       	movw	r16, r24
     8f8:	80 e0       	ldi	r24, 0x00	; 0
     8fa:	e8 16       	cp	r14, r24
     8fc:	80 e0       	ldi	r24, 0x00	; 0
     8fe:	f8 06       	cpc	r15, r24
     900:	81 e0       	ldi	r24, 0x01	; 1
     902:	08 07       	cpc	r16, r24
     904:	80 e0       	ldi	r24, 0x00	; 0
     906:	18 07       	cpc	r17, r24
     908:	88 f4       	brcc	.+34     	; 0x92c <__clzsi2+0x40>
     90a:	8f ef       	ldi	r24, 0xFF	; 255
     90c:	e8 16       	cp	r14, r24
     90e:	f1 04       	cpc	r15, r1
     910:	01 05       	cpc	r16, r1
     912:	11 05       	cpc	r17, r1
     914:	31 f0       	breq	.+12     	; 0x922 <__clzsi2+0x36>
     916:	28 f0       	brcs	.+10     	; 0x922 <__clzsi2+0x36>
     918:	88 e0       	ldi	r24, 0x08	; 8
     91a:	90 e0       	ldi	r25, 0x00	; 0
     91c:	a0 e0       	ldi	r26, 0x00	; 0
     91e:	b0 e0       	ldi	r27, 0x00	; 0
     920:	17 c0       	rjmp	.+46     	; 0x950 <__clzsi2+0x64>
     922:	80 e0       	ldi	r24, 0x00	; 0
     924:	90 e0       	ldi	r25, 0x00	; 0
     926:	a0 e0       	ldi	r26, 0x00	; 0
     928:	b0 e0       	ldi	r27, 0x00	; 0
     92a:	12 c0       	rjmp	.+36     	; 0x950 <__clzsi2+0x64>
     92c:	80 e0       	ldi	r24, 0x00	; 0
     92e:	e8 16       	cp	r14, r24
     930:	80 e0       	ldi	r24, 0x00	; 0
     932:	f8 06       	cpc	r15, r24
     934:	80 e0       	ldi	r24, 0x00	; 0
     936:	08 07       	cpc	r16, r24
     938:	81 e0       	ldi	r24, 0x01	; 1
     93a:	18 07       	cpc	r17, r24
     93c:	28 f0       	brcs	.+10     	; 0x948 <__clzsi2+0x5c>
     93e:	88 e1       	ldi	r24, 0x18	; 24
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	04 c0       	rjmp	.+8      	; 0x950 <__clzsi2+0x64>
     948:	80 e1       	ldi	r24, 0x10	; 16
     94a:	90 e0       	ldi	r25, 0x00	; 0
     94c:	a0 e0       	ldi	r26, 0x00	; 0
     94e:	b0 e0       	ldi	r27, 0x00	; 0
     950:	20 e2       	ldi	r18, 0x20	; 32
     952:	30 e0       	ldi	r19, 0x00	; 0
     954:	40 e0       	ldi	r20, 0x00	; 0
     956:	50 e0       	ldi	r21, 0x00	; 0
     958:	28 1b       	sub	r18, r24
     95a:	39 0b       	sbc	r19, r25
     95c:	4a 0b       	sbc	r20, r26
     95e:	5b 0b       	sbc	r21, r27
     960:	04 c0       	rjmp	.+8      	; 0x96a <__clzsi2+0x7e>
     962:	16 95       	lsr	r17
     964:	07 95       	ror	r16
     966:	f7 94       	ror	r15
     968:	e7 94       	ror	r14
     96a:	8a 95       	dec	r24
     96c:	d2 f7       	brpl	.-12     	; 0x962 <__clzsi2+0x76>
     96e:	f7 01       	movw	r30, r14
     970:	e2 5e       	subi	r30, 0xE2	; 226
     972:	fe 4f       	sbci	r31, 0xFE	; 254
     974:	80 81       	ld	r24, Z
     976:	28 1b       	sub	r18, r24
     978:	31 09       	sbc	r19, r1
     97a:	41 09       	sbc	r20, r1
     97c:	51 09       	sbc	r21, r1
     97e:	c9 01       	movw	r24, r18
     980:	1f 91       	pop	r17
     982:	0f 91       	pop	r16
     984:	ff 90       	pop	r15
     986:	ef 90       	pop	r14
     988:	08 95       	ret

0000098a <__pack_f>:
     98a:	df 92       	push	r13
     98c:	ef 92       	push	r14
     98e:	ff 92       	push	r15
     990:	0f 93       	push	r16
     992:	1f 93       	push	r17
     994:	fc 01       	movw	r30, r24
     996:	e4 80       	ldd	r14, Z+4	; 0x04
     998:	f5 80       	ldd	r15, Z+5	; 0x05
     99a:	06 81       	ldd	r16, Z+6	; 0x06
     99c:	17 81       	ldd	r17, Z+7	; 0x07
     99e:	d1 80       	ldd	r13, Z+1	; 0x01
     9a0:	80 81       	ld	r24, Z
     9a2:	82 30       	cpi	r24, 0x02	; 2
     9a4:	48 f4       	brcc	.+18     	; 0x9b8 <__pack_f+0x2e>
     9a6:	80 e0       	ldi	r24, 0x00	; 0
     9a8:	90 e0       	ldi	r25, 0x00	; 0
     9aa:	a0 e1       	ldi	r26, 0x10	; 16
     9ac:	b0 e0       	ldi	r27, 0x00	; 0
     9ae:	e8 2a       	or	r14, r24
     9b0:	f9 2a       	or	r15, r25
     9b2:	0a 2b       	or	r16, r26
     9b4:	1b 2b       	or	r17, r27
     9b6:	a5 c0       	rjmp	.+330    	; 0xb02 <__pack_f+0x178>
     9b8:	84 30       	cpi	r24, 0x04	; 4
     9ba:	09 f4       	brne	.+2      	; 0x9be <__pack_f+0x34>
     9bc:	9f c0       	rjmp	.+318    	; 0xafc <__pack_f+0x172>
     9be:	82 30       	cpi	r24, 0x02	; 2
     9c0:	21 f4       	brne	.+8      	; 0x9ca <__pack_f+0x40>
     9c2:	ee 24       	eor	r14, r14
     9c4:	ff 24       	eor	r15, r15
     9c6:	87 01       	movw	r16, r14
     9c8:	05 c0       	rjmp	.+10     	; 0x9d4 <__pack_f+0x4a>
     9ca:	e1 14       	cp	r14, r1
     9cc:	f1 04       	cpc	r15, r1
     9ce:	01 05       	cpc	r16, r1
     9d0:	11 05       	cpc	r17, r1
     9d2:	19 f4       	brne	.+6      	; 0x9da <__pack_f+0x50>
     9d4:	e0 e0       	ldi	r30, 0x00	; 0
     9d6:	f0 e0       	ldi	r31, 0x00	; 0
     9d8:	96 c0       	rjmp	.+300    	; 0xb06 <__pack_f+0x17c>
     9da:	62 81       	ldd	r22, Z+2	; 0x02
     9dc:	73 81       	ldd	r23, Z+3	; 0x03
     9de:	9f ef       	ldi	r25, 0xFF	; 255
     9e0:	62 38       	cpi	r22, 0x82	; 130
     9e2:	79 07       	cpc	r23, r25
     9e4:	0c f0       	brlt	.+2      	; 0x9e8 <__pack_f+0x5e>
     9e6:	5b c0       	rjmp	.+182    	; 0xa9e <__pack_f+0x114>
     9e8:	22 e8       	ldi	r18, 0x82	; 130
     9ea:	3f ef       	ldi	r19, 0xFF	; 255
     9ec:	26 1b       	sub	r18, r22
     9ee:	37 0b       	sbc	r19, r23
     9f0:	2a 31       	cpi	r18, 0x1A	; 26
     9f2:	31 05       	cpc	r19, r1
     9f4:	2c f0       	brlt	.+10     	; 0xa00 <__pack_f+0x76>
     9f6:	20 e0       	ldi	r18, 0x00	; 0
     9f8:	30 e0       	ldi	r19, 0x00	; 0
     9fa:	40 e0       	ldi	r20, 0x00	; 0
     9fc:	50 e0       	ldi	r21, 0x00	; 0
     9fe:	2a c0       	rjmp	.+84     	; 0xa54 <__pack_f+0xca>
     a00:	b8 01       	movw	r22, r16
     a02:	a7 01       	movw	r20, r14
     a04:	02 2e       	mov	r0, r18
     a06:	04 c0       	rjmp	.+8      	; 0xa10 <__pack_f+0x86>
     a08:	76 95       	lsr	r23
     a0a:	67 95       	ror	r22
     a0c:	57 95       	ror	r21
     a0e:	47 95       	ror	r20
     a10:	0a 94       	dec	r0
     a12:	d2 f7       	brpl	.-12     	; 0xa08 <__pack_f+0x7e>
     a14:	81 e0       	ldi	r24, 0x01	; 1
     a16:	90 e0       	ldi	r25, 0x00	; 0
     a18:	a0 e0       	ldi	r26, 0x00	; 0
     a1a:	b0 e0       	ldi	r27, 0x00	; 0
     a1c:	04 c0       	rjmp	.+8      	; 0xa26 <__pack_f+0x9c>
     a1e:	88 0f       	add	r24, r24
     a20:	99 1f       	adc	r25, r25
     a22:	aa 1f       	adc	r26, r26
     a24:	bb 1f       	adc	r27, r27
     a26:	2a 95       	dec	r18
     a28:	d2 f7       	brpl	.-12     	; 0xa1e <__pack_f+0x94>
     a2a:	01 97       	sbiw	r24, 0x01	; 1
     a2c:	a1 09       	sbc	r26, r1
     a2e:	b1 09       	sbc	r27, r1
     a30:	8e 21       	and	r24, r14
     a32:	9f 21       	and	r25, r15
     a34:	a0 23       	and	r26, r16
     a36:	b1 23       	and	r27, r17
     a38:	00 97       	sbiw	r24, 0x00	; 0
     a3a:	a1 05       	cpc	r26, r1
     a3c:	b1 05       	cpc	r27, r1
     a3e:	21 f0       	breq	.+8      	; 0xa48 <__pack_f+0xbe>
     a40:	81 e0       	ldi	r24, 0x01	; 1
     a42:	90 e0       	ldi	r25, 0x00	; 0
     a44:	a0 e0       	ldi	r26, 0x00	; 0
     a46:	b0 e0       	ldi	r27, 0x00	; 0
     a48:	9a 01       	movw	r18, r20
     a4a:	ab 01       	movw	r20, r22
     a4c:	28 2b       	or	r18, r24
     a4e:	39 2b       	or	r19, r25
     a50:	4a 2b       	or	r20, r26
     a52:	5b 2b       	or	r21, r27
     a54:	da 01       	movw	r26, r20
     a56:	c9 01       	movw	r24, r18
     a58:	8f 77       	andi	r24, 0x7F	; 127
     a5a:	90 70       	andi	r25, 0x00	; 0
     a5c:	a0 70       	andi	r26, 0x00	; 0
     a5e:	b0 70       	andi	r27, 0x00	; 0
     a60:	80 34       	cpi	r24, 0x40	; 64
     a62:	91 05       	cpc	r25, r1
     a64:	a1 05       	cpc	r26, r1
     a66:	b1 05       	cpc	r27, r1
     a68:	39 f4       	brne	.+14     	; 0xa78 <__pack_f+0xee>
     a6a:	27 ff       	sbrs	r18, 7
     a6c:	09 c0       	rjmp	.+18     	; 0xa80 <__pack_f+0xf6>
     a6e:	20 5c       	subi	r18, 0xC0	; 192
     a70:	3f 4f       	sbci	r19, 0xFF	; 255
     a72:	4f 4f       	sbci	r20, 0xFF	; 255
     a74:	5f 4f       	sbci	r21, 0xFF	; 255
     a76:	04 c0       	rjmp	.+8      	; 0xa80 <__pack_f+0xf6>
     a78:	21 5c       	subi	r18, 0xC1	; 193
     a7a:	3f 4f       	sbci	r19, 0xFF	; 255
     a7c:	4f 4f       	sbci	r20, 0xFF	; 255
     a7e:	5f 4f       	sbci	r21, 0xFF	; 255
     a80:	e0 e0       	ldi	r30, 0x00	; 0
     a82:	f0 e0       	ldi	r31, 0x00	; 0
     a84:	20 30       	cpi	r18, 0x00	; 0
     a86:	a0 e0       	ldi	r26, 0x00	; 0
     a88:	3a 07       	cpc	r19, r26
     a8a:	a0 e0       	ldi	r26, 0x00	; 0
     a8c:	4a 07       	cpc	r20, r26
     a8e:	a0 e4       	ldi	r26, 0x40	; 64
     a90:	5a 07       	cpc	r21, r26
     a92:	10 f0       	brcs	.+4      	; 0xa98 <__pack_f+0x10e>
     a94:	e1 e0       	ldi	r30, 0x01	; 1
     a96:	f0 e0       	ldi	r31, 0x00	; 0
     a98:	79 01       	movw	r14, r18
     a9a:	8a 01       	movw	r16, r20
     a9c:	27 c0       	rjmp	.+78     	; 0xaec <__pack_f+0x162>
     a9e:	60 38       	cpi	r22, 0x80	; 128
     aa0:	71 05       	cpc	r23, r1
     aa2:	64 f5       	brge	.+88     	; 0xafc <__pack_f+0x172>
     aa4:	fb 01       	movw	r30, r22
     aa6:	e1 58       	subi	r30, 0x81	; 129
     aa8:	ff 4f       	sbci	r31, 0xFF	; 255
     aaa:	d8 01       	movw	r26, r16
     aac:	c7 01       	movw	r24, r14
     aae:	8f 77       	andi	r24, 0x7F	; 127
     ab0:	90 70       	andi	r25, 0x00	; 0
     ab2:	a0 70       	andi	r26, 0x00	; 0
     ab4:	b0 70       	andi	r27, 0x00	; 0
     ab6:	80 34       	cpi	r24, 0x40	; 64
     ab8:	91 05       	cpc	r25, r1
     aba:	a1 05       	cpc	r26, r1
     abc:	b1 05       	cpc	r27, r1
     abe:	39 f4       	brne	.+14     	; 0xace <__pack_f+0x144>
     ac0:	e7 fe       	sbrs	r14, 7
     ac2:	0d c0       	rjmp	.+26     	; 0xade <__pack_f+0x154>
     ac4:	80 e4       	ldi	r24, 0x40	; 64
     ac6:	90 e0       	ldi	r25, 0x00	; 0
     ac8:	a0 e0       	ldi	r26, 0x00	; 0
     aca:	b0 e0       	ldi	r27, 0x00	; 0
     acc:	04 c0       	rjmp	.+8      	; 0xad6 <__pack_f+0x14c>
     ace:	8f e3       	ldi	r24, 0x3F	; 63
     ad0:	90 e0       	ldi	r25, 0x00	; 0
     ad2:	a0 e0       	ldi	r26, 0x00	; 0
     ad4:	b0 e0       	ldi	r27, 0x00	; 0
     ad6:	e8 0e       	add	r14, r24
     ad8:	f9 1e       	adc	r15, r25
     ada:	0a 1f       	adc	r16, r26
     adc:	1b 1f       	adc	r17, r27
     ade:	17 ff       	sbrs	r17, 7
     ae0:	05 c0       	rjmp	.+10     	; 0xaec <__pack_f+0x162>
     ae2:	16 95       	lsr	r17
     ae4:	07 95       	ror	r16
     ae6:	f7 94       	ror	r15
     ae8:	e7 94       	ror	r14
     aea:	31 96       	adiw	r30, 0x01	; 1
     aec:	87 e0       	ldi	r24, 0x07	; 7
     aee:	16 95       	lsr	r17
     af0:	07 95       	ror	r16
     af2:	f7 94       	ror	r15
     af4:	e7 94       	ror	r14
     af6:	8a 95       	dec	r24
     af8:	d1 f7       	brne	.-12     	; 0xaee <__pack_f+0x164>
     afa:	05 c0       	rjmp	.+10     	; 0xb06 <__pack_f+0x17c>
     afc:	ee 24       	eor	r14, r14
     afe:	ff 24       	eor	r15, r15
     b00:	87 01       	movw	r16, r14
     b02:	ef ef       	ldi	r30, 0xFF	; 255
     b04:	f0 e0       	ldi	r31, 0x00	; 0
     b06:	6e 2f       	mov	r22, r30
     b08:	67 95       	ror	r22
     b0a:	66 27       	eor	r22, r22
     b0c:	67 95       	ror	r22
     b0e:	90 2f       	mov	r25, r16
     b10:	9f 77       	andi	r25, 0x7F	; 127
     b12:	d7 94       	ror	r13
     b14:	dd 24       	eor	r13, r13
     b16:	d7 94       	ror	r13
     b18:	8e 2f       	mov	r24, r30
     b1a:	86 95       	lsr	r24
     b1c:	49 2f       	mov	r20, r25
     b1e:	46 2b       	or	r20, r22
     b20:	58 2f       	mov	r21, r24
     b22:	5d 29       	or	r21, r13
     b24:	b7 01       	movw	r22, r14
     b26:	ca 01       	movw	r24, r20
     b28:	1f 91       	pop	r17
     b2a:	0f 91       	pop	r16
     b2c:	ff 90       	pop	r15
     b2e:	ef 90       	pop	r14
     b30:	df 90       	pop	r13
     b32:	08 95       	ret

00000b34 <__unpack_f>:
     b34:	fc 01       	movw	r30, r24
     b36:	db 01       	movw	r26, r22
     b38:	40 81       	ld	r20, Z
     b3a:	51 81       	ldd	r21, Z+1	; 0x01
     b3c:	22 81       	ldd	r18, Z+2	; 0x02
     b3e:	62 2f       	mov	r22, r18
     b40:	6f 77       	andi	r22, 0x7F	; 127
     b42:	70 e0       	ldi	r23, 0x00	; 0
     b44:	22 1f       	adc	r18, r18
     b46:	22 27       	eor	r18, r18
     b48:	22 1f       	adc	r18, r18
     b4a:	93 81       	ldd	r25, Z+3	; 0x03
     b4c:	89 2f       	mov	r24, r25
     b4e:	88 0f       	add	r24, r24
     b50:	82 2b       	or	r24, r18
     b52:	28 2f       	mov	r18, r24
     b54:	30 e0       	ldi	r19, 0x00	; 0
     b56:	99 1f       	adc	r25, r25
     b58:	99 27       	eor	r25, r25
     b5a:	99 1f       	adc	r25, r25
     b5c:	11 96       	adiw	r26, 0x01	; 1
     b5e:	9c 93       	st	X, r25
     b60:	11 97       	sbiw	r26, 0x01	; 1
     b62:	21 15       	cp	r18, r1
     b64:	31 05       	cpc	r19, r1
     b66:	a9 f5       	brne	.+106    	; 0xbd2 <__unpack_f+0x9e>
     b68:	41 15       	cp	r20, r1
     b6a:	51 05       	cpc	r21, r1
     b6c:	61 05       	cpc	r22, r1
     b6e:	71 05       	cpc	r23, r1
     b70:	11 f4       	brne	.+4      	; 0xb76 <__unpack_f+0x42>
     b72:	82 e0       	ldi	r24, 0x02	; 2
     b74:	37 c0       	rjmp	.+110    	; 0xbe4 <__unpack_f+0xb0>
     b76:	82 e8       	ldi	r24, 0x82	; 130
     b78:	9f ef       	ldi	r25, 0xFF	; 255
     b7a:	13 96       	adiw	r26, 0x03	; 3
     b7c:	9c 93       	st	X, r25
     b7e:	8e 93       	st	-X, r24
     b80:	12 97       	sbiw	r26, 0x02	; 2
     b82:	9a 01       	movw	r18, r20
     b84:	ab 01       	movw	r20, r22
     b86:	67 e0       	ldi	r22, 0x07	; 7
     b88:	22 0f       	add	r18, r18
     b8a:	33 1f       	adc	r19, r19
     b8c:	44 1f       	adc	r20, r20
     b8e:	55 1f       	adc	r21, r21
     b90:	6a 95       	dec	r22
     b92:	d1 f7       	brne	.-12     	; 0xb88 <__unpack_f+0x54>
     b94:	83 e0       	ldi	r24, 0x03	; 3
     b96:	8c 93       	st	X, r24
     b98:	0d c0       	rjmp	.+26     	; 0xbb4 <__unpack_f+0x80>
     b9a:	22 0f       	add	r18, r18
     b9c:	33 1f       	adc	r19, r19
     b9e:	44 1f       	adc	r20, r20
     ba0:	55 1f       	adc	r21, r21
     ba2:	12 96       	adiw	r26, 0x02	; 2
     ba4:	8d 91       	ld	r24, X+
     ba6:	9c 91       	ld	r25, X
     ba8:	13 97       	sbiw	r26, 0x03	; 3
     baa:	01 97       	sbiw	r24, 0x01	; 1
     bac:	13 96       	adiw	r26, 0x03	; 3
     bae:	9c 93       	st	X, r25
     bb0:	8e 93       	st	-X, r24
     bb2:	12 97       	sbiw	r26, 0x02	; 2
     bb4:	20 30       	cpi	r18, 0x00	; 0
     bb6:	80 e0       	ldi	r24, 0x00	; 0
     bb8:	38 07       	cpc	r19, r24
     bba:	80 e0       	ldi	r24, 0x00	; 0
     bbc:	48 07       	cpc	r20, r24
     bbe:	80 e4       	ldi	r24, 0x40	; 64
     bc0:	58 07       	cpc	r21, r24
     bc2:	58 f3       	brcs	.-42     	; 0xb9a <__unpack_f+0x66>
     bc4:	14 96       	adiw	r26, 0x04	; 4
     bc6:	2d 93       	st	X+, r18
     bc8:	3d 93       	st	X+, r19
     bca:	4d 93       	st	X+, r20
     bcc:	5c 93       	st	X, r21
     bce:	17 97       	sbiw	r26, 0x07	; 7
     bd0:	08 95       	ret
     bd2:	2f 3f       	cpi	r18, 0xFF	; 255
     bd4:	31 05       	cpc	r19, r1
     bd6:	79 f4       	brne	.+30     	; 0xbf6 <__unpack_f+0xc2>
     bd8:	41 15       	cp	r20, r1
     bda:	51 05       	cpc	r21, r1
     bdc:	61 05       	cpc	r22, r1
     bde:	71 05       	cpc	r23, r1
     be0:	19 f4       	brne	.+6      	; 0xbe8 <__unpack_f+0xb4>
     be2:	84 e0       	ldi	r24, 0x04	; 4
     be4:	8c 93       	st	X, r24
     be6:	08 95       	ret
     be8:	64 ff       	sbrs	r22, 4
     bea:	03 c0       	rjmp	.+6      	; 0xbf2 <__unpack_f+0xbe>
     bec:	81 e0       	ldi	r24, 0x01	; 1
     bee:	8c 93       	st	X, r24
     bf0:	12 c0       	rjmp	.+36     	; 0xc16 <__unpack_f+0xe2>
     bf2:	1c 92       	st	X, r1
     bf4:	10 c0       	rjmp	.+32     	; 0xc16 <__unpack_f+0xe2>
     bf6:	2f 57       	subi	r18, 0x7F	; 127
     bf8:	30 40       	sbci	r19, 0x00	; 0
     bfa:	13 96       	adiw	r26, 0x03	; 3
     bfc:	3c 93       	st	X, r19
     bfe:	2e 93       	st	-X, r18
     c00:	12 97       	sbiw	r26, 0x02	; 2
     c02:	83 e0       	ldi	r24, 0x03	; 3
     c04:	8c 93       	st	X, r24
     c06:	87 e0       	ldi	r24, 0x07	; 7
     c08:	44 0f       	add	r20, r20
     c0a:	55 1f       	adc	r21, r21
     c0c:	66 1f       	adc	r22, r22
     c0e:	77 1f       	adc	r23, r23
     c10:	8a 95       	dec	r24
     c12:	d1 f7       	brne	.-12     	; 0xc08 <__unpack_f+0xd4>
     c14:	70 64       	ori	r23, 0x40	; 64
     c16:	14 96       	adiw	r26, 0x04	; 4
     c18:	4d 93       	st	X+, r20
     c1a:	5d 93       	st	X+, r21
     c1c:	6d 93       	st	X+, r22
     c1e:	7c 93       	st	X, r23
     c20:	17 97       	sbiw	r26, 0x07	; 7
     c22:	08 95       	ret

00000c24 <__fpcmp_parts_f>:
     c24:	1f 93       	push	r17
     c26:	dc 01       	movw	r26, r24
     c28:	fb 01       	movw	r30, r22
     c2a:	9c 91       	ld	r25, X
     c2c:	92 30       	cpi	r25, 0x02	; 2
     c2e:	08 f4       	brcc	.+2      	; 0xc32 <__fpcmp_parts_f+0xe>
     c30:	47 c0       	rjmp	.+142    	; 0xcc0 <__fpcmp_parts_f+0x9c>
     c32:	80 81       	ld	r24, Z
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	08 f4       	brcc	.+2      	; 0xc3a <__fpcmp_parts_f+0x16>
     c38:	43 c0       	rjmp	.+134    	; 0xcc0 <__fpcmp_parts_f+0x9c>
     c3a:	94 30       	cpi	r25, 0x04	; 4
     c3c:	51 f4       	brne	.+20     	; 0xc52 <__fpcmp_parts_f+0x2e>
     c3e:	11 96       	adiw	r26, 0x01	; 1
     c40:	1c 91       	ld	r17, X
     c42:	84 30       	cpi	r24, 0x04	; 4
     c44:	99 f5       	brne	.+102    	; 0xcac <__fpcmp_parts_f+0x88>
     c46:	81 81       	ldd	r24, Z+1	; 0x01
     c48:	68 2f       	mov	r22, r24
     c4a:	70 e0       	ldi	r23, 0x00	; 0
     c4c:	61 1b       	sub	r22, r17
     c4e:	71 09       	sbc	r23, r1
     c50:	3f c0       	rjmp	.+126    	; 0xcd0 <__fpcmp_parts_f+0xac>
     c52:	84 30       	cpi	r24, 0x04	; 4
     c54:	21 f0       	breq	.+8      	; 0xc5e <__fpcmp_parts_f+0x3a>
     c56:	92 30       	cpi	r25, 0x02	; 2
     c58:	31 f4       	brne	.+12     	; 0xc66 <__fpcmp_parts_f+0x42>
     c5a:	82 30       	cpi	r24, 0x02	; 2
     c5c:	b9 f1       	breq	.+110    	; 0xccc <__fpcmp_parts_f+0xa8>
     c5e:	81 81       	ldd	r24, Z+1	; 0x01
     c60:	88 23       	and	r24, r24
     c62:	89 f1       	breq	.+98     	; 0xcc6 <__fpcmp_parts_f+0xa2>
     c64:	2d c0       	rjmp	.+90     	; 0xcc0 <__fpcmp_parts_f+0x9c>
     c66:	11 96       	adiw	r26, 0x01	; 1
     c68:	1c 91       	ld	r17, X
     c6a:	11 97       	sbiw	r26, 0x01	; 1
     c6c:	82 30       	cpi	r24, 0x02	; 2
     c6e:	f1 f0       	breq	.+60     	; 0xcac <__fpcmp_parts_f+0x88>
     c70:	81 81       	ldd	r24, Z+1	; 0x01
     c72:	18 17       	cp	r17, r24
     c74:	d9 f4       	brne	.+54     	; 0xcac <__fpcmp_parts_f+0x88>
     c76:	12 96       	adiw	r26, 0x02	; 2
     c78:	2d 91       	ld	r18, X+
     c7a:	3c 91       	ld	r19, X
     c7c:	13 97       	sbiw	r26, 0x03	; 3
     c7e:	82 81       	ldd	r24, Z+2	; 0x02
     c80:	93 81       	ldd	r25, Z+3	; 0x03
     c82:	82 17       	cp	r24, r18
     c84:	93 07       	cpc	r25, r19
     c86:	94 f0       	brlt	.+36     	; 0xcac <__fpcmp_parts_f+0x88>
     c88:	28 17       	cp	r18, r24
     c8a:	39 07       	cpc	r19, r25
     c8c:	bc f0       	brlt	.+46     	; 0xcbc <__fpcmp_parts_f+0x98>
     c8e:	14 96       	adiw	r26, 0x04	; 4
     c90:	8d 91       	ld	r24, X+
     c92:	9d 91       	ld	r25, X+
     c94:	0d 90       	ld	r0, X+
     c96:	bc 91       	ld	r27, X
     c98:	a0 2d       	mov	r26, r0
     c9a:	24 81       	ldd	r18, Z+4	; 0x04
     c9c:	35 81       	ldd	r19, Z+5	; 0x05
     c9e:	46 81       	ldd	r20, Z+6	; 0x06
     ca0:	57 81       	ldd	r21, Z+7	; 0x07
     ca2:	28 17       	cp	r18, r24
     ca4:	39 07       	cpc	r19, r25
     ca6:	4a 07       	cpc	r20, r26
     ca8:	5b 07       	cpc	r21, r27
     caa:	18 f4       	brcc	.+6      	; 0xcb2 <__fpcmp_parts_f+0x8e>
     cac:	11 23       	and	r17, r17
     cae:	41 f0       	breq	.+16     	; 0xcc0 <__fpcmp_parts_f+0x9c>
     cb0:	0a c0       	rjmp	.+20     	; 0xcc6 <__fpcmp_parts_f+0xa2>
     cb2:	82 17       	cp	r24, r18
     cb4:	93 07       	cpc	r25, r19
     cb6:	a4 07       	cpc	r26, r20
     cb8:	b5 07       	cpc	r27, r21
     cba:	40 f4       	brcc	.+16     	; 0xccc <__fpcmp_parts_f+0xa8>
     cbc:	11 23       	and	r17, r17
     cbe:	19 f0       	breq	.+6      	; 0xcc6 <__fpcmp_parts_f+0xa2>
     cc0:	61 e0       	ldi	r22, 0x01	; 1
     cc2:	70 e0       	ldi	r23, 0x00	; 0
     cc4:	05 c0       	rjmp	.+10     	; 0xcd0 <__fpcmp_parts_f+0xac>
     cc6:	6f ef       	ldi	r22, 0xFF	; 255
     cc8:	7f ef       	ldi	r23, 0xFF	; 255
     cca:	02 c0       	rjmp	.+4      	; 0xcd0 <__fpcmp_parts_f+0xac>
     ccc:	60 e0       	ldi	r22, 0x00	; 0
     cce:	70 e0       	ldi	r23, 0x00	; 0
     cd0:	cb 01       	movw	r24, r22
     cd2:	1f 91       	pop	r17
     cd4:	08 95       	ret

00000cd6 <TIMER1_voidInit>:
static u32  num_of_ovf = 0;
static u32  total_ticks = 0;
void (*TIMER1_CALL_BACK)(void);

void TIMER1_voidInit(void)
{
     cd6:	df 93       	push	r29
     cd8:	cf 93       	push	r28
     cda:	cd b7       	in	r28, 0x3d	; 61
     cdc:	de b7       	in	r29, 0x3e	; 62
	//to select CTC mode
	CLR_BIT(TCCR1A_REG,WGM10);
     cde:	af e4       	ldi	r26, 0x4F	; 79
     ce0:	b0 e0       	ldi	r27, 0x00	; 0
     ce2:	ef e4       	ldi	r30, 0x4F	; 79
     ce4:	f0 e0       	ldi	r31, 0x00	; 0
     ce6:	80 81       	ld	r24, Z
     ce8:	8e 7f       	andi	r24, 0xFE	; 254
     cea:	8c 93       	st	X, r24
	CLR_BIT(TCCR1A_REG,WGM11);
     cec:	af e4       	ldi	r26, 0x4F	; 79
     cee:	b0 e0       	ldi	r27, 0x00	; 0
     cf0:	ef e4       	ldi	r30, 0x4F	; 79
     cf2:	f0 e0       	ldi	r31, 0x00	; 0
     cf4:	80 81       	ld	r24, Z
     cf6:	8d 7f       	andi	r24, 0xFD	; 253
     cf8:	8c 93       	st	X, r24
	SET_BIT(TCCR1B_REG,WGM12);
     cfa:	ae e4       	ldi	r26, 0x4E	; 78
     cfc:	b0 e0       	ldi	r27, 0x00	; 0
     cfe:	ee e4       	ldi	r30, 0x4E	; 78
     d00:	f0 e0       	ldi	r31, 0x00	; 0
     d02:	80 81       	ld	r24, Z
     d04:	88 60       	ori	r24, 0x08	; 8
     d06:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B_REG,WGM13);
     d08:	ae e4       	ldi	r26, 0x4E	; 78
     d0a:	b0 e0       	ldi	r27, 0x00	; 0
     d0c:	ee e4       	ldi	r30, 0x4E	; 78
     d0e:	f0 e0       	ldi	r31, 0x00	; 0
     d10:	80 81       	ld	r24, Z
     d12:	8f 7e       	andi	r24, 0xEF	; 239
     d14:	8c 93       	st	X, r24
	
	//to select non-inverted mode
	CLR_BIT(TCCR1A_REG,COM1A0);
     d16:	af e4       	ldi	r26, 0x4F	; 79
     d18:	b0 e0       	ldi	r27, 0x00	; 0
     d1a:	ef e4       	ldi	r30, 0x4F	; 79
     d1c:	f0 e0       	ldi	r31, 0x00	; 0
     d1e:	80 81       	ld	r24, Z
     d20:	8f 7b       	andi	r24, 0xBF	; 191
     d22:	8c 93       	st	X, r24
	SET_BIT(TCCR1A_REG,COM1A1);
     d24:	af e4       	ldi	r26, 0x4F	; 79
     d26:	b0 e0       	ldi	r27, 0x00	; 0
     d28:	ef e4       	ldi	r30, 0x4F	; 79
     d2a:	f0 e0       	ldi	r31, 0x00	; 0
     d2c:	80 81       	ld	r24, Z
     d2e:	80 68       	ori	r24, 0x80	; 128
     d30:	8c 93       	st	X, r24
	
	//enable ctc interrupt
	SET_BIT(TIMSK_REG,OCIE1A); 
     d32:	a9 e5       	ldi	r26, 0x59	; 89
     d34:	b0 e0       	ldi	r27, 0x00	; 0
     d36:	e9 e5       	ldi	r30, 0x59	; 89
     d38:	f0 e0       	ldi	r31, 0x00	; 0
     d3a:	80 81       	ld	r24, Z
     d3c:	80 61       	ori	r24, 0x10	; 16
     d3e:	8c 93       	st	X, r24
	//to enable Global Interrupt
	SET_BIT(SREG_REG,GIE);	
     d40:	af e5       	ldi	r26, 0x5F	; 95
     d42:	b0 e0       	ldi	r27, 0x00	; 0
     d44:	ef e5       	ldi	r30, 0x5F	; 95
     d46:	f0 e0       	ldi	r31, 0x00	; 0
     d48:	80 81       	ld	r24, Z
     d4a:	80 68       	ori	r24, 0x80	; 128
     d4c:	8c 93       	st	X, r24
}
     d4e:	cf 91       	pop	r28
     d50:	df 91       	pop	r29
     d52:	08 95       	ret

00000d54 <TIMER1_voidSetTime>:


void TIMER1_voidSetTime(u32 copy_u32DesiredTime)
{
     d54:	ef 92       	push	r14
     d56:	ff 92       	push	r15
     d58:	0f 93       	push	r16
     d5a:	1f 93       	push	r17
     d5c:	df 93       	push	r29
     d5e:	cf 93       	push	r28
     d60:	cd b7       	in	r28, 0x3d	; 61
     d62:	de b7       	in	r29, 0x3e	; 62
     d64:	2a 97       	sbiw	r28, 0x0a	; 10
     d66:	0f b6       	in	r0, 0x3f	; 63
     d68:	f8 94       	cli
     d6a:	de bf       	out	0x3e, r29	; 62
     d6c:	0f be       	out	0x3f, r0	; 63
     d6e:	cd bf       	out	0x3d, r28	; 61
     d70:	6f 83       	std	Y+7, r22	; 0x07
     d72:	78 87       	std	Y+8, r23	; 0x08
     d74:	89 87       	std	Y+9, r24	; 0x09
     d76:	9a 87       	std	Y+10, r25	; 0x0a
	u32 tick_time = (TIMER1_PRESCALAR/CRYSTAL_FREQ);
     d78:	84 e0       	ldi	r24, 0x04	; 4
     d7a:	90 e0       	ldi	r25, 0x00	; 0
     d7c:	a0 e0       	ldi	r26, 0x00	; 0
     d7e:	b0 e0       	ldi	r27, 0x00	; 0
     d80:	8b 83       	std	Y+3, r24	; 0x03
     d82:	9c 83       	std	Y+4, r25	; 0x04
     d84:	ad 83       	std	Y+5, r26	; 0x05
     d86:	be 83       	std	Y+6, r27	; 0x06
	total_ticks   = ((copy_u32DesiredTime*1000)/tick_time);
     d88:	8f 81       	ldd	r24, Y+7	; 0x07
     d8a:	98 85       	ldd	r25, Y+8	; 0x08
     d8c:	a9 85       	ldd	r26, Y+9	; 0x09
     d8e:	ba 85       	ldd	r27, Y+10	; 0x0a
     d90:	28 ee       	ldi	r18, 0xE8	; 232
     d92:	33 e0       	ldi	r19, 0x03	; 3
     d94:	40 e0       	ldi	r20, 0x00	; 0
     d96:	50 e0       	ldi	r21, 0x00	; 0
     d98:	bc 01       	movw	r22, r24
     d9a:	cd 01       	movw	r24, r26
     d9c:	0e 94 af 29 	call	0x535e	; 0x535e <__mulsi3>
     da0:	dc 01       	movw	r26, r24
     da2:	cb 01       	movw	r24, r22
     da4:	2b 81       	ldd	r18, Y+3	; 0x03
     da6:	3c 81       	ldd	r19, Y+4	; 0x04
     da8:	4d 81       	ldd	r20, Y+5	; 0x05
     daa:	5e 81       	ldd	r21, Y+6	; 0x06
     dac:	bc 01       	movw	r22, r24
     dae:	cd 01       	movw	r24, r26
     db0:	0e 94 e2 29 	call	0x53c4	; 0x53c4 <__udivmodsi4>
     db4:	da 01       	movw	r26, r20
     db6:	c9 01       	movw	r24, r18
     db8:	80 93 44 02 	sts	0x0244, r24
     dbc:	90 93 45 02 	sts	0x0245, r25
     dc0:	a0 93 46 02 	sts	0x0246, r26
     dc4:	b0 93 47 02 	sts	0x0247, r27
	u16 ocr_value = 0xFFFF ;
     dc8:	8f ef       	ldi	r24, 0xFF	; 255
     dca:	9f ef       	ldi	r25, 0xFF	; 255
     dcc:	9a 83       	std	Y+2, r25	; 0x02
     dce:	89 83       	std	Y+1, r24	; 0x01
     dd0:	05 c0       	rjmp	.+10     	; 0xddc <TIMER1_voidSetTime+0x88>
	while(total_ticks%ocr_value != 0)
	{
		ocr_value--;
     dd2:	89 81       	ldd	r24, Y+1	; 0x01
     dd4:	9a 81       	ldd	r25, Y+2	; 0x02
     dd6:	01 97       	sbiw	r24, 0x01	; 1
     dd8:	9a 83       	std	Y+2, r25	; 0x02
     dda:	89 83       	std	Y+1, r24	; 0x01
void TIMER1_voidSetTime(u32 copy_u32DesiredTime)
{
	u32 tick_time = (TIMER1_PRESCALAR/CRYSTAL_FREQ);
	total_ticks   = ((copy_u32DesiredTime*1000)/tick_time);
	u16 ocr_value = 0xFFFF ;
	while(total_ticks%ocr_value != 0)
     ddc:	e0 90 44 02 	lds	r14, 0x0244
     de0:	f0 90 45 02 	lds	r15, 0x0245
     de4:	00 91 46 02 	lds	r16, 0x0246
     de8:	10 91 47 02 	lds	r17, 0x0247
     dec:	89 81       	ldd	r24, Y+1	; 0x01
     dee:	9a 81       	ldd	r25, Y+2	; 0x02
     df0:	9c 01       	movw	r18, r24
     df2:	40 e0       	ldi	r20, 0x00	; 0
     df4:	50 e0       	ldi	r21, 0x00	; 0
     df6:	c8 01       	movw	r24, r16
     df8:	b7 01       	movw	r22, r14
     dfa:	0e 94 e2 29 	call	0x53c4	; 0x53c4 <__udivmodsi4>
     dfe:	dc 01       	movw	r26, r24
     e00:	cb 01       	movw	r24, r22
     e02:	00 97       	sbiw	r24, 0x00	; 0
     e04:	a1 05       	cpc	r26, r1
     e06:	b1 05       	cpc	r27, r1
     e08:	21 f7       	brne	.-56     	; 0xdd2 <TIMER1_voidSetTime+0x7e>
	{
		ocr_value--;
	}
	num_of_cm_timer1 = total_ticks/ocr_value;
     e0a:	e0 90 44 02 	lds	r14, 0x0244
     e0e:	f0 90 45 02 	lds	r15, 0x0245
     e12:	00 91 46 02 	lds	r16, 0x0246
     e16:	10 91 47 02 	lds	r17, 0x0247
     e1a:	89 81       	ldd	r24, Y+1	; 0x01
     e1c:	9a 81       	ldd	r25, Y+2	; 0x02
     e1e:	9c 01       	movw	r18, r24
     e20:	40 e0       	ldi	r20, 0x00	; 0
     e22:	50 e0       	ldi	r21, 0x00	; 0
     e24:	c8 01       	movw	r24, r16
     e26:	b7 01       	movw	r22, r14
     e28:	0e 94 e2 29 	call	0x53c4	; 0x53c4 <__udivmodsi4>
     e2c:	da 01       	movw	r26, r20
     e2e:	c9 01       	movw	r24, r18
     e30:	80 93 3c 02 	sts	0x023C, r24
     e34:	90 93 3d 02 	sts	0x023D, r25
     e38:	a0 93 3e 02 	sts	0x023E, r26
     e3c:	b0 93 3f 02 	sts	0x023F, r27
	OCRA1_REG = ocr_value - 1;
     e40:	ea e4       	ldi	r30, 0x4A	; 74
     e42:	f0 e0       	ldi	r31, 0x00	; 0
     e44:	89 81       	ldd	r24, Y+1	; 0x01
     e46:	9a 81       	ldd	r25, Y+2	; 0x02
     e48:	01 97       	sbiw	r24, 0x01	; 1
     e4a:	91 83       	std	Z+1, r25	; 0x01
     e4c:	80 83       	st	Z, r24
}
     e4e:	2a 96       	adiw	r28, 0x0a	; 10
     e50:	0f b6       	in	r0, 0x3f	; 63
     e52:	f8 94       	cli
     e54:	de bf       	out	0x3e, r29	; 62
     e56:	0f be       	out	0x3f, r0	; 63
     e58:	cd bf       	out	0x3d, r28	; 61
     e5a:	cf 91       	pop	r28
     e5c:	df 91       	pop	r29
     e5e:	1f 91       	pop	r17
     e60:	0f 91       	pop	r16
     e62:	ff 90       	pop	r15
     e64:	ef 90       	pop	r14
     e66:	08 95       	ret

00000e68 <TIMER1_voidStart>:

void TIMER1_voidStart(void)
{
     e68:	df 93       	push	r29
     e6a:	cf 93       	push	r28
     e6c:	cd b7       	in	r28, 0x3d	; 61
     e6e:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TCCR1B_REG,CS10);
     e70:	ae e4       	ldi	r26, 0x4E	; 78
     e72:	b0 e0       	ldi	r27, 0x00	; 0
     e74:	ee e4       	ldi	r30, 0x4E	; 78
     e76:	f0 e0       	ldi	r31, 0x00	; 0
     e78:	80 81       	ld	r24, Z
     e7a:	81 60       	ori	r24, 0x01	; 1
     e7c:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B_REG,CS11);
     e7e:	ae e4       	ldi	r26, 0x4E	; 78
     e80:	b0 e0       	ldi	r27, 0x00	; 0
     e82:	ee e4       	ldi	r30, 0x4E	; 78
     e84:	f0 e0       	ldi	r31, 0x00	; 0
     e86:	80 81       	ld	r24, Z
     e88:	8d 7f       	andi	r24, 0xFD	; 253
     e8a:	8c 93       	st	X, r24
	SET_BIT(TCCR1B_REG,CS12);
     e8c:	ae e4       	ldi	r26, 0x4E	; 78
     e8e:	b0 e0       	ldi	r27, 0x00	; 0
     e90:	ee e4       	ldi	r30, 0x4E	; 78
     e92:	f0 e0       	ldi	r31, 0x00	; 0
     e94:	80 81       	ld	r24, Z
     e96:	84 60       	ori	r24, 0x04	; 4
     e98:	8c 93       	st	X, r24
}
     e9a:	cf 91       	pop	r28
     e9c:	df 91       	pop	r29
     e9e:	08 95       	ret

00000ea0 <TIMER1_voidStop>:

void TIMER1_voidStop(void)
{
     ea0:	df 93       	push	r29
     ea2:	cf 93       	push	r28
     ea4:	cd b7       	in	r28, 0x3d	; 61
     ea6:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TCCR1B_REG,CS10);
     ea8:	ae e4       	ldi	r26, 0x4E	; 78
     eaa:	b0 e0       	ldi	r27, 0x00	; 0
     eac:	ee e4       	ldi	r30, 0x4E	; 78
     eae:	f0 e0       	ldi	r31, 0x00	; 0
     eb0:	80 81       	ld	r24, Z
     eb2:	8e 7f       	andi	r24, 0xFE	; 254
     eb4:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B_REG,CS11);
     eb6:	ae e4       	ldi	r26, 0x4E	; 78
     eb8:	b0 e0       	ldi	r27, 0x00	; 0
     eba:	ee e4       	ldi	r30, 0x4E	; 78
     ebc:	f0 e0       	ldi	r31, 0x00	; 0
     ebe:	80 81       	ld	r24, Z
     ec0:	8d 7f       	andi	r24, 0xFD	; 253
     ec2:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B_REG,CS12);
     ec4:	ae e4       	ldi	r26, 0x4E	; 78
     ec6:	b0 e0       	ldi	r27, 0x00	; 0
     ec8:	ee e4       	ldi	r30, 0x4E	; 78
     eca:	f0 e0       	ldi	r31, 0x00	; 0
     ecc:	80 81       	ld	r24, Z
     ece:	8b 7f       	andi	r24, 0xFB	; 251
     ed0:	8c 93       	st	X, r24
}
     ed2:	cf 91       	pop	r28
     ed4:	df 91       	pop	r29
     ed6:	08 95       	ret

00000ed8 <PWM1_voidInit>:

void PWM1_voidInit(void)
{
     ed8:	df 93       	push	r29
     eda:	cf 93       	push	r28
     edc:	cd b7       	in	r28, 0x3d	; 61
     ede:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(DDRD_REG,5);
     ee0:	a1 e3       	ldi	r26, 0x31	; 49
     ee2:	b0 e0       	ldi	r27, 0x00	; 0
     ee4:	e1 e3       	ldi	r30, 0x31	; 49
     ee6:	f0 e0       	ldi	r31, 0x00	; 0
     ee8:	80 81       	ld	r24, Z
     eea:	80 62       	ori	r24, 0x20	; 32
     eec:	8c 93       	st	X, r24
	//to select fast pwm mode
	CLR_BIT(TCCR1A_REG,WGM10);
     eee:	af e4       	ldi	r26, 0x4F	; 79
     ef0:	b0 e0       	ldi	r27, 0x00	; 0
     ef2:	ef e4       	ldi	r30, 0x4F	; 79
     ef4:	f0 e0       	ldi	r31, 0x00	; 0
     ef6:	80 81       	ld	r24, Z
     ef8:	8e 7f       	andi	r24, 0xFE	; 254
     efa:	8c 93       	st	X, r24
	SET_BIT(TCCR1A_REG,WGM11);
     efc:	af e4       	ldi	r26, 0x4F	; 79
     efe:	b0 e0       	ldi	r27, 0x00	; 0
     f00:	ef e4       	ldi	r30, 0x4F	; 79
     f02:	f0 e0       	ldi	r31, 0x00	; 0
     f04:	80 81       	ld	r24, Z
     f06:	82 60       	ori	r24, 0x02	; 2
     f08:	8c 93       	st	X, r24
	SET_BIT(TCCR1B_REG,WGM11);
     f0a:	ae e4       	ldi	r26, 0x4E	; 78
     f0c:	b0 e0       	ldi	r27, 0x00	; 0
     f0e:	ee e4       	ldi	r30, 0x4E	; 78
     f10:	f0 e0       	ldi	r31, 0x00	; 0
     f12:	80 81       	ld	r24, Z
     f14:	82 60       	ori	r24, 0x02	; 2
     f16:	8c 93       	st	X, r24
	SET_BIT(TCCR1B_REG,WGM11);
     f18:	ae e4       	ldi	r26, 0x4E	; 78
     f1a:	b0 e0       	ldi	r27, 0x00	; 0
     f1c:	ee e4       	ldi	r30, 0x4E	; 78
     f1e:	f0 e0       	ldi	r31, 0x00	; 0
     f20:	80 81       	ld	r24, Z
     f22:	82 60       	ori	r24, 0x02	; 2
     f24:	8c 93       	st	X, r24
	
	//to select non-inverted mode
	CLR_BIT(TCCR1A_REG,COM1A0);
     f26:	af e4       	ldi	r26, 0x4F	; 79
     f28:	b0 e0       	ldi	r27, 0x00	; 0
     f2a:	ef e4       	ldi	r30, 0x4F	; 79
     f2c:	f0 e0       	ldi	r31, 0x00	; 0
     f2e:	80 81       	ld	r24, Z
     f30:	8f 7b       	andi	r24, 0xBF	; 191
     f32:	8c 93       	st	X, r24
	SET_BIT(TCCR1A_REG,COM1A1);
     f34:	af e4       	ldi	r26, 0x4F	; 79
     f36:	b0 e0       	ldi	r27, 0x00	; 0
     f38:	ef e4       	ldi	r30, 0x4F	; 79
     f3a:	f0 e0       	ldi	r31, 0x00	; 0
     f3c:	80 81       	ld	r24, Z
     f3e:	80 68       	ori	r24, 0x80	; 128
     f40:	8c 93       	st	X, r24
}
     f42:	cf 91       	pop	r28
     f44:	df 91       	pop	r29
     f46:	08 95       	ret

00000f48 <PWM1_voidSetDutyCycle>:

void PWM1_voidSetDutyCycle(u32 copy_u32DutyCycle)
{
     f48:	0f 93       	push	r16
     f4a:	1f 93       	push	r17
     f4c:	df 93       	push	r29
     f4e:	cf 93       	push	r28
     f50:	00 d0       	rcall	.+0      	; 0xf52 <PWM1_voidSetDutyCycle+0xa>
     f52:	00 d0       	rcall	.+0      	; 0xf54 <PWM1_voidSetDutyCycle+0xc>
     f54:	cd b7       	in	r28, 0x3d	; 61
     f56:	de b7       	in	r29, 0x3e	; 62
     f58:	69 83       	std	Y+1, r22	; 0x01
     f5a:	7a 83       	std	Y+2, r23	; 0x02
     f5c:	8b 83       	std	Y+3, r24	; 0x03
     f5e:	9c 83       	std	Y+4, r25	; 0x04
	OCRA1_REG =(((312*(u32)copy_u32DutyCycle)/100)-1);
     f60:	0a e4       	ldi	r16, 0x4A	; 74
     f62:	10 e0       	ldi	r17, 0x00	; 0
     f64:	89 81       	ldd	r24, Y+1	; 0x01
     f66:	9a 81       	ldd	r25, Y+2	; 0x02
     f68:	ab 81       	ldd	r26, Y+3	; 0x03
     f6a:	bc 81       	ldd	r27, Y+4	; 0x04
     f6c:	28 e3       	ldi	r18, 0x38	; 56
     f6e:	31 e0       	ldi	r19, 0x01	; 1
     f70:	40 e0       	ldi	r20, 0x00	; 0
     f72:	50 e0       	ldi	r21, 0x00	; 0
     f74:	bc 01       	movw	r22, r24
     f76:	cd 01       	movw	r24, r26
     f78:	0e 94 af 29 	call	0x535e	; 0x535e <__mulsi3>
     f7c:	dc 01       	movw	r26, r24
     f7e:	cb 01       	movw	r24, r22
     f80:	24 e6       	ldi	r18, 0x64	; 100
     f82:	30 e0       	ldi	r19, 0x00	; 0
     f84:	40 e0       	ldi	r20, 0x00	; 0
     f86:	50 e0       	ldi	r21, 0x00	; 0
     f88:	bc 01       	movw	r22, r24
     f8a:	cd 01       	movw	r24, r26
     f8c:	0e 94 e2 29 	call	0x53c4	; 0x53c4 <__udivmodsi4>
     f90:	da 01       	movw	r26, r20
     f92:	c9 01       	movw	r24, r18
     f94:	01 97       	sbiw	r24, 0x01	; 1
     f96:	f8 01       	movw	r30, r16
     f98:	91 83       	std	Z+1, r25	; 0x01
     f9a:	80 83       	st	Z, r24
}
     f9c:	0f 90       	pop	r0
     f9e:	0f 90       	pop	r0
     fa0:	0f 90       	pop	r0
     fa2:	0f 90       	pop	r0
     fa4:	cf 91       	pop	r28
     fa6:	df 91       	pop	r29
     fa8:	1f 91       	pop	r17
     faa:	0f 91       	pop	r16
     fac:	08 95       	ret

00000fae <PWM1_voidSetFrequency>:

void PWM1_voidSetFrequency(u32 copy_u32frq)
{
     fae:	0f 93       	push	r16
     fb0:	1f 93       	push	r17
     fb2:	df 93       	push	r29
     fb4:	cf 93       	push	r28
     fb6:	00 d0       	rcall	.+0      	; 0xfb8 <PWM1_voidSetFrequency+0xa>
     fb8:	00 d0       	rcall	.+0      	; 0xfba <PWM1_voidSetFrequency+0xc>
     fba:	cd b7       	in	r28, 0x3d	; 61
     fbc:	de b7       	in	r29, 0x3e	; 62
     fbe:	69 83       	std	Y+1, r22	; 0x01
     fc0:	7a 83       	std	Y+2, r23	; 0x02
     fc2:	8b 83       	std	Y+3, r24	; 0x03
     fc4:	9c 83       	std	Y+4, r25	; 0x04
	ICR1_REG = ((CRYSTAL_FREQ*1000000)/TIMER1_PRESCALAR)*copy_u32frq;
     fc6:	06 e4       	ldi	r16, 0x46	; 70
     fc8:	10 e0       	ldi	r17, 0x00	; 0
     fca:	89 81       	ldd	r24, Y+1	; 0x01
     fcc:	9a 81       	ldd	r25, Y+2	; 0x02
     fce:	ab 81       	ldd	r26, Y+3	; 0x03
     fd0:	bc 81       	ldd	r27, Y+4	; 0x04
     fd2:	20 e9       	ldi	r18, 0x90	; 144
     fd4:	30 ed       	ldi	r19, 0xD0	; 208
     fd6:	43 e0       	ldi	r20, 0x03	; 3
     fd8:	50 e0       	ldi	r21, 0x00	; 0
     fda:	bc 01       	movw	r22, r24
     fdc:	cd 01       	movw	r24, r26
     fde:	0e 94 af 29 	call	0x535e	; 0x535e <__mulsi3>
     fe2:	dc 01       	movw	r26, r24
     fe4:	cb 01       	movw	r24, r22
     fe6:	f8 01       	movw	r30, r16
     fe8:	91 83       	std	Z+1, r25	; 0x01
     fea:	80 83       	st	Z, r24
}
     fec:	0f 90       	pop	r0
     fee:	0f 90       	pop	r0
     ff0:	0f 90       	pop	r0
     ff2:	0f 90       	pop	r0
     ff4:	cf 91       	pop	r28
     ff6:	df 91       	pop	r29
     ff8:	1f 91       	pop	r17
     ffa:	0f 91       	pop	r16
     ffc:	08 95       	ret

00000ffe <PWM1_voidStart>:

void PWM1_voidStart(void)
{
     ffe:	df 93       	push	r29
    1000:	cf 93       	push	r28
    1002:	cd b7       	in	r28, 0x3d	; 61
    1004:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TCCR1B_REG,CS10);
    1006:	ae e4       	ldi	r26, 0x4E	; 78
    1008:	b0 e0       	ldi	r27, 0x00	; 0
    100a:	ee e4       	ldi	r30, 0x4E	; 78
    100c:	f0 e0       	ldi	r31, 0x00	; 0
    100e:	80 81       	ld	r24, Z
    1010:	81 60       	ori	r24, 0x01	; 1
    1012:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B_REG,CS11);
    1014:	ae e4       	ldi	r26, 0x4E	; 78
    1016:	b0 e0       	ldi	r27, 0x00	; 0
    1018:	ee e4       	ldi	r30, 0x4E	; 78
    101a:	f0 e0       	ldi	r31, 0x00	; 0
    101c:	80 81       	ld	r24, Z
    101e:	8d 7f       	andi	r24, 0xFD	; 253
    1020:	8c 93       	st	X, r24
	SET_BIT(TCCR1B_REG,CS12);	
    1022:	ae e4       	ldi	r26, 0x4E	; 78
    1024:	b0 e0       	ldi	r27, 0x00	; 0
    1026:	ee e4       	ldi	r30, 0x4E	; 78
    1028:	f0 e0       	ldi	r31, 0x00	; 0
    102a:	80 81       	ld	r24, Z
    102c:	84 60       	ori	r24, 0x04	; 4
    102e:	8c 93       	st	X, r24
}
    1030:	cf 91       	pop	r28
    1032:	df 91       	pop	r29
    1034:	08 95       	ret

00001036 <PWM1_voidStop>:

void PWM1_voidStop(void)
{
    1036:	df 93       	push	r29
    1038:	cf 93       	push	r28
    103a:	cd b7       	in	r28, 0x3d	; 61
    103c:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TCCR1B_REG,CS10);
    103e:	ae e4       	ldi	r26, 0x4E	; 78
    1040:	b0 e0       	ldi	r27, 0x00	; 0
    1042:	ee e4       	ldi	r30, 0x4E	; 78
    1044:	f0 e0       	ldi	r31, 0x00	; 0
    1046:	80 81       	ld	r24, Z
    1048:	8e 7f       	andi	r24, 0xFE	; 254
    104a:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B_REG,CS11);
    104c:	ae e4       	ldi	r26, 0x4E	; 78
    104e:	b0 e0       	ldi	r27, 0x00	; 0
    1050:	ee e4       	ldi	r30, 0x4E	; 78
    1052:	f0 e0       	ldi	r31, 0x00	; 0
    1054:	80 81       	ld	r24, Z
    1056:	8d 7f       	andi	r24, 0xFD	; 253
    1058:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B_REG,CS12);
    105a:	ae e4       	ldi	r26, 0x4E	; 78
    105c:	b0 e0       	ldi	r27, 0x00	; 0
    105e:	ee e4       	ldi	r30, 0x4E	; 78
    1060:	f0 e0       	ldi	r31, 0x00	; 0
    1062:	80 81       	ld	r24, Z
    1064:	8b 7f       	andi	r24, 0xFB	; 251
    1066:	8c 93       	st	X, r24
}
    1068:	cf 91       	pop	r28
    106a:	df 91       	pop	r29
    106c:	08 95       	ret

0000106e <TIMER1_voidSetCallBack>:


void TIMER1_voidSetCallBack(void(*ptr)(void))
{
    106e:	df 93       	push	r29
    1070:	cf 93       	push	r28
    1072:	00 d0       	rcall	.+0      	; 0x1074 <TIMER1_voidSetCallBack+0x6>
    1074:	cd b7       	in	r28, 0x3d	; 61
    1076:	de b7       	in	r29, 0x3e	; 62
    1078:	9a 83       	std	Y+2, r25	; 0x02
    107a:	89 83       	std	Y+1, r24	; 0x01
	TIMER1_CALL_BACK = ptr ;
    107c:	89 81       	ldd	r24, Y+1	; 0x01
    107e:	9a 81       	ldd	r25, Y+2	; 0x02
    1080:	90 93 68 02 	sts	0x0268, r25
    1084:	80 93 67 02 	sts	0x0267, r24
}
    1088:	0f 90       	pop	r0
    108a:	0f 90       	pop	r0
    108c:	cf 91       	pop	r28
    108e:	df 91       	pop	r29
    1090:	08 95       	ret

00001092 <__vector_7>:

ISR(TIMER1_COMPA_vect)
{
    1092:	1f 92       	push	r1
    1094:	0f 92       	push	r0
    1096:	0f b6       	in	r0, 0x3f	; 63
    1098:	0f 92       	push	r0
    109a:	11 24       	eor	r1, r1
    109c:	2f 93       	push	r18
    109e:	3f 93       	push	r19
    10a0:	4f 93       	push	r20
    10a2:	5f 93       	push	r21
    10a4:	6f 93       	push	r22
    10a6:	7f 93       	push	r23
    10a8:	8f 93       	push	r24
    10aa:	9f 93       	push	r25
    10ac:	af 93       	push	r26
    10ae:	bf 93       	push	r27
    10b0:	ef 93       	push	r30
    10b2:	ff 93       	push	r31
    10b4:	df 93       	push	r29
    10b6:	cf 93       	push	r28
    10b8:	cd b7       	in	r28, 0x3d	; 61
    10ba:	de b7       	in	r29, 0x3e	; 62
	static u32 counter = 0;
	counter++;
    10bc:	80 91 48 02 	lds	r24, 0x0248
    10c0:	90 91 49 02 	lds	r25, 0x0249
    10c4:	a0 91 4a 02 	lds	r26, 0x024A
    10c8:	b0 91 4b 02 	lds	r27, 0x024B
    10cc:	01 96       	adiw	r24, 0x01	; 1
    10ce:	a1 1d       	adc	r26, r1
    10d0:	b1 1d       	adc	r27, r1
    10d2:	80 93 48 02 	sts	0x0248, r24
    10d6:	90 93 49 02 	sts	0x0249, r25
    10da:	a0 93 4a 02 	sts	0x024A, r26
    10de:	b0 93 4b 02 	sts	0x024B, r27
	if(counter == num_of_cm_timer1)
    10e2:	20 91 48 02 	lds	r18, 0x0248
    10e6:	30 91 49 02 	lds	r19, 0x0249
    10ea:	40 91 4a 02 	lds	r20, 0x024A
    10ee:	50 91 4b 02 	lds	r21, 0x024B
    10f2:	80 91 3c 02 	lds	r24, 0x023C
    10f6:	90 91 3d 02 	lds	r25, 0x023D
    10fa:	a0 91 3e 02 	lds	r26, 0x023E
    10fe:	b0 91 3f 02 	lds	r27, 0x023F
    1102:	28 17       	cp	r18, r24
    1104:	39 07       	cpc	r19, r25
    1106:	4a 07       	cpc	r20, r26
    1108:	5b 07       	cpc	r21, r27
    110a:	69 f4       	brne	.+26     	; 0x1126 <__vector_7+0x94>
	{
		TIMER1_CALL_BACK();
    110c:	e0 91 67 02 	lds	r30, 0x0267
    1110:	f0 91 68 02 	lds	r31, 0x0268
    1114:	09 95       	icall
		counter = 0;
    1116:	10 92 48 02 	sts	0x0248, r1
    111a:	10 92 49 02 	sts	0x0249, r1
    111e:	10 92 4a 02 	sts	0x024A, r1
    1122:	10 92 4b 02 	sts	0x024B, r1
	}
}
    1126:	cf 91       	pop	r28
    1128:	df 91       	pop	r29
    112a:	ff 91       	pop	r31
    112c:	ef 91       	pop	r30
    112e:	bf 91       	pop	r27
    1130:	af 91       	pop	r26
    1132:	9f 91       	pop	r25
    1134:	8f 91       	pop	r24
    1136:	7f 91       	pop	r23
    1138:	6f 91       	pop	r22
    113a:	5f 91       	pop	r21
    113c:	4f 91       	pop	r20
    113e:	3f 91       	pop	r19
    1140:	2f 91       	pop	r18
    1142:	0f 90       	pop	r0
    1144:	0f be       	out	0x3f, r0	; 63
    1146:	0f 90       	pop	r0
    1148:	1f 90       	pop	r1
    114a:	18 95       	reti

0000114c <TIMER0_voidInit>:
void (*TIMER0_CALL_BACK)(void);
void (*TIMER0_CALL_BACK_1)(void);
void (*TIMER0_CALL_BACK_2)(void);

void TIMER0_voidInit(void)
{
    114c:	df 93       	push	r29
    114e:	cf 93       	push	r28
    1150:	cd b7       	in	r28, 0x3d	; 61
    1152:	de b7       	in	r29, 0x3e	; 62
	#if TIMER0_MODE	== NORMAL_MODE
	//to select Normal Mode
	CLR_BIT(TCCR0_REG,WGM00);
    1154:	a3 e5       	ldi	r26, 0x53	; 83
    1156:	b0 e0       	ldi	r27, 0x00	; 0
    1158:	e3 e5       	ldi	r30, 0x53	; 83
    115a:	f0 e0       	ldi	r31, 0x00	; 0
    115c:	80 81       	ld	r24, Z
    115e:	8f 7b       	andi	r24, 0xBF	; 191
    1160:	8c 93       	st	X, r24
	CLR_BIT(TCCR0_REG,WGM01);
    1162:	a3 e5       	ldi	r26, 0x53	; 83
    1164:	b0 e0       	ldi	r27, 0x00	; 0
    1166:	e3 e5       	ldi	r30, 0x53	; 83
    1168:	f0 e0       	ldi	r31, 0x00	; 0
    116a:	80 81       	ld	r24, Z
    116c:	87 7f       	andi	r24, 0xF7	; 247
    116e:	8c 93       	st	X, r24
	//to enable OVF Interrupt
	SET_BIT(TIMSK_REG,0);
    1170:	a9 e5       	ldi	r26, 0x59	; 89
    1172:	b0 e0       	ldi	r27, 0x00	; 0
    1174:	e9 e5       	ldi	r30, 0x59	; 89
    1176:	f0 e0       	ldi	r31, 0x00	; 0
    1178:	80 81       	ld	r24, Z
    117a:	81 60       	ori	r24, 0x01	; 1
    117c:	8c 93       	st	X, r24
	SET_BIT(TCCR0_REG,WGM01);
	//to enable CTC Interrupt
	SET_BIT(TIMSK_REG,1);
	#endif
	//to enable Global Interrupt
	SET_BIT(SREG_REG,GIE);	
    117e:	af e5       	ldi	r26, 0x5F	; 95
    1180:	b0 e0       	ldi	r27, 0x00	; 0
    1182:	ef e5       	ldi	r30, 0x5F	; 95
    1184:	f0 e0       	ldi	r31, 0x00	; 0
    1186:	80 81       	ld	r24, Z
    1188:	80 68       	ori	r24, 0x80	; 128
    118a:	8c 93       	st	X, r24
}
    118c:	cf 91       	pop	r28
    118e:	df 91       	pop	r29
    1190:	08 95       	ret

00001192 <TIMER0_voidSetTime>:

void TIMER0_voidSetTime(u32 copy_u32DesiredTime)
{
    1192:	df 93       	push	r29
    1194:	cf 93       	push	r28
    1196:	cd b7       	in	r28, 0x3d	; 61
    1198:	de b7       	in	r29, 0x3e	; 62
    119a:	28 97       	sbiw	r28, 0x08	; 8
    119c:	0f b6       	in	r0, 0x3f	; 63
    119e:	f8 94       	cli
    11a0:	de bf       	out	0x3e, r29	; 62
    11a2:	0f be       	out	0x3f, r0	; 63
    11a4:	cd bf       	out	0x3d, r28	; 61
    11a6:	6d 83       	std	Y+5, r22	; 0x05
    11a8:	7e 83       	std	Y+6, r23	; 0x06
    11aa:	8f 83       	std	Y+7, r24	; 0x07
    11ac:	98 87       	std	Y+8, r25	; 0x08
	u32 tick_time = (TIMER0_PRESCALAR/CRYSTAL_FREQ);
    11ae:	80 e4       	ldi	r24, 0x40	; 64
    11b0:	90 e0       	ldi	r25, 0x00	; 0
    11b2:	a0 e0       	ldi	r26, 0x00	; 0
    11b4:	b0 e0       	ldi	r27, 0x00	; 0
    11b6:	89 83       	std	Y+1, r24	; 0x01
    11b8:	9a 83       	std	Y+2, r25	; 0x02
    11ba:	ab 83       	std	Y+3, r26	; 0x03
    11bc:	bc 83       	std	Y+4, r27	; 0x04
	total_ticks   = ((copy_u32DesiredTime*1000)/tick_time); 
    11be:	8d 81       	ldd	r24, Y+5	; 0x05
    11c0:	9e 81       	ldd	r25, Y+6	; 0x06
    11c2:	af 81       	ldd	r26, Y+7	; 0x07
    11c4:	b8 85       	ldd	r27, Y+8	; 0x08
    11c6:	28 ee       	ldi	r18, 0xE8	; 232
    11c8:	33 e0       	ldi	r19, 0x03	; 3
    11ca:	40 e0       	ldi	r20, 0x00	; 0
    11cc:	50 e0       	ldi	r21, 0x00	; 0
    11ce:	bc 01       	movw	r22, r24
    11d0:	cd 01       	movw	r24, r26
    11d2:	0e 94 af 29 	call	0x535e	; 0x535e <__mulsi3>
    11d6:	dc 01       	movw	r26, r24
    11d8:	cb 01       	movw	r24, r22
    11da:	29 81       	ldd	r18, Y+1	; 0x01
    11dc:	3a 81       	ldd	r19, Y+2	; 0x02
    11de:	4b 81       	ldd	r20, Y+3	; 0x03
    11e0:	5c 81       	ldd	r21, Y+4	; 0x04
    11e2:	bc 01       	movw	r22, r24
    11e4:	cd 01       	movw	r24, r26
    11e6:	0e 94 e2 29 	call	0x53c4	; 0x53c4 <__udivmodsi4>
    11ea:	da 01       	movw	r26, r20
    11ec:	c9 01       	movw	r24, r18
    11ee:	80 93 54 02 	sts	0x0254, r24
    11f2:	90 93 55 02 	sts	0x0255, r25
    11f6:	a0 93 56 02 	sts	0x0256, r26
    11fa:	b0 93 57 02 	sts	0x0257, r27
	#if TIMER0_MODE == NORMAL_MODE
	num_of_ovf = total_ticks/256;
    11fe:	80 91 54 02 	lds	r24, 0x0254
    1202:	90 91 55 02 	lds	r25, 0x0255
    1206:	a0 91 56 02 	lds	r26, 0x0256
    120a:	b0 91 57 02 	lds	r27, 0x0257
    120e:	89 2f       	mov	r24, r25
    1210:	9a 2f       	mov	r25, r26
    1212:	ab 2f       	mov	r26, r27
    1214:	bb 27       	eor	r27, r27
    1216:	80 93 50 02 	sts	0x0250, r24
    121a:	90 93 51 02 	sts	0x0251, r25
    121e:	a0 93 52 02 	sts	0x0252, r26
    1222:	b0 93 53 02 	sts	0x0253, r27
	if(total_ticks%256 !=0)
    1226:	80 91 54 02 	lds	r24, 0x0254
    122a:	90 91 55 02 	lds	r25, 0x0255
    122e:	a0 91 56 02 	lds	r26, 0x0256
    1232:	b0 91 57 02 	lds	r27, 0x0257
    1236:	90 70       	andi	r25, 0x00	; 0
    1238:	a0 70       	andi	r26, 0x00	; 0
    123a:	b0 70       	andi	r27, 0x00	; 0
    123c:	00 97       	sbiw	r24, 0x00	; 0
    123e:	a1 05       	cpc	r26, r1
    1240:	b1 05       	cpc	r27, r1
    1242:	f9 f0       	breq	.+62     	; 0x1282 <TIMER0_voidSetTime+0xf0>
	{
		TCNT0_REG = (256 - (total_ticks%256));
    1244:	e2 e5       	ldi	r30, 0x52	; 82
    1246:	f0 e0       	ldi	r31, 0x00	; 0
    1248:	80 91 54 02 	lds	r24, 0x0254
    124c:	90 91 55 02 	lds	r25, 0x0255
    1250:	a0 91 56 02 	lds	r26, 0x0256
    1254:	b0 91 57 02 	lds	r27, 0x0257
    1258:	81 95       	neg	r24
    125a:	80 83       	st	Z, r24
		num_of_ovf++;
    125c:	80 91 50 02 	lds	r24, 0x0250
    1260:	90 91 51 02 	lds	r25, 0x0251
    1264:	a0 91 52 02 	lds	r26, 0x0252
    1268:	b0 91 53 02 	lds	r27, 0x0253
    126c:	01 96       	adiw	r24, 0x01	; 1
    126e:	a1 1d       	adc	r26, r1
    1270:	b1 1d       	adc	r27, r1
    1272:	80 93 50 02 	sts	0x0250, r24
    1276:	90 93 51 02 	sts	0x0251, r25
    127a:	a0 93 52 02 	sts	0x0252, r26
    127e:	b0 93 53 02 	sts	0x0253, r27
		ocr_value--;
	}
	num_of_cm = total_ticks/ocr_value;
	OCR0_REG = ocr_value-1;
	#endif
}
    1282:	28 96       	adiw	r28, 0x08	; 8
    1284:	0f b6       	in	r0, 0x3f	; 63
    1286:	f8 94       	cli
    1288:	de bf       	out	0x3e, r29	; 62
    128a:	0f be       	out	0x3f, r0	; 63
    128c:	cd bf       	out	0x3d, r28	; 61
    128e:	cf 91       	pop	r28
    1290:	df 91       	pop	r29
    1292:	08 95       	ret

00001294 <TIMER0_voidStart>:

void TIMER0_voidStart(void)
{
    1294:	df 93       	push	r29
    1296:	cf 93       	push	r28
    1298:	cd b7       	in	r28, 0x3d	; 61
    129a:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TCCR0_REG,CS00);
    129c:	a3 e5       	ldi	r26, 0x53	; 83
    129e:	b0 e0       	ldi	r27, 0x00	; 0
    12a0:	e3 e5       	ldi	r30, 0x53	; 83
    12a2:	f0 e0       	ldi	r31, 0x00	; 0
    12a4:	80 81       	ld	r24, Z
    12a6:	81 60       	ori	r24, 0x01	; 1
    12a8:	8c 93       	st	X, r24
	CLR_BIT(TCCR0_REG,CS01);
    12aa:	a3 e5       	ldi	r26, 0x53	; 83
    12ac:	b0 e0       	ldi	r27, 0x00	; 0
    12ae:	e3 e5       	ldi	r30, 0x53	; 83
    12b0:	f0 e0       	ldi	r31, 0x00	; 0
    12b2:	80 81       	ld	r24, Z
    12b4:	8d 7f       	andi	r24, 0xFD	; 253
    12b6:	8c 93       	st	X, r24
	SET_BIT(TCCR0_REG,CS02);
    12b8:	a3 e5       	ldi	r26, 0x53	; 83
    12ba:	b0 e0       	ldi	r27, 0x00	; 0
    12bc:	e3 e5       	ldi	r30, 0x53	; 83
    12be:	f0 e0       	ldi	r31, 0x00	; 0
    12c0:	80 81       	ld	r24, Z
    12c2:	84 60       	ori	r24, 0x04	; 4
    12c4:	8c 93       	st	X, r24
}
    12c6:	cf 91       	pop	r28
    12c8:	df 91       	pop	r29
    12ca:	08 95       	ret

000012cc <TIMER0_voidStop>:

void TIMER0_voidStop(void)
{
    12cc:	df 93       	push	r29
    12ce:	cf 93       	push	r28
    12d0:	cd b7       	in	r28, 0x3d	; 61
    12d2:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TCCR0_REG,CS00);
    12d4:	a3 e5       	ldi	r26, 0x53	; 83
    12d6:	b0 e0       	ldi	r27, 0x00	; 0
    12d8:	e3 e5       	ldi	r30, 0x53	; 83
    12da:	f0 e0       	ldi	r31, 0x00	; 0
    12dc:	80 81       	ld	r24, Z
    12de:	8e 7f       	andi	r24, 0xFE	; 254
    12e0:	8c 93       	st	X, r24
	CLR_BIT(TCCR0_REG,CS01);
    12e2:	a3 e5       	ldi	r26, 0x53	; 83
    12e4:	b0 e0       	ldi	r27, 0x00	; 0
    12e6:	e3 e5       	ldi	r30, 0x53	; 83
    12e8:	f0 e0       	ldi	r31, 0x00	; 0
    12ea:	80 81       	ld	r24, Z
    12ec:	8d 7f       	andi	r24, 0xFD	; 253
    12ee:	8c 93       	st	X, r24
	CLR_BIT(TCCR0_REG,CS02);
    12f0:	a3 e5       	ldi	r26, 0x53	; 83
    12f2:	b0 e0       	ldi	r27, 0x00	; 0
    12f4:	e3 e5       	ldi	r30, 0x53	; 83
    12f6:	f0 e0       	ldi	r31, 0x00	; 0
    12f8:	80 81       	ld	r24, Z
    12fa:	8b 7f       	andi	r24, 0xFB	; 251
    12fc:	8c 93       	st	X, r24
}
    12fe:	cf 91       	pop	r28
    1300:	df 91       	pop	r29
    1302:	08 95       	ret

00001304 <PWM0_voidInit>:

void PWM0_voidInit(void)
{
    1304:	df 93       	push	r29
    1306:	cf 93       	push	r28
    1308:	cd b7       	in	r28, 0x3d	; 61
    130a:	de b7       	in	r29, 0x3e	; 62
	#if PWM0_MODE == FAST_PWM_MODE
	//select fast pwm mode
	SET_BIT(TCCR0_REG,WGM00);
	SET_BIT(TCCR0_REG,WGM01);
	#elif PWM0_MODE == PHASE_CORRECT_PWM_MODE
	SET_BIT(TCCR0_REG,WGM00);
    130c:	a3 e5       	ldi	r26, 0x53	; 83
    130e:	b0 e0       	ldi	r27, 0x00	; 0
    1310:	e3 e5       	ldi	r30, 0x53	; 83
    1312:	f0 e0       	ldi	r31, 0x00	; 0
    1314:	80 81       	ld	r24, Z
    1316:	80 64       	ori	r24, 0x40	; 64
    1318:	8c 93       	st	X, r24
	CLR_BIT(TCCR0_REG,WGM01);
    131a:	a3 e5       	ldi	r26, 0x53	; 83
    131c:	b0 e0       	ldi	r27, 0x00	; 0
    131e:	e3 e5       	ldi	r30, 0x53	; 83
    1320:	f0 e0       	ldi	r31, 0x00	; 0
    1322:	80 81       	ld	r24, Z
    1324:	87 7f       	andi	r24, 0xF7	; 247
    1326:	8c 93       	st	X, r24
	//select inverted mode
	SET_BIT(TCCR0_REG,COM00);
	SET_BIT(TCCR0_REG,COM01);
	#elif COMPARE_OUTPUT_MODE == NON_INVERTED_MODE
	//select non-inverted mode
	CLR_BIT(TCCR0_REG,COM00);
    1328:	a3 e5       	ldi	r26, 0x53	; 83
    132a:	b0 e0       	ldi	r27, 0x00	; 0
    132c:	e3 e5       	ldi	r30, 0x53	; 83
    132e:	f0 e0       	ldi	r31, 0x00	; 0
    1330:	80 81       	ld	r24, Z
    1332:	8f 7e       	andi	r24, 0xEF	; 239
    1334:	8c 93       	st	X, r24
	SET_BIT(TCCR0_REG,COM01);
    1336:	a3 e5       	ldi	r26, 0x53	; 83
    1338:	b0 e0       	ldi	r27, 0x00	; 0
    133a:	e3 e5       	ldi	r30, 0x53	; 83
    133c:	f0 e0       	ldi	r31, 0x00	; 0
    133e:	80 81       	ld	r24, Z
    1340:	80 62       	ori	r24, 0x20	; 32
    1342:	8c 93       	st	X, r24
	#endif
}
    1344:	cf 91       	pop	r28
    1346:	df 91       	pop	r29
    1348:	08 95       	ret

0000134a <PWM0_voidSetDutyCycle>:

void PWM0_voidSetDutyCycle(u32 copy_u32DutyCycle)
{
    134a:	0f 93       	push	r16
    134c:	1f 93       	push	r17
    134e:	df 93       	push	r29
    1350:	cf 93       	push	r28
    1352:	00 d0       	rcall	.+0      	; 0x1354 <PWM0_voidSetDutyCycle+0xa>
    1354:	00 d0       	rcall	.+0      	; 0x1356 <PWM0_voidSetDutyCycle+0xc>
    1356:	cd b7       	in	r28, 0x3d	; 61
    1358:	de b7       	in	r29, 0x3e	; 62
    135a:	69 83       	std	Y+1, r22	; 0x01
    135c:	7a 83       	std	Y+2, r23	; 0x02
    135e:	8b 83       	std	Y+3, r24	; 0x03
    1360:	9c 83       	std	Y+4, r25	; 0x04
		#endif
	#elif COMPARE_OUTPUT_MODE == NON_INVERTED_MODE
		#if PWM0_MODE == FAST_PWM_MODE
		OCR0_REG = (((256*copy_u32DutyCycle)/100))-1;
		#elif PWM0_MODE == PHASE_CORRECT_PWM_MODE
		OCR0_REG = (255*copy_u32DutyCycle)/100;
    1362:	0c e5       	ldi	r16, 0x5C	; 92
    1364:	10 e0       	ldi	r17, 0x00	; 0
    1366:	89 81       	ldd	r24, Y+1	; 0x01
    1368:	9a 81       	ldd	r25, Y+2	; 0x02
    136a:	ab 81       	ldd	r26, Y+3	; 0x03
    136c:	bc 81       	ldd	r27, Y+4	; 0x04
    136e:	2f ef       	ldi	r18, 0xFF	; 255
    1370:	30 e0       	ldi	r19, 0x00	; 0
    1372:	40 e0       	ldi	r20, 0x00	; 0
    1374:	50 e0       	ldi	r21, 0x00	; 0
    1376:	bc 01       	movw	r22, r24
    1378:	cd 01       	movw	r24, r26
    137a:	0e 94 af 29 	call	0x535e	; 0x535e <__mulsi3>
    137e:	dc 01       	movw	r26, r24
    1380:	cb 01       	movw	r24, r22
    1382:	24 e6       	ldi	r18, 0x64	; 100
    1384:	30 e0       	ldi	r19, 0x00	; 0
    1386:	40 e0       	ldi	r20, 0x00	; 0
    1388:	50 e0       	ldi	r21, 0x00	; 0
    138a:	bc 01       	movw	r22, r24
    138c:	cd 01       	movw	r24, r26
    138e:	0e 94 e2 29 	call	0x53c4	; 0x53c4 <__udivmodsi4>
    1392:	da 01       	movw	r26, r20
    1394:	c9 01       	movw	r24, r18
    1396:	f8 01       	movw	r30, r16
    1398:	80 83       	st	Z, r24
		#endif
	#endif
}
    139a:	0f 90       	pop	r0
    139c:	0f 90       	pop	r0
    139e:	0f 90       	pop	r0
    13a0:	0f 90       	pop	r0
    13a2:	cf 91       	pop	r28
    13a4:	df 91       	pop	r29
    13a6:	1f 91       	pop	r17
    13a8:	0f 91       	pop	r16
    13aa:	08 95       	ret

000013ac <PWM0_voidStart>:


void PWM0_voidStart(void)
{
    13ac:	df 93       	push	r29
    13ae:	cf 93       	push	r28
    13b0:	cd b7       	in	r28, 0x3d	; 61
    13b2:	de b7       	in	r29, 0x3e	; 62
	TIMER0_voidStart();
    13b4:	0e 94 4a 09 	call	0x1294	; 0x1294 <TIMER0_voidStart>
}
    13b8:	cf 91       	pop	r28
    13ba:	df 91       	pop	r29
    13bc:	08 95       	ret

000013be <PWM0_voidStop>:

void PWM0_voidStop(void)
{
    13be:	df 93       	push	r29
    13c0:	cf 93       	push	r28
    13c2:	cd b7       	in	r28, 0x3d	; 61
    13c4:	de b7       	in	r29, 0x3e	; 62
	TIMER0_voidStop();
    13c6:	0e 94 66 09 	call	0x12cc	; 0x12cc <TIMER0_voidStop>
}
    13ca:	cf 91       	pop	r28
    13cc:	df 91       	pop	r29
    13ce:	08 95       	ret

000013d0 <TIMER0_voidSetCallBack>:


void TIMER0_voidSetCallBack(void(*ptr)(void))
{
    13d0:	df 93       	push	r29
    13d2:	cf 93       	push	r28
    13d4:	00 d0       	rcall	.+0      	; 0x13d6 <TIMER0_voidSetCallBack+0x6>
    13d6:	cd b7       	in	r28, 0x3d	; 61
    13d8:	de b7       	in	r29, 0x3e	; 62
    13da:	9a 83       	std	Y+2, r25	; 0x02
    13dc:	89 83       	std	Y+1, r24	; 0x01
	TIMER0_CALL_BACK = ptr ;
    13de:	89 81       	ldd	r24, Y+1	; 0x01
    13e0:	9a 81       	ldd	r25, Y+2	; 0x02
    13e2:	90 93 6c 02 	sts	0x026C, r25
    13e6:	80 93 6b 02 	sts	0x026B, r24
}
    13ea:	0f 90       	pop	r0
    13ec:	0f 90       	pop	r0
    13ee:	cf 91       	pop	r28
    13f0:	df 91       	pop	r29
    13f2:	08 95       	ret

000013f4 <TIMER0_voidSetCallBack_2>:

void TIMER0_voidSetCallBack_2(void(*ptr1)(void) , void(*ptr2)(void))
{
    13f4:	df 93       	push	r29
    13f6:	cf 93       	push	r28
    13f8:	00 d0       	rcall	.+0      	; 0x13fa <TIMER0_voidSetCallBack_2+0x6>
    13fa:	00 d0       	rcall	.+0      	; 0x13fc <TIMER0_voidSetCallBack_2+0x8>
    13fc:	cd b7       	in	r28, 0x3d	; 61
    13fe:	de b7       	in	r29, 0x3e	; 62
    1400:	9a 83       	std	Y+2, r25	; 0x02
    1402:	89 83       	std	Y+1, r24	; 0x01
    1404:	7c 83       	std	Y+4, r23	; 0x04
    1406:	6b 83       	std	Y+3, r22	; 0x03
	TIMER0_CALL_BACK_1 = ptr1 ;
    1408:	89 81       	ldd	r24, Y+1	; 0x01
    140a:	9a 81       	ldd	r25, Y+2	; 0x02
    140c:	90 93 6e 02 	sts	0x026E, r25
    1410:	80 93 6d 02 	sts	0x026D, r24
	TIMER0_CALL_BACK_2 = ptr2 ;
    1414:	8b 81       	ldd	r24, Y+3	; 0x03
    1416:	9c 81       	ldd	r25, Y+4	; 0x04
    1418:	90 93 6a 02 	sts	0x026A, r25
    141c:	80 93 69 02 	sts	0x0269, r24
}
    1420:	0f 90       	pop	r0
    1422:	0f 90       	pop	r0
    1424:	0f 90       	pop	r0
    1426:	0f 90       	pop	r0
    1428:	cf 91       	pop	r28
    142a:	df 91       	pop	r29
    142c:	08 95       	ret

0000142e <__vector_10>:

ISR(TIMER0_COMP_vect)
{
    142e:	1f 92       	push	r1
    1430:	0f 92       	push	r0
    1432:	0f b6       	in	r0, 0x3f	; 63
    1434:	0f 92       	push	r0
    1436:	11 24       	eor	r1, r1
    1438:	2f 93       	push	r18
    143a:	3f 93       	push	r19
    143c:	4f 93       	push	r20
    143e:	5f 93       	push	r21
    1440:	6f 93       	push	r22
    1442:	7f 93       	push	r23
    1444:	8f 93       	push	r24
    1446:	9f 93       	push	r25
    1448:	af 93       	push	r26
    144a:	bf 93       	push	r27
    144c:	ef 93       	push	r30
    144e:	ff 93       	push	r31
    1450:	df 93       	push	r29
    1452:	cf 93       	push	r28
    1454:	cd b7       	in	r28, 0x3d	; 61
    1456:	de b7       	in	r29, 0x3e	; 62
	static u32 counter_CTC = 0;
	counter_CTC++;
    1458:	80 91 58 02 	lds	r24, 0x0258
    145c:	90 91 59 02 	lds	r25, 0x0259
    1460:	a0 91 5a 02 	lds	r26, 0x025A
    1464:	b0 91 5b 02 	lds	r27, 0x025B
    1468:	01 96       	adiw	r24, 0x01	; 1
    146a:	a1 1d       	adc	r26, r1
    146c:	b1 1d       	adc	r27, r1
    146e:	80 93 58 02 	sts	0x0258, r24
    1472:	90 93 59 02 	sts	0x0259, r25
    1476:	a0 93 5a 02 	sts	0x025A, r26
    147a:	b0 93 5b 02 	sts	0x025B, r27
	if(counter_CTC == num_of_cm)
    147e:	20 91 58 02 	lds	r18, 0x0258
    1482:	30 91 59 02 	lds	r19, 0x0259
    1486:	40 91 5a 02 	lds	r20, 0x025A
    148a:	50 91 5b 02 	lds	r21, 0x025B
    148e:	80 91 4c 02 	lds	r24, 0x024C
    1492:	90 91 4d 02 	lds	r25, 0x024D
    1496:	a0 91 4e 02 	lds	r26, 0x024E
    149a:	b0 91 4f 02 	lds	r27, 0x024F
    149e:	28 17       	cp	r18, r24
    14a0:	39 07       	cpc	r19, r25
    14a2:	4a 07       	cpc	r20, r26
    14a4:	5b 07       	cpc	r21, r27
    14a6:	69 f4       	brne	.+26     	; 0x14c2 <__vector_10+0x94>
	{
		TIMER0_CALL_BACK();
    14a8:	e0 91 6b 02 	lds	r30, 0x026B
    14ac:	f0 91 6c 02 	lds	r31, 0x026C
    14b0:	09 95       	icall
		counter_CTC = 0;
    14b2:	10 92 58 02 	sts	0x0258, r1
    14b6:	10 92 59 02 	sts	0x0259, r1
    14ba:	10 92 5a 02 	sts	0x025A, r1
    14be:	10 92 5b 02 	sts	0x025B, r1
	}
}
    14c2:	cf 91       	pop	r28
    14c4:	df 91       	pop	r29
    14c6:	ff 91       	pop	r31
    14c8:	ef 91       	pop	r30
    14ca:	bf 91       	pop	r27
    14cc:	af 91       	pop	r26
    14ce:	9f 91       	pop	r25
    14d0:	8f 91       	pop	r24
    14d2:	7f 91       	pop	r23
    14d4:	6f 91       	pop	r22
    14d6:	5f 91       	pop	r21
    14d8:	4f 91       	pop	r20
    14da:	3f 91       	pop	r19
    14dc:	2f 91       	pop	r18
    14de:	0f 90       	pop	r0
    14e0:	0f be       	out	0x3f, r0	; 63
    14e2:	0f 90       	pop	r0
    14e4:	1f 90       	pop	r1
    14e6:	18 95       	reti

000014e8 <__vector_11>:

ISR(TIMER0_OVF_vect)
{
    14e8:	1f 92       	push	r1
    14ea:	0f 92       	push	r0
    14ec:	0f b6       	in	r0, 0x3f	; 63
    14ee:	0f 92       	push	r0
    14f0:	11 24       	eor	r1, r1
    14f2:	2f 93       	push	r18
    14f4:	3f 93       	push	r19
    14f6:	4f 93       	push	r20
    14f8:	5f 93       	push	r21
    14fa:	6f 93       	push	r22
    14fc:	7f 93       	push	r23
    14fe:	8f 93       	push	r24
    1500:	9f 93       	push	r25
    1502:	af 93       	push	r26
    1504:	bf 93       	push	r27
    1506:	ef 93       	push	r30
    1508:	ff 93       	push	r31
    150a:	df 93       	push	r29
    150c:	cf 93       	push	r28
    150e:	cd b7       	in	r28, 0x3d	; 61
    1510:	de b7       	in	r29, 0x3e	; 62
	static u32 counter_OVF = 0;
	counter_OVF++;
    1512:	80 91 5c 02 	lds	r24, 0x025C
    1516:	90 91 5d 02 	lds	r25, 0x025D
    151a:	a0 91 5e 02 	lds	r26, 0x025E
    151e:	b0 91 5f 02 	lds	r27, 0x025F
    1522:	01 96       	adiw	r24, 0x01	; 1
    1524:	a1 1d       	adc	r26, r1
    1526:	b1 1d       	adc	r27, r1
    1528:	80 93 5c 02 	sts	0x025C, r24
    152c:	90 93 5d 02 	sts	0x025D, r25
    1530:	a0 93 5e 02 	sts	0x025E, r26
    1534:	b0 93 5f 02 	sts	0x025F, r27
	if(counter_OVF == num_of_ovf)
    1538:	20 91 5c 02 	lds	r18, 0x025C
    153c:	30 91 5d 02 	lds	r19, 0x025D
    1540:	40 91 5e 02 	lds	r20, 0x025E
    1544:	50 91 5f 02 	lds	r21, 0x025F
    1548:	80 91 50 02 	lds	r24, 0x0250
    154c:	90 91 51 02 	lds	r25, 0x0251
    1550:	a0 91 52 02 	lds	r26, 0x0252
    1554:	b0 91 53 02 	lds	r27, 0x0253
    1558:	28 17       	cp	r18, r24
    155a:	39 07       	cpc	r19, r25
    155c:	4a 07       	cpc	r20, r26
    155e:	5b 07       	cpc	r21, r27
    1560:	c9 f4       	brne	.+50     	; 0x1594 <__vector_11+0xac>
	{
		TIMER0_CALL_BACK();
    1562:	e0 91 6b 02 	lds	r30, 0x026B
    1566:	f0 91 6c 02 	lds	r31, 0x026C
    156a:	09 95       	icall
		counter_OVF = 0;
    156c:	10 92 5c 02 	sts	0x025C, r1
    1570:	10 92 5d 02 	sts	0x025D, r1
    1574:	10 92 5e 02 	sts	0x025E, r1
    1578:	10 92 5f 02 	sts	0x025F, r1
		TCNT0_REG = 256 - (total_ticks%256);
    157c:	e2 e5       	ldi	r30, 0x52	; 82
    157e:	f0 e0       	ldi	r31, 0x00	; 0
    1580:	80 91 54 02 	lds	r24, 0x0254
    1584:	90 91 55 02 	lds	r25, 0x0255
    1588:	a0 91 56 02 	lds	r26, 0x0256
    158c:	b0 91 57 02 	lds	r27, 0x0257
    1590:	81 95       	neg	r24
    1592:	80 83       	st	Z, r24
	}
}
    1594:	cf 91       	pop	r28
    1596:	df 91       	pop	r29
    1598:	ff 91       	pop	r31
    159a:	ef 91       	pop	r30
    159c:	bf 91       	pop	r27
    159e:	af 91       	pop	r26
    15a0:	9f 91       	pop	r25
    15a2:	8f 91       	pop	r24
    15a4:	7f 91       	pop	r23
    15a6:	6f 91       	pop	r22
    15a8:	5f 91       	pop	r21
    15aa:	4f 91       	pop	r20
    15ac:	3f 91       	pop	r19
    15ae:	2f 91       	pop	r18
    15b0:	0f 90       	pop	r0
    15b2:	0f be       	out	0x3f, r0	; 63
    15b4:	0f 90       	pop	r0
    15b6:	1f 90       	pop	r1
    15b8:	18 95       	reti

000015ba <GIE_voidEnableGlobal>:
#include "GIE_REG.h"
#include "GIE_INT.h"


void GIE_voidEnableGlobal()
{
    15ba:	df 93       	push	r29
    15bc:	cf 93       	push	r28
    15be:	cd b7       	in	r28, 0x3d	; 61
    15c0:	de b7       	in	r29, 0x3e	; 62
	//SET_BIT(SREG,SREG_I);
	SET_BIT(SREG,SREG_I);
    15c2:	af e5       	ldi	r26, 0x5F	; 95
    15c4:	b0 e0       	ldi	r27, 0x00	; 0
    15c6:	ef e5       	ldi	r30, 0x5F	; 95
    15c8:	f0 e0       	ldi	r31, 0x00	; 0
    15ca:	80 81       	ld	r24, Z
    15cc:	80 68       	ori	r24, 0x80	; 128
    15ce:	8c 93       	st	X, r24
}
    15d0:	cf 91       	pop	r28
    15d2:	df 91       	pop	r29
    15d4:	08 95       	ret

000015d6 <GIE_voidDisableGlobal>:

void GIE_voidDisableGlobal()
{
    15d6:	df 93       	push	r29
    15d8:	cf 93       	push	r28
    15da:	cd b7       	in	r28, 0x3d	; 61
    15dc:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG,SREG_I);
    15de:	af e5       	ldi	r26, 0x5F	; 95
    15e0:	b0 e0       	ldi	r27, 0x00	; 0
    15e2:	ef e5       	ldi	r30, 0x5F	; 95
    15e4:	f0 e0       	ldi	r31, 0x00	; 0
    15e6:	80 81       	ld	r24, Z
    15e8:	8f 77       	andi	r24, 0x7F	; 127
    15ea:	8c 93       	st	X, r24
}
    15ec:	cf 91       	pop	r28
    15ee:	df 91       	pop	r29
    15f0:	08 95       	ret

000015f2 <EXTI_voidINT0Init>:

/*Define Global array of 3 pointers to functions to carry ISR application addresses*/
static void (*EXTI_pvINTCallBackFunc[3])(void) = {NULL};

void EXTI_voidINT0Init()
{
    15f2:	df 93       	push	r29
    15f4:	cf 93       	push	r28
    15f6:	cd b7       	in	r28, 0x3d	; 61
    15f8:	de b7       	in	r29, 0x3e	; 62
#if EXTI_INT0_SENSE == LOW_LEVEL
	CLR(MCUCR,MCUCR_ISC00);
	CLR(MCUCR,MCUCR_ISC01);

#elif EXTI_INT0_SENSE == ON_CHANGE
	SET_BIT(MCUCR,MCUCR_ISC00);
    15fa:	a5 e5       	ldi	r26, 0x55	; 85
    15fc:	b0 e0       	ldi	r27, 0x00	; 0
    15fe:	e5 e5       	ldi	r30, 0x55	; 85
    1600:	f0 e0       	ldi	r31, 0x00	; 0
    1602:	80 81       	ld	r24, Z
    1604:	81 60       	ori	r24, 0x01	; 1
    1606:	8c 93       	st	X, r24
	CLR_BIT(MCUCR,MCUCR_ISC01);
    1608:	a5 e5       	ldi	r26, 0x55	; 85
    160a:	b0 e0       	ldi	r27, 0x00	; 0
    160c:	e5 e5       	ldi	r30, 0x55	; 85
    160e:	f0 e0       	ldi	r31, 0x00	; 0
    1610:	80 81       	ld	r24, Z
    1612:	8d 7f       	andi	r24, 0xFD	; 253
    1614:	8c 93       	st	X, r24

	/*Check INT0 PIE initial state*/
#if EXTI_INT0_INITIAL_STATE == ENABLED
	SET_BIT(GICR,GICR_INT0);
#elif EXTI_INT0_INITIAL_STATE == DISABLED
	CLR_BIT(GICR,GICR_INT0);
    1616:	ab e5       	ldi	r26, 0x5B	; 91
    1618:	b0 e0       	ldi	r27, 0x00	; 0
    161a:	eb e5       	ldi	r30, 0x5B	; 91
    161c:	f0 e0       	ldi	r31, 0x00	; 0
    161e:	80 81       	ld	r24, Z
    1620:	8f 7b       	andi	r24, 0xBF	; 191
    1622:	8c 93       	st	X, r24
#else
#error " Wrong EXTI_INT0_INITIAL_STATE configuration option"
#endif
}
    1624:	cf 91       	pop	r28
    1626:	df 91       	pop	r29
    1628:	08 95       	ret

0000162a <EXTI_voidINT1Init>:
void EXTI_voidINT1Init()
{
    162a:	df 93       	push	r29
    162c:	cf 93       	push	r28
    162e:	cd b7       	in	r28, 0x3d	; 61
    1630:	de b7       	in	r29, 0x3e	; 62
#if EXTI_INT0_SENSE == LOW_LEVEL
	CLR_BIT(MCUCR,MCUCR_ISC10);
	CLR_BIT(MCUCR,MCUCR_ISC11);

#elif EXTI_INT0_SENSE == ON_CHANGE
	SET_BIT(MCUCR,MCUCR_ISC10);
    1632:	a5 e5       	ldi	r26, 0x55	; 85
    1634:	b0 e0       	ldi	r27, 0x00	; 0
    1636:	e5 e5       	ldi	r30, 0x55	; 85
    1638:	f0 e0       	ldi	r31, 0x00	; 0
    163a:	80 81       	ld	r24, Z
    163c:	84 60       	ori	r24, 0x04	; 4
    163e:	8c 93       	st	X, r24
	CLR_BIT(MCUCR,MCUCR_ISC11);
    1640:	a5 e5       	ldi	r26, 0x55	; 85
    1642:	b0 e0       	ldi	r27, 0x00	; 0
    1644:	e5 e5       	ldi	r30, 0x55	; 85
    1646:	f0 e0       	ldi	r31, 0x00	; 0
    1648:	80 81       	ld	r24, Z
    164a:	87 7f       	andi	r24, 0xF7	; 247
    164c:	8c 93       	st	X, r24
	#error "Wrong EXTI_INT1_SENSE configuration option"
#endif

	/*Check INT1 PIE initial state*/
#if EXTI_INT1_INITIAL_STATE == ENABLED
	SET_BIT(GICR,GICR_INT1);
    164e:	ab e5       	ldi	r26, 0x5B	; 91
    1650:	b0 e0       	ldi	r27, 0x00	; 0
    1652:	eb e5       	ldi	r30, 0x5B	; 91
    1654:	f0 e0       	ldi	r31, 0x00	; 0
    1656:	80 81       	ld	r24, Z
    1658:	80 68       	ori	r24, 0x80	; 128
    165a:	8c 93       	st	X, r24
#elif EXTI_INT1_INITIAL_STATE == DISABLED
	CLR_BIT(GICR,GICR_INT1);
#else
	#error " Wrong EXTI_INT1_INITIAL_STATE configuration option"
#endif
}
    165c:	cf 91       	pop	r28
    165e:	df 91       	pop	r29
    1660:	08 95       	ret

00001662 <EXTI_voidINT2Init>:
void EXTI_voidINT2Init()
{
    1662:	df 93       	push	r29
    1664:	cf 93       	push	r28
    1666:	cd b7       	in	r28, 0x3d	; 61
    1668:	de b7       	in	r29, 0x3e	; 62
	//CLR(GICR,GICR_INT2);
	/*Check on INT2 Sense control*/
#if EXTI_INT2_SENSE == FALLING_EDGE
	CLR_BIT(MCUCSR,MCUCSR_ISC2);
    166a:	a4 e5       	ldi	r26, 0x54	; 84
    166c:	b0 e0       	ldi	r27, 0x00	; 0
    166e:	e4 e5       	ldi	r30, 0x54	; 84
    1670:	f0 e0       	ldi	r31, 0x00	; 0
    1672:	80 81       	ld	r24, Z
    1674:	8f 7b       	andi	r24, 0xBF	; 191
    1676:	8c 93       	st	X, r24
	/*Check INT2 PIE initial state*/
#if EXTI_INT2_INITIAL_STATE == ENABLED
	SET_BIT(GICR,GICR_INT2);

#elif EXTI_INT2_INITIAL_STATE == DISABLED
	CLR_BIT(GICR,GICR_INT2);
    1678:	ab e5       	ldi	r26, 0x5B	; 91
    167a:	b0 e0       	ldi	r27, 0x00	; 0
    167c:	eb e5       	ldi	r30, 0x5B	; 91
    167e:	f0 e0       	ldi	r31, 0x00	; 0
    1680:	80 81       	ld	r24, Z
    1682:	8f 7d       	andi	r24, 0xDF	; 223
    1684:	8c 93       	st	X, r24
#else
	#error " Wrong EXTI_INT2_INITIAL_STATE configuration option"
#endif
}
    1686:	cf 91       	pop	r28
    1688:	df 91       	pop	r29
    168a:	08 95       	ret

0000168c <EXTI_u8SetSenseControl>:
void EXTI_u8SetSenseControl(u8 EXTI_u8Number, u8 EXTI_u8Sense)
{
    168c:	df 93       	push	r29
    168e:	cf 93       	push	r28
    1690:	cd b7       	in	r28, 0x3d	; 61
    1692:	de b7       	in	r29, 0x3e	; 62
    1694:	2a 97       	sbiw	r28, 0x0a	; 10
    1696:	0f b6       	in	r0, 0x3f	; 63
    1698:	f8 94       	cli
    169a:	de bf       	out	0x3e, r29	; 62
    169c:	0f be       	out	0x3f, r0	; 63
    169e:	cd bf       	out	0x3d, r28	; 61
    16a0:	89 83       	std	Y+1, r24	; 0x01
    16a2:	6a 83       	std	Y+2, r22	; 0x02
	switch (EXTI_u8Number)
    16a4:	89 81       	ldd	r24, Y+1	; 0x01
    16a6:	28 2f       	mov	r18, r24
    16a8:	30 e0       	ldi	r19, 0x00	; 0
    16aa:	3a 87       	std	Y+10, r19	; 0x0a
    16ac:	29 87       	std	Y+9, r18	; 0x09
    16ae:	89 85       	ldd	r24, Y+9	; 0x09
    16b0:	9a 85       	ldd	r25, Y+10	; 0x0a
    16b2:	81 30       	cpi	r24, 0x01	; 1
    16b4:	91 05       	cpc	r25, r1
    16b6:	09 f4       	brne	.+2      	; 0x16ba <EXTI_u8SetSenseControl+0x2e>
    16b8:	67 c0       	rjmp	.+206    	; 0x1788 <EXTI_u8SetSenseControl+0xfc>
    16ba:	29 85       	ldd	r18, Y+9	; 0x09
    16bc:	3a 85       	ldd	r19, Y+10	; 0x0a
    16be:	22 30       	cpi	r18, 0x02	; 2
    16c0:	31 05       	cpc	r19, r1
    16c2:	09 f4       	brne	.+2      	; 0x16c6 <EXTI_u8SetSenseControl+0x3a>
    16c4:	bd c0       	rjmp	.+378    	; 0x1840 <EXTI_u8SetSenseControl+0x1b4>
    16c6:	89 85       	ldd	r24, Y+9	; 0x09
    16c8:	9a 85       	ldd	r25, Y+10	; 0x0a
    16ca:	00 97       	sbiw	r24, 0x00	; 0
    16cc:	09 f0       	breq	.+2      	; 0x16d0 <EXTI_u8SetSenseControl+0x44>
    16ce:	d6 c0       	rjmp	.+428    	; 0x187c <EXTI_u8SetSenseControl+0x1f0>
	{
	case EXTI_INT0:		/*In case INT0*/
		switch(EXTI_u8Sense)
    16d0:	8a 81       	ldd	r24, Y+2	; 0x02
    16d2:	28 2f       	mov	r18, r24
    16d4:	30 e0       	ldi	r19, 0x00	; 0
    16d6:	38 87       	std	Y+8, r19	; 0x08
    16d8:	2f 83       	std	Y+7, r18	; 0x07
    16da:	8f 81       	ldd	r24, Y+7	; 0x07
    16dc:	98 85       	ldd	r25, Y+8	; 0x08
    16de:	82 30       	cpi	r24, 0x02	; 2
    16e0:	91 05       	cpc	r25, r1
    16e2:	29 f1       	breq	.+74     	; 0x172e <EXTI_u8SetSenseControl+0xa2>
    16e4:	2f 81       	ldd	r18, Y+7	; 0x07
    16e6:	38 85       	ldd	r19, Y+8	; 0x08
    16e8:	23 30       	cpi	r18, 0x03	; 3
    16ea:	31 05       	cpc	r19, r1
    16ec:	34 f4       	brge	.+12     	; 0x16fa <EXTI_u8SetSenseControl+0x6e>
    16ee:	8f 81       	ldd	r24, Y+7	; 0x07
    16f0:	98 85       	ldd	r25, Y+8	; 0x08
    16f2:	81 30       	cpi	r24, 0x01	; 1
    16f4:	91 05       	cpc	r25, r1
    16f6:	61 f0       	breq	.+24     	; 0x1710 <EXTI_u8SetSenseControl+0x84>
    16f8:	c1 c0       	rjmp	.+386    	; 0x187c <EXTI_u8SetSenseControl+0x1f0>
    16fa:	2f 81       	ldd	r18, Y+7	; 0x07
    16fc:	38 85       	ldd	r19, Y+8	; 0x08
    16fe:	23 30       	cpi	r18, 0x03	; 3
    1700:	31 05       	cpc	r19, r1
    1702:	21 f1       	breq	.+72     	; 0x174c <EXTI_u8SetSenseControl+0xc0>
    1704:	8f 81       	ldd	r24, Y+7	; 0x07
    1706:	98 85       	ldd	r25, Y+8	; 0x08
    1708:	84 30       	cpi	r24, 0x04	; 4
    170a:	91 05       	cpc	r25, r1
    170c:	71 f1       	breq	.+92     	; 0x176a <EXTI_u8SetSenseControl+0xde>
    170e:	b6 c0       	rjmp	.+364    	; 0x187c <EXTI_u8SetSenseControl+0x1f0>
		{
			case LOW_LEVEL:   CLR_BIT(MCUCR,MCUCR_ISC00); CLR_BIT(MCUCR,MCUCR_ISC01); break;
    1710:	a5 e5       	ldi	r26, 0x55	; 85
    1712:	b0 e0       	ldi	r27, 0x00	; 0
    1714:	e5 e5       	ldi	r30, 0x55	; 85
    1716:	f0 e0       	ldi	r31, 0x00	; 0
    1718:	80 81       	ld	r24, Z
    171a:	8e 7f       	andi	r24, 0xFE	; 254
    171c:	8c 93       	st	X, r24
    171e:	a5 e5       	ldi	r26, 0x55	; 85
    1720:	b0 e0       	ldi	r27, 0x00	; 0
    1722:	e5 e5       	ldi	r30, 0x55	; 85
    1724:	f0 e0       	ldi	r31, 0x00	; 0
    1726:	80 81       	ld	r24, Z
    1728:	8d 7f       	andi	r24, 0xFD	; 253
    172a:	8c 93       	st	X, r24
    172c:	a7 c0       	rjmp	.+334    	; 0x187c <EXTI_u8SetSenseControl+0x1f0>
			case ON_CHANGE:   SET_BIT(MCUCR,MCUCR_ISC00); CLR_BIT(MCUCR,MCUCR_ISC01); break;
    172e:	a5 e5       	ldi	r26, 0x55	; 85
    1730:	b0 e0       	ldi	r27, 0x00	; 0
    1732:	e5 e5       	ldi	r30, 0x55	; 85
    1734:	f0 e0       	ldi	r31, 0x00	; 0
    1736:	80 81       	ld	r24, Z
    1738:	81 60       	ori	r24, 0x01	; 1
    173a:	8c 93       	st	X, r24
    173c:	a5 e5       	ldi	r26, 0x55	; 85
    173e:	b0 e0       	ldi	r27, 0x00	; 0
    1740:	e5 e5       	ldi	r30, 0x55	; 85
    1742:	f0 e0       	ldi	r31, 0x00	; 0
    1744:	80 81       	ld	r24, Z
    1746:	8d 7f       	andi	r24, 0xFD	; 253
    1748:	8c 93       	st	X, r24
    174a:	98 c0       	rjmp	.+304    	; 0x187c <EXTI_u8SetSenseControl+0x1f0>
			case FALLING_EDGE:CLR_BIT(MCUCR,MCUCR_ISC00); SET_BIT(MCUCR,MCUCR_ISC01); break;
    174c:	a5 e5       	ldi	r26, 0x55	; 85
    174e:	b0 e0       	ldi	r27, 0x00	; 0
    1750:	e5 e5       	ldi	r30, 0x55	; 85
    1752:	f0 e0       	ldi	r31, 0x00	; 0
    1754:	80 81       	ld	r24, Z
    1756:	8e 7f       	andi	r24, 0xFE	; 254
    1758:	8c 93       	st	X, r24
    175a:	a5 e5       	ldi	r26, 0x55	; 85
    175c:	b0 e0       	ldi	r27, 0x00	; 0
    175e:	e5 e5       	ldi	r30, 0x55	; 85
    1760:	f0 e0       	ldi	r31, 0x00	; 0
    1762:	80 81       	ld	r24, Z
    1764:	82 60       	ori	r24, 0x02	; 2
    1766:	8c 93       	st	X, r24
    1768:	89 c0       	rjmp	.+274    	; 0x187c <EXTI_u8SetSenseControl+0x1f0>
			case RISING_EDGE: SET_BIT(MCUCR,MCUCR_ISC00); SET_BIT(MCUCR,MCUCR_ISC01); break;
    176a:	a5 e5       	ldi	r26, 0x55	; 85
    176c:	b0 e0       	ldi	r27, 0x00	; 0
    176e:	e5 e5       	ldi	r30, 0x55	; 85
    1770:	f0 e0       	ldi	r31, 0x00	; 0
    1772:	80 81       	ld	r24, Z
    1774:	81 60       	ori	r24, 0x01	; 1
    1776:	8c 93       	st	X, r24
    1778:	a5 e5       	ldi	r26, 0x55	; 85
    177a:	b0 e0       	ldi	r27, 0x00	; 0
    177c:	e5 e5       	ldi	r30, 0x55	; 85
    177e:	f0 e0       	ldi	r31, 0x00	; 0
    1780:	80 81       	ld	r24, Z
    1782:	82 60       	ori	r24, 0x02	; 2
    1784:	8c 93       	st	X, r24
    1786:	7a c0       	rjmp	.+244    	; 0x187c <EXTI_u8SetSenseControl+0x1f0>
			default:  break;
		}
		break;			/*Break INT0 case*/
	case EXTI_INT1:	/*In case of INT1*/
		switch(EXTI_u8Sense)
    1788:	8a 81       	ldd	r24, Y+2	; 0x02
    178a:	28 2f       	mov	r18, r24
    178c:	30 e0       	ldi	r19, 0x00	; 0
    178e:	3e 83       	std	Y+6, r19	; 0x06
    1790:	2d 83       	std	Y+5, r18	; 0x05
    1792:	8d 81       	ldd	r24, Y+5	; 0x05
    1794:	9e 81       	ldd	r25, Y+6	; 0x06
    1796:	82 30       	cpi	r24, 0x02	; 2
    1798:	91 05       	cpc	r25, r1
    179a:	29 f1       	breq	.+74     	; 0x17e6 <EXTI_u8SetSenseControl+0x15a>
    179c:	2d 81       	ldd	r18, Y+5	; 0x05
    179e:	3e 81       	ldd	r19, Y+6	; 0x06
    17a0:	23 30       	cpi	r18, 0x03	; 3
    17a2:	31 05       	cpc	r19, r1
    17a4:	34 f4       	brge	.+12     	; 0x17b2 <EXTI_u8SetSenseControl+0x126>
    17a6:	8d 81       	ldd	r24, Y+5	; 0x05
    17a8:	9e 81       	ldd	r25, Y+6	; 0x06
    17aa:	81 30       	cpi	r24, 0x01	; 1
    17ac:	91 05       	cpc	r25, r1
    17ae:	61 f0       	breq	.+24     	; 0x17c8 <EXTI_u8SetSenseControl+0x13c>
    17b0:	65 c0       	rjmp	.+202    	; 0x187c <EXTI_u8SetSenseControl+0x1f0>
    17b2:	2d 81       	ldd	r18, Y+5	; 0x05
    17b4:	3e 81       	ldd	r19, Y+6	; 0x06
    17b6:	23 30       	cpi	r18, 0x03	; 3
    17b8:	31 05       	cpc	r19, r1
    17ba:	21 f1       	breq	.+72     	; 0x1804 <EXTI_u8SetSenseControl+0x178>
    17bc:	8d 81       	ldd	r24, Y+5	; 0x05
    17be:	9e 81       	ldd	r25, Y+6	; 0x06
    17c0:	84 30       	cpi	r24, 0x04	; 4
    17c2:	91 05       	cpc	r25, r1
    17c4:	71 f1       	breq	.+92     	; 0x1822 <EXTI_u8SetSenseControl+0x196>
    17c6:	5a c0       	rjmp	.+180    	; 0x187c <EXTI_u8SetSenseControl+0x1f0>
		{
			case LOW_LEVEL:   CLR_BIT(MCUCR,MCUCR_ISC10); CLR_BIT(MCUCR,MCUCR_ISC11); break;
    17c8:	a5 e5       	ldi	r26, 0x55	; 85
    17ca:	b0 e0       	ldi	r27, 0x00	; 0
    17cc:	e5 e5       	ldi	r30, 0x55	; 85
    17ce:	f0 e0       	ldi	r31, 0x00	; 0
    17d0:	80 81       	ld	r24, Z
    17d2:	8b 7f       	andi	r24, 0xFB	; 251
    17d4:	8c 93       	st	X, r24
    17d6:	a5 e5       	ldi	r26, 0x55	; 85
    17d8:	b0 e0       	ldi	r27, 0x00	; 0
    17da:	e5 e5       	ldi	r30, 0x55	; 85
    17dc:	f0 e0       	ldi	r31, 0x00	; 0
    17de:	80 81       	ld	r24, Z
    17e0:	87 7f       	andi	r24, 0xF7	; 247
    17e2:	8c 93       	st	X, r24
    17e4:	4b c0       	rjmp	.+150    	; 0x187c <EXTI_u8SetSenseControl+0x1f0>
			case ON_CHANGE:   SET_BIT(MCUCR,MCUCR_ISC10); CLR_BIT(MCUCR,MCUCR_ISC11); break;
    17e6:	a5 e5       	ldi	r26, 0x55	; 85
    17e8:	b0 e0       	ldi	r27, 0x00	; 0
    17ea:	e5 e5       	ldi	r30, 0x55	; 85
    17ec:	f0 e0       	ldi	r31, 0x00	; 0
    17ee:	80 81       	ld	r24, Z
    17f0:	84 60       	ori	r24, 0x04	; 4
    17f2:	8c 93       	st	X, r24
    17f4:	a5 e5       	ldi	r26, 0x55	; 85
    17f6:	b0 e0       	ldi	r27, 0x00	; 0
    17f8:	e5 e5       	ldi	r30, 0x55	; 85
    17fa:	f0 e0       	ldi	r31, 0x00	; 0
    17fc:	80 81       	ld	r24, Z
    17fe:	87 7f       	andi	r24, 0xF7	; 247
    1800:	8c 93       	st	X, r24
    1802:	3c c0       	rjmp	.+120    	; 0x187c <EXTI_u8SetSenseControl+0x1f0>
			case FALLING_EDGE:CLR_BIT(MCUCR,MCUCR_ISC10); SET_BIT(MCUCR,MCUCR_ISC11); break;
    1804:	a5 e5       	ldi	r26, 0x55	; 85
    1806:	b0 e0       	ldi	r27, 0x00	; 0
    1808:	e5 e5       	ldi	r30, 0x55	; 85
    180a:	f0 e0       	ldi	r31, 0x00	; 0
    180c:	80 81       	ld	r24, Z
    180e:	8b 7f       	andi	r24, 0xFB	; 251
    1810:	8c 93       	st	X, r24
    1812:	a5 e5       	ldi	r26, 0x55	; 85
    1814:	b0 e0       	ldi	r27, 0x00	; 0
    1816:	e5 e5       	ldi	r30, 0x55	; 85
    1818:	f0 e0       	ldi	r31, 0x00	; 0
    181a:	80 81       	ld	r24, Z
    181c:	88 60       	ori	r24, 0x08	; 8
    181e:	8c 93       	st	X, r24
    1820:	2d c0       	rjmp	.+90     	; 0x187c <EXTI_u8SetSenseControl+0x1f0>
			case RISING_EDGE: SET_BIT(MCUCR,MCUCR_ISC10); SET_BIT(MCUCR,MCUCR_ISC11); break;
    1822:	a5 e5       	ldi	r26, 0x55	; 85
    1824:	b0 e0       	ldi	r27, 0x00	; 0
    1826:	e5 e5       	ldi	r30, 0x55	; 85
    1828:	f0 e0       	ldi	r31, 0x00	; 0
    182a:	80 81       	ld	r24, Z
    182c:	84 60       	ori	r24, 0x04	; 4
    182e:	8c 93       	st	X, r24
    1830:	a5 e5       	ldi	r26, 0x55	; 85
    1832:	b0 e0       	ldi	r27, 0x00	; 0
    1834:	e5 e5       	ldi	r30, 0x55	; 85
    1836:	f0 e0       	ldi	r31, 0x00	; 0
    1838:	80 81       	ld	r24, Z
    183a:	88 60       	ori	r24, 0x08	; 8
    183c:	8c 93       	st	X, r24
    183e:	1e c0       	rjmp	.+60     	; 0x187c <EXTI_u8SetSenseControl+0x1f0>
			default: break;
		}
		break;		/*Break INT1 case*/
	case EXTI_INT2:	/*In case of INT2*/
		switch(EXTI_u8Sense)
    1840:	8a 81       	ldd	r24, Y+2	; 0x02
    1842:	28 2f       	mov	r18, r24
    1844:	30 e0       	ldi	r19, 0x00	; 0
    1846:	3c 83       	std	Y+4, r19	; 0x04
    1848:	2b 83       	std	Y+3, r18	; 0x03
    184a:	8b 81       	ldd	r24, Y+3	; 0x03
    184c:	9c 81       	ldd	r25, Y+4	; 0x04
    184e:	83 30       	cpi	r24, 0x03	; 3
    1850:	91 05       	cpc	r25, r1
    1852:	69 f0       	breq	.+26     	; 0x186e <EXTI_u8SetSenseControl+0x1e2>
    1854:	2b 81       	ldd	r18, Y+3	; 0x03
    1856:	3c 81       	ldd	r19, Y+4	; 0x04
    1858:	24 30       	cpi	r18, 0x04	; 4
    185a:	31 05       	cpc	r19, r1
    185c:	79 f4       	brne	.+30     	; 0x187c <EXTI_u8SetSenseControl+0x1f0>
		{
			case RISING_EDGE: SET_BIT(MCUCSR,MCUCSR_ISC2);  break;
    185e:	a4 e5       	ldi	r26, 0x54	; 84
    1860:	b0 e0       	ldi	r27, 0x00	; 0
    1862:	e4 e5       	ldi	r30, 0x54	; 84
    1864:	f0 e0       	ldi	r31, 0x00	; 0
    1866:	80 81       	ld	r24, Z
    1868:	80 64       	ori	r24, 0x40	; 64
    186a:	8c 93       	st	X, r24
    186c:	07 c0       	rjmp	.+14     	; 0x187c <EXTI_u8SetSenseControl+0x1f0>
			case FALLING_EDGE: CLR_BIT(MCUCSR,MCUCSR_ISC2);  break;
    186e:	a4 e5       	ldi	r26, 0x54	; 84
    1870:	b0 e0       	ldi	r27, 0x00	; 0
    1872:	e4 e5       	ldi	r30, 0x54	; 84
    1874:	f0 e0       	ldi	r31, 0x00	; 0
    1876:	80 81       	ld	r24, Z
    1878:	8f 7b       	andi	r24, 0xBF	; 191
    187a:	8c 93       	st	X, r24
		}
		break;		/*Break INT2 case*/
	default: break;
	}

}
    187c:	2a 96       	adiw	r28, 0x0a	; 10
    187e:	0f b6       	in	r0, 0x3f	; 63
    1880:	f8 94       	cli
    1882:	de bf       	out	0x3e, r29	; 62
    1884:	0f be       	out	0x3f, r0	; 63
    1886:	cd bf       	out	0x3d, r28	; 61
    1888:	cf 91       	pop	r28
    188a:	df 91       	pop	r29
    188c:	08 95       	ret

0000188e <EXTI_u8INTSetCallBack>:

void EXTI_u8INTSetCallBack(void (*Copy_pvCallBackFunc)(void), u8 EXTI_u8Number)
{
    188e:	df 93       	push	r29
    1890:	cf 93       	push	r28
    1892:	00 d0       	rcall	.+0      	; 0x1894 <EXTI_u8INTSetCallBack+0x6>
    1894:	0f 92       	push	r0
    1896:	cd b7       	in	r28, 0x3d	; 61
    1898:	de b7       	in	r29, 0x3e	; 62
    189a:	9a 83       	std	Y+2, r25	; 0x02
    189c:	89 83       	std	Y+1, r24	; 0x01
    189e:	6b 83       	std	Y+3, r22	; 0x03
	if(Copy_pvCallBackFunc != NULL)
    18a0:	89 81       	ldd	r24, Y+1	; 0x01
    18a2:	9a 81       	ldd	r25, Y+2	; 0x02
    18a4:	00 97       	sbiw	r24, 0x00	; 0
    18a6:	61 f0       	breq	.+24     	; 0x18c0 <EXTI_u8INTSetCallBack+0x32>
	{
		EXTI_pvINTCallBackFunc[EXTI_u8Number]= Copy_pvCallBackFunc;
    18a8:	8b 81       	ldd	r24, Y+3	; 0x03
    18aa:	88 2f       	mov	r24, r24
    18ac:	90 e0       	ldi	r25, 0x00	; 0
    18ae:	88 0f       	add	r24, r24
    18b0:	99 1f       	adc	r25, r25
    18b2:	fc 01       	movw	r30, r24
    18b4:	e0 5a       	subi	r30, 0xA0	; 160
    18b6:	fd 4f       	sbci	r31, 0xFD	; 253
    18b8:	89 81       	ldd	r24, Y+1	; 0x01
    18ba:	9a 81       	ldd	r25, Y+2	; 0x02
    18bc:	91 83       	std	Z+1, r25	; 0x01
    18be:	80 83       	st	Z, r24
	}
}
    18c0:	0f 90       	pop	r0
    18c2:	0f 90       	pop	r0
    18c4:	0f 90       	pop	r0
    18c6:	cf 91       	pop	r28
    18c8:	df 91       	pop	r29
    18ca:	08 95       	ret

000018cc <__vector_1>:

/*ISR of INT0*/
void  __vector_1 (void)	__attribute__((signal));
void  __vector_1 (void)
{
    18cc:	1f 92       	push	r1
    18ce:	0f 92       	push	r0
    18d0:	0f b6       	in	r0, 0x3f	; 63
    18d2:	0f 92       	push	r0
    18d4:	11 24       	eor	r1, r1
    18d6:	2f 93       	push	r18
    18d8:	3f 93       	push	r19
    18da:	4f 93       	push	r20
    18dc:	5f 93       	push	r21
    18de:	6f 93       	push	r22
    18e0:	7f 93       	push	r23
    18e2:	8f 93       	push	r24
    18e4:	9f 93       	push	r25
    18e6:	af 93       	push	r26
    18e8:	bf 93       	push	r27
    18ea:	ef 93       	push	r30
    18ec:	ff 93       	push	r31
    18ee:	df 93       	push	r29
    18f0:	cf 93       	push	r28
    18f2:	cd b7       	in	r28, 0x3d	; 61
    18f4:	de b7       	in	r29, 0x3e	; 62
	if(EXTI_pvINTCallBackFunc[EXTI_INT0] != NULL)
    18f6:	80 91 60 02 	lds	r24, 0x0260
    18fa:	90 91 61 02 	lds	r25, 0x0261
    18fe:	00 97       	sbiw	r24, 0x00	; 0
    1900:	29 f0       	breq	.+10     	; 0x190c <__vector_1+0x40>
	{
		EXTI_pvINTCallBackFunc[EXTI_INT0]();
    1902:	e0 91 60 02 	lds	r30, 0x0260
    1906:	f0 91 61 02 	lds	r31, 0x0261
    190a:	09 95       	icall
	}

}
    190c:	cf 91       	pop	r28
    190e:	df 91       	pop	r29
    1910:	ff 91       	pop	r31
    1912:	ef 91       	pop	r30
    1914:	bf 91       	pop	r27
    1916:	af 91       	pop	r26
    1918:	9f 91       	pop	r25
    191a:	8f 91       	pop	r24
    191c:	7f 91       	pop	r23
    191e:	6f 91       	pop	r22
    1920:	5f 91       	pop	r21
    1922:	4f 91       	pop	r20
    1924:	3f 91       	pop	r19
    1926:	2f 91       	pop	r18
    1928:	0f 90       	pop	r0
    192a:	0f be       	out	0x3f, r0	; 63
    192c:	0f 90       	pop	r0
    192e:	1f 90       	pop	r1
    1930:	18 95       	reti

00001932 <__vector_2>:
/*ISR of INT1*/
void  __vector_2 (void)	__attribute__((signal));
void  __vector_2 (void)
{
    1932:	1f 92       	push	r1
    1934:	0f 92       	push	r0
    1936:	0f b6       	in	r0, 0x3f	; 63
    1938:	0f 92       	push	r0
    193a:	11 24       	eor	r1, r1
    193c:	2f 93       	push	r18
    193e:	3f 93       	push	r19
    1940:	4f 93       	push	r20
    1942:	5f 93       	push	r21
    1944:	6f 93       	push	r22
    1946:	7f 93       	push	r23
    1948:	8f 93       	push	r24
    194a:	9f 93       	push	r25
    194c:	af 93       	push	r26
    194e:	bf 93       	push	r27
    1950:	ef 93       	push	r30
    1952:	ff 93       	push	r31
    1954:	df 93       	push	r29
    1956:	cf 93       	push	r28
    1958:	cd b7       	in	r28, 0x3d	; 61
    195a:	de b7       	in	r29, 0x3e	; 62
	if(EXTI_pvINTCallBackFunc[EXTI_INT1] != NULL)
    195c:	80 91 62 02 	lds	r24, 0x0262
    1960:	90 91 63 02 	lds	r25, 0x0263
    1964:	00 97       	sbiw	r24, 0x00	; 0
    1966:	29 f0       	breq	.+10     	; 0x1972 <__vector_2+0x40>
	{
		EXTI_pvINTCallBackFunc[EXTI_INT1]();
    1968:	e0 91 62 02 	lds	r30, 0x0262
    196c:	f0 91 63 02 	lds	r31, 0x0263
    1970:	09 95       	icall
	}
}
    1972:	cf 91       	pop	r28
    1974:	df 91       	pop	r29
    1976:	ff 91       	pop	r31
    1978:	ef 91       	pop	r30
    197a:	bf 91       	pop	r27
    197c:	af 91       	pop	r26
    197e:	9f 91       	pop	r25
    1980:	8f 91       	pop	r24
    1982:	7f 91       	pop	r23
    1984:	6f 91       	pop	r22
    1986:	5f 91       	pop	r21
    1988:	4f 91       	pop	r20
    198a:	3f 91       	pop	r19
    198c:	2f 91       	pop	r18
    198e:	0f 90       	pop	r0
    1990:	0f be       	out	0x3f, r0	; 63
    1992:	0f 90       	pop	r0
    1994:	1f 90       	pop	r1
    1996:	18 95       	reti

00001998 <__vector_3>:
/*ISR of INT2*/
void  __vector_3 (void)	__attribute__((signal));
void  __vector_3 (void)
{
    1998:	1f 92       	push	r1
    199a:	0f 92       	push	r0
    199c:	0f b6       	in	r0, 0x3f	; 63
    199e:	0f 92       	push	r0
    19a0:	11 24       	eor	r1, r1
    19a2:	2f 93       	push	r18
    19a4:	3f 93       	push	r19
    19a6:	4f 93       	push	r20
    19a8:	5f 93       	push	r21
    19aa:	6f 93       	push	r22
    19ac:	7f 93       	push	r23
    19ae:	8f 93       	push	r24
    19b0:	9f 93       	push	r25
    19b2:	af 93       	push	r26
    19b4:	bf 93       	push	r27
    19b6:	ef 93       	push	r30
    19b8:	ff 93       	push	r31
    19ba:	df 93       	push	r29
    19bc:	cf 93       	push	r28
    19be:	cd b7       	in	r28, 0x3d	; 61
    19c0:	de b7       	in	r29, 0x3e	; 62
	if(EXTI_pvINTCallBackFunc[EXTI_INT2] != NULL)
    19c2:	80 91 64 02 	lds	r24, 0x0264
    19c6:	90 91 65 02 	lds	r25, 0x0265
    19ca:	00 97       	sbiw	r24, 0x00	; 0
    19cc:	29 f0       	breq	.+10     	; 0x19d8 <__vector_3+0x40>
	{
		EXTI_pvINTCallBackFunc[EXTI_INT0]();
    19ce:	e0 91 60 02 	lds	r30, 0x0260
    19d2:	f0 91 61 02 	lds	r31, 0x0261
    19d6:	09 95       	icall
	}

}
    19d8:	cf 91       	pop	r28
    19da:	df 91       	pop	r29
    19dc:	ff 91       	pop	r31
    19de:	ef 91       	pop	r30
    19e0:	bf 91       	pop	r27
    19e2:	af 91       	pop	r26
    19e4:	9f 91       	pop	r25
    19e6:	8f 91       	pop	r24
    19e8:	7f 91       	pop	r23
    19ea:	6f 91       	pop	r22
    19ec:	5f 91       	pop	r21
    19ee:	4f 91       	pop	r20
    19f0:	3f 91       	pop	r19
    19f2:	2f 91       	pop	r18
    19f4:	0f 90       	pop	r0
    19f6:	0f be       	out	0x3f, r0	; 63
    19f8:	0f 90       	pop	r0
    19fa:	1f 90       	pop	r1
    19fc:	18 95       	reti

000019fe <MDIO_voidSetPinMode>:
#include "DIO_private.h"



void MDIO_voidSetPinMode(u8 copy_u8PinId , u8 copy_u8PortId , u8 copy_u8PinMode)
{
    19fe:	df 93       	push	r29
    1a00:	cf 93       	push	r28
    1a02:	cd b7       	in	r28, 0x3d	; 61
    1a04:	de b7       	in	r29, 0x3e	; 62
    1a06:	27 97       	sbiw	r28, 0x07	; 7
    1a08:	0f b6       	in	r0, 0x3f	; 63
    1a0a:	f8 94       	cli
    1a0c:	de bf       	out	0x3e, r29	; 62
    1a0e:	0f be       	out	0x3f, r0	; 63
    1a10:	cd bf       	out	0x3d, r28	; 61
    1a12:	89 83       	std	Y+1, r24	; 0x01
    1a14:	6a 83       	std	Y+2, r22	; 0x02
    1a16:	4b 83       	std	Y+3, r20	; 0x03
	/*check that PinId and PortId are in Range*/
	if(copy_u8PinId <= DIO_PIN7 && copy_u8PortId <= DIO_PORTD)
    1a18:	89 81       	ldd	r24, Y+1	; 0x01
    1a1a:	88 30       	cpi	r24, 0x08	; 8
    1a1c:	08 f0       	brcs	.+2      	; 0x1a20 <MDIO_voidSetPinMode+0x22>
    1a1e:	ee c0       	rjmp	.+476    	; 0x1bfc <MDIO_voidSetPinMode+0x1fe>
    1a20:	8a 81       	ldd	r24, Y+2	; 0x02
    1a22:	84 30       	cpi	r24, 0x04	; 4
    1a24:	08 f0       	brcs	.+2      	; 0x1a28 <MDIO_voidSetPinMode+0x2a>
    1a26:	ea c0       	rjmp	.+468    	; 0x1bfc <MDIO_voidSetPinMode+0x1fe>
	{
		/*Direction Mode of Pin is OUTPUT*/
		if(copy_u8PinMode == DIO_OUTPUT)
    1a28:	8b 81       	ldd	r24, Y+3	; 0x03
    1a2a:	81 30       	cpi	r24, 0x01	; 1
    1a2c:	09 f0       	breq	.+2      	; 0x1a30 <MDIO_voidSetPinMode+0x32>
    1a2e:	6f c0       	rjmp	.+222    	; 0x1b0e <MDIO_voidSetPinMode+0x110>
		{
			/*Switch on PortId*/
			switch(copy_u8PortId)
    1a30:	8a 81       	ldd	r24, Y+2	; 0x02
    1a32:	28 2f       	mov	r18, r24
    1a34:	30 e0       	ldi	r19, 0x00	; 0
    1a36:	3f 83       	std	Y+7, r19	; 0x07
    1a38:	2e 83       	std	Y+6, r18	; 0x06
    1a3a:	8e 81       	ldd	r24, Y+6	; 0x06
    1a3c:	9f 81       	ldd	r25, Y+7	; 0x07
    1a3e:	81 30       	cpi	r24, 0x01	; 1
    1a40:	91 05       	cpc	r25, r1
    1a42:	49 f1       	breq	.+82     	; 0x1a96 <MDIO_voidSetPinMode+0x98>
    1a44:	2e 81       	ldd	r18, Y+6	; 0x06
    1a46:	3f 81       	ldd	r19, Y+7	; 0x07
    1a48:	22 30       	cpi	r18, 0x02	; 2
    1a4a:	31 05       	cpc	r19, r1
    1a4c:	2c f4       	brge	.+10     	; 0x1a58 <MDIO_voidSetPinMode+0x5a>
    1a4e:	8e 81       	ldd	r24, Y+6	; 0x06
    1a50:	9f 81       	ldd	r25, Y+7	; 0x07
    1a52:	00 97       	sbiw	r24, 0x00	; 0
    1a54:	61 f0       	breq	.+24     	; 0x1a6e <MDIO_voidSetPinMode+0x70>
    1a56:	d2 c0       	rjmp	.+420    	; 0x1bfc <MDIO_voidSetPinMode+0x1fe>
    1a58:	2e 81       	ldd	r18, Y+6	; 0x06
    1a5a:	3f 81       	ldd	r19, Y+7	; 0x07
    1a5c:	22 30       	cpi	r18, 0x02	; 2
    1a5e:	31 05       	cpc	r19, r1
    1a60:	71 f1       	breq	.+92     	; 0x1abe <MDIO_voidSetPinMode+0xc0>
    1a62:	8e 81       	ldd	r24, Y+6	; 0x06
    1a64:	9f 81       	ldd	r25, Y+7	; 0x07
    1a66:	83 30       	cpi	r24, 0x03	; 3
    1a68:	91 05       	cpc	r25, r1
    1a6a:	e9 f1       	breq	.+122    	; 0x1ae6 <MDIO_voidSetPinMode+0xe8>
    1a6c:	c7 c0       	rjmp	.+398    	; 0x1bfc <MDIO_voidSetPinMode+0x1fe>
			{
			/*case PORTA set the bit number PinId in DDRA register */
			case DIO_PORTA:	SET_BIT(DDRA_REG,copy_u8PinId);break;
    1a6e:	aa e3       	ldi	r26, 0x3A	; 58
    1a70:	b0 e0       	ldi	r27, 0x00	; 0
    1a72:	ea e3       	ldi	r30, 0x3A	; 58
    1a74:	f0 e0       	ldi	r31, 0x00	; 0
    1a76:	80 81       	ld	r24, Z
    1a78:	48 2f       	mov	r20, r24
    1a7a:	89 81       	ldd	r24, Y+1	; 0x01
    1a7c:	28 2f       	mov	r18, r24
    1a7e:	30 e0       	ldi	r19, 0x00	; 0
    1a80:	81 e0       	ldi	r24, 0x01	; 1
    1a82:	90 e0       	ldi	r25, 0x00	; 0
    1a84:	02 2e       	mov	r0, r18
    1a86:	02 c0       	rjmp	.+4      	; 0x1a8c <MDIO_voidSetPinMode+0x8e>
    1a88:	88 0f       	add	r24, r24
    1a8a:	99 1f       	adc	r25, r25
    1a8c:	0a 94       	dec	r0
    1a8e:	e2 f7       	brpl	.-8      	; 0x1a88 <MDIO_voidSetPinMode+0x8a>
    1a90:	84 2b       	or	r24, r20
    1a92:	8c 93       	st	X, r24
    1a94:	b3 c0       	rjmp	.+358    	; 0x1bfc <MDIO_voidSetPinMode+0x1fe>
			/*case PORTB set the bit number PinId in DDRB register */
			case DIO_PORTB:	SET_BIT(DDRB_REG,copy_u8PinId);break;
    1a96:	a7 e3       	ldi	r26, 0x37	; 55
    1a98:	b0 e0       	ldi	r27, 0x00	; 0
    1a9a:	e7 e3       	ldi	r30, 0x37	; 55
    1a9c:	f0 e0       	ldi	r31, 0x00	; 0
    1a9e:	80 81       	ld	r24, Z
    1aa0:	48 2f       	mov	r20, r24
    1aa2:	89 81       	ldd	r24, Y+1	; 0x01
    1aa4:	28 2f       	mov	r18, r24
    1aa6:	30 e0       	ldi	r19, 0x00	; 0
    1aa8:	81 e0       	ldi	r24, 0x01	; 1
    1aaa:	90 e0       	ldi	r25, 0x00	; 0
    1aac:	02 2e       	mov	r0, r18
    1aae:	02 c0       	rjmp	.+4      	; 0x1ab4 <MDIO_voidSetPinMode+0xb6>
    1ab0:	88 0f       	add	r24, r24
    1ab2:	99 1f       	adc	r25, r25
    1ab4:	0a 94       	dec	r0
    1ab6:	e2 f7       	brpl	.-8      	; 0x1ab0 <MDIO_voidSetPinMode+0xb2>
    1ab8:	84 2b       	or	r24, r20
    1aba:	8c 93       	st	X, r24
    1abc:	9f c0       	rjmp	.+318    	; 0x1bfc <MDIO_voidSetPinMode+0x1fe>
			/*case PORTC set the bit number PinId in DDRC register */
			case DIO_PORTC:	SET_BIT(DDRC_REG,copy_u8PinId);break;
    1abe:	a4 e3       	ldi	r26, 0x34	; 52
    1ac0:	b0 e0       	ldi	r27, 0x00	; 0
    1ac2:	e4 e3       	ldi	r30, 0x34	; 52
    1ac4:	f0 e0       	ldi	r31, 0x00	; 0
    1ac6:	80 81       	ld	r24, Z
    1ac8:	48 2f       	mov	r20, r24
    1aca:	89 81       	ldd	r24, Y+1	; 0x01
    1acc:	28 2f       	mov	r18, r24
    1ace:	30 e0       	ldi	r19, 0x00	; 0
    1ad0:	81 e0       	ldi	r24, 0x01	; 1
    1ad2:	90 e0       	ldi	r25, 0x00	; 0
    1ad4:	02 2e       	mov	r0, r18
    1ad6:	02 c0       	rjmp	.+4      	; 0x1adc <MDIO_voidSetPinMode+0xde>
    1ad8:	88 0f       	add	r24, r24
    1ada:	99 1f       	adc	r25, r25
    1adc:	0a 94       	dec	r0
    1ade:	e2 f7       	brpl	.-8      	; 0x1ad8 <MDIO_voidSetPinMode+0xda>
    1ae0:	84 2b       	or	r24, r20
    1ae2:	8c 93       	st	X, r24
    1ae4:	8b c0       	rjmp	.+278    	; 0x1bfc <MDIO_voidSetPinMode+0x1fe>
			/*case PORTD set the bit number PinId in DDRD register */
			case DIO_PORTD:	SET_BIT(DDRD_REG,copy_u8PinId);break;
    1ae6:	a1 e3       	ldi	r26, 0x31	; 49
    1ae8:	b0 e0       	ldi	r27, 0x00	; 0
    1aea:	e1 e3       	ldi	r30, 0x31	; 49
    1aec:	f0 e0       	ldi	r31, 0x00	; 0
    1aee:	80 81       	ld	r24, Z
    1af0:	48 2f       	mov	r20, r24
    1af2:	89 81       	ldd	r24, Y+1	; 0x01
    1af4:	28 2f       	mov	r18, r24
    1af6:	30 e0       	ldi	r19, 0x00	; 0
    1af8:	81 e0       	ldi	r24, 0x01	; 1
    1afa:	90 e0       	ldi	r25, 0x00	; 0
    1afc:	02 2e       	mov	r0, r18
    1afe:	02 c0       	rjmp	.+4      	; 0x1b04 <MDIO_voidSetPinMode+0x106>
    1b00:	88 0f       	add	r24, r24
    1b02:	99 1f       	adc	r25, r25
    1b04:	0a 94       	dec	r0
    1b06:	e2 f7       	brpl	.-8      	; 0x1b00 <MDIO_voidSetPinMode+0x102>
    1b08:	84 2b       	or	r24, r20
    1b0a:	8c 93       	st	X, r24
    1b0c:	77 c0       	rjmp	.+238    	; 0x1bfc <MDIO_voidSetPinMode+0x1fe>
			}
		}
		/*Direction Mode of Pin is INPUT*/
		else if(copy_u8PinMode == DIO_INPUT)
    1b0e:	8b 81       	ldd	r24, Y+3	; 0x03
    1b10:	88 23       	and	r24, r24
    1b12:	09 f0       	breq	.+2      	; 0x1b16 <MDIO_voidSetPinMode+0x118>
    1b14:	73 c0       	rjmp	.+230    	; 0x1bfc <MDIO_voidSetPinMode+0x1fe>
		{
			/*Switch on PortId*/
			switch(copy_u8PortId)
    1b16:	8a 81       	ldd	r24, Y+2	; 0x02
    1b18:	28 2f       	mov	r18, r24
    1b1a:	30 e0       	ldi	r19, 0x00	; 0
    1b1c:	3d 83       	std	Y+5, r19	; 0x05
    1b1e:	2c 83       	std	Y+4, r18	; 0x04
    1b20:	8c 81       	ldd	r24, Y+4	; 0x04
    1b22:	9d 81       	ldd	r25, Y+5	; 0x05
    1b24:	81 30       	cpi	r24, 0x01	; 1
    1b26:	91 05       	cpc	r25, r1
    1b28:	59 f1       	breq	.+86     	; 0x1b80 <MDIO_voidSetPinMode+0x182>
    1b2a:	2c 81       	ldd	r18, Y+4	; 0x04
    1b2c:	3d 81       	ldd	r19, Y+5	; 0x05
    1b2e:	22 30       	cpi	r18, 0x02	; 2
    1b30:	31 05       	cpc	r19, r1
    1b32:	2c f4       	brge	.+10     	; 0x1b3e <MDIO_voidSetPinMode+0x140>
    1b34:	8c 81       	ldd	r24, Y+4	; 0x04
    1b36:	9d 81       	ldd	r25, Y+5	; 0x05
    1b38:	00 97       	sbiw	r24, 0x00	; 0
    1b3a:	69 f0       	breq	.+26     	; 0x1b56 <MDIO_voidSetPinMode+0x158>
    1b3c:	5f c0       	rjmp	.+190    	; 0x1bfc <MDIO_voidSetPinMode+0x1fe>
    1b3e:	2c 81       	ldd	r18, Y+4	; 0x04
    1b40:	3d 81       	ldd	r19, Y+5	; 0x05
    1b42:	22 30       	cpi	r18, 0x02	; 2
    1b44:	31 05       	cpc	r19, r1
    1b46:	89 f1       	breq	.+98     	; 0x1baa <MDIO_voidSetPinMode+0x1ac>
    1b48:	8c 81       	ldd	r24, Y+4	; 0x04
    1b4a:	9d 81       	ldd	r25, Y+5	; 0x05
    1b4c:	83 30       	cpi	r24, 0x03	; 3
    1b4e:	91 05       	cpc	r25, r1
    1b50:	09 f4       	brne	.+2      	; 0x1b54 <MDIO_voidSetPinMode+0x156>
    1b52:	40 c0       	rjmp	.+128    	; 0x1bd4 <MDIO_voidSetPinMode+0x1d6>
    1b54:	53 c0       	rjmp	.+166    	; 0x1bfc <MDIO_voidSetPinMode+0x1fe>
			{
			/*case PORTA Clear the bit number PinId in DDRA register */
			case DIO_PORTA:	CLR_BIT(DDRA_REG,copy_u8PinId);break;
    1b56:	aa e3       	ldi	r26, 0x3A	; 58
    1b58:	b0 e0       	ldi	r27, 0x00	; 0
    1b5a:	ea e3       	ldi	r30, 0x3A	; 58
    1b5c:	f0 e0       	ldi	r31, 0x00	; 0
    1b5e:	80 81       	ld	r24, Z
    1b60:	48 2f       	mov	r20, r24
    1b62:	89 81       	ldd	r24, Y+1	; 0x01
    1b64:	28 2f       	mov	r18, r24
    1b66:	30 e0       	ldi	r19, 0x00	; 0
    1b68:	81 e0       	ldi	r24, 0x01	; 1
    1b6a:	90 e0       	ldi	r25, 0x00	; 0
    1b6c:	02 2e       	mov	r0, r18
    1b6e:	02 c0       	rjmp	.+4      	; 0x1b74 <MDIO_voidSetPinMode+0x176>
    1b70:	88 0f       	add	r24, r24
    1b72:	99 1f       	adc	r25, r25
    1b74:	0a 94       	dec	r0
    1b76:	e2 f7       	brpl	.-8      	; 0x1b70 <MDIO_voidSetPinMode+0x172>
    1b78:	80 95       	com	r24
    1b7a:	84 23       	and	r24, r20
    1b7c:	8c 93       	st	X, r24
    1b7e:	3e c0       	rjmp	.+124    	; 0x1bfc <MDIO_voidSetPinMode+0x1fe>
			/*case PORTB Clear the bit number PinId in DDRB register */
			case DIO_PORTB:	CLR_BIT(DDRB_REG,copy_u8PinId);break;
    1b80:	a7 e3       	ldi	r26, 0x37	; 55
    1b82:	b0 e0       	ldi	r27, 0x00	; 0
    1b84:	e7 e3       	ldi	r30, 0x37	; 55
    1b86:	f0 e0       	ldi	r31, 0x00	; 0
    1b88:	80 81       	ld	r24, Z
    1b8a:	48 2f       	mov	r20, r24
    1b8c:	89 81       	ldd	r24, Y+1	; 0x01
    1b8e:	28 2f       	mov	r18, r24
    1b90:	30 e0       	ldi	r19, 0x00	; 0
    1b92:	81 e0       	ldi	r24, 0x01	; 1
    1b94:	90 e0       	ldi	r25, 0x00	; 0
    1b96:	02 2e       	mov	r0, r18
    1b98:	02 c0       	rjmp	.+4      	; 0x1b9e <MDIO_voidSetPinMode+0x1a0>
    1b9a:	88 0f       	add	r24, r24
    1b9c:	99 1f       	adc	r25, r25
    1b9e:	0a 94       	dec	r0
    1ba0:	e2 f7       	brpl	.-8      	; 0x1b9a <MDIO_voidSetPinMode+0x19c>
    1ba2:	80 95       	com	r24
    1ba4:	84 23       	and	r24, r20
    1ba6:	8c 93       	st	X, r24
    1ba8:	29 c0       	rjmp	.+82     	; 0x1bfc <MDIO_voidSetPinMode+0x1fe>
			/*case PORTC Clear the bit number PinId in DDRC register */
			case DIO_PORTC:	CLR_BIT(DDRC_REG,copy_u8PinId);break;
    1baa:	a4 e3       	ldi	r26, 0x34	; 52
    1bac:	b0 e0       	ldi	r27, 0x00	; 0
    1bae:	e4 e3       	ldi	r30, 0x34	; 52
    1bb0:	f0 e0       	ldi	r31, 0x00	; 0
    1bb2:	80 81       	ld	r24, Z
    1bb4:	48 2f       	mov	r20, r24
    1bb6:	89 81       	ldd	r24, Y+1	; 0x01
    1bb8:	28 2f       	mov	r18, r24
    1bba:	30 e0       	ldi	r19, 0x00	; 0
    1bbc:	81 e0       	ldi	r24, 0x01	; 1
    1bbe:	90 e0       	ldi	r25, 0x00	; 0
    1bc0:	02 2e       	mov	r0, r18
    1bc2:	02 c0       	rjmp	.+4      	; 0x1bc8 <MDIO_voidSetPinMode+0x1ca>
    1bc4:	88 0f       	add	r24, r24
    1bc6:	99 1f       	adc	r25, r25
    1bc8:	0a 94       	dec	r0
    1bca:	e2 f7       	brpl	.-8      	; 0x1bc4 <MDIO_voidSetPinMode+0x1c6>
    1bcc:	80 95       	com	r24
    1bce:	84 23       	and	r24, r20
    1bd0:	8c 93       	st	X, r24
    1bd2:	14 c0       	rjmp	.+40     	; 0x1bfc <MDIO_voidSetPinMode+0x1fe>
			/*case PORTD Clear the bit number PinId in DDRD register */
			case DIO_PORTD:	CLR_BIT(DDRD_REG,copy_u8PinId);break;
    1bd4:	a1 e3       	ldi	r26, 0x31	; 49
    1bd6:	b0 e0       	ldi	r27, 0x00	; 0
    1bd8:	e1 e3       	ldi	r30, 0x31	; 49
    1bda:	f0 e0       	ldi	r31, 0x00	; 0
    1bdc:	80 81       	ld	r24, Z
    1bde:	48 2f       	mov	r20, r24
    1be0:	89 81       	ldd	r24, Y+1	; 0x01
    1be2:	28 2f       	mov	r18, r24
    1be4:	30 e0       	ldi	r19, 0x00	; 0
    1be6:	81 e0       	ldi	r24, 0x01	; 1
    1be8:	90 e0       	ldi	r25, 0x00	; 0
    1bea:	02 2e       	mov	r0, r18
    1bec:	02 c0       	rjmp	.+4      	; 0x1bf2 <MDIO_voidSetPinMode+0x1f4>
    1bee:	88 0f       	add	r24, r24
    1bf0:	99 1f       	adc	r25, r25
    1bf2:	0a 94       	dec	r0
    1bf4:	e2 f7       	brpl	.-8      	; 0x1bee <MDIO_voidSetPinMode+0x1f0>
    1bf6:	80 95       	com	r24
    1bf8:	84 23       	and	r24, r20
    1bfa:	8c 93       	st	X, r24
	else
	{
		//report error massage
	}
	
}
    1bfc:	27 96       	adiw	r28, 0x07	; 7
    1bfe:	0f b6       	in	r0, 0x3f	; 63
    1c00:	f8 94       	cli
    1c02:	de bf       	out	0x3e, r29	; 62
    1c04:	0f be       	out	0x3f, r0	; 63
    1c06:	cd bf       	out	0x3d, r28	; 61
    1c08:	cf 91       	pop	r28
    1c0a:	df 91       	pop	r29
    1c0c:	08 95       	ret

00001c0e <MDIO_voidSetPinValue>:


void MDIO_voidSetPinValue(u8 copy_u8PinId , u8 copy_u8PortId , u8 copy_u8PinValue)
{
    1c0e:	df 93       	push	r29
    1c10:	cf 93       	push	r28
    1c12:	cd b7       	in	r28, 0x3d	; 61
    1c14:	de b7       	in	r29, 0x3e	; 62
    1c16:	27 97       	sbiw	r28, 0x07	; 7
    1c18:	0f b6       	in	r0, 0x3f	; 63
    1c1a:	f8 94       	cli
    1c1c:	de bf       	out	0x3e, r29	; 62
    1c1e:	0f be       	out	0x3f, r0	; 63
    1c20:	cd bf       	out	0x3d, r28	; 61
    1c22:	89 83       	std	Y+1, r24	; 0x01
    1c24:	6a 83       	std	Y+2, r22	; 0x02
    1c26:	4b 83       	std	Y+3, r20	; 0x03
	/*check that PinId and PortId are in Range*/
	if(copy_u8PinId <= DIO_PIN7 && copy_u8PortId <= DIO_PORTD)
    1c28:	89 81       	ldd	r24, Y+1	; 0x01
    1c2a:	88 30       	cpi	r24, 0x08	; 8
    1c2c:	08 f0       	brcs	.+2      	; 0x1c30 <MDIO_voidSetPinValue+0x22>
    1c2e:	ee c0       	rjmp	.+476    	; 0x1e0c <MDIO_voidSetPinValue+0x1fe>
    1c30:	8a 81       	ldd	r24, Y+2	; 0x02
    1c32:	84 30       	cpi	r24, 0x04	; 4
    1c34:	08 f0       	brcs	.+2      	; 0x1c38 <MDIO_voidSetPinValue+0x2a>
    1c36:	ea c0       	rjmp	.+468    	; 0x1e0c <MDIO_voidSetPinValue+0x1fe>
	{
		/*Value is HIGH*/
		if(copy_u8PinValue == DIO_HIGH)
    1c38:	8b 81       	ldd	r24, Y+3	; 0x03
    1c3a:	81 30       	cpi	r24, 0x01	; 1
    1c3c:	09 f0       	breq	.+2      	; 0x1c40 <MDIO_voidSetPinValue+0x32>
    1c3e:	6f c0       	rjmp	.+222    	; 0x1d1e <MDIO_voidSetPinValue+0x110>
		{
			/*Switch on PortId*/
			switch(copy_u8PortId)
    1c40:	8a 81       	ldd	r24, Y+2	; 0x02
    1c42:	28 2f       	mov	r18, r24
    1c44:	30 e0       	ldi	r19, 0x00	; 0
    1c46:	3f 83       	std	Y+7, r19	; 0x07
    1c48:	2e 83       	std	Y+6, r18	; 0x06
    1c4a:	8e 81       	ldd	r24, Y+6	; 0x06
    1c4c:	9f 81       	ldd	r25, Y+7	; 0x07
    1c4e:	81 30       	cpi	r24, 0x01	; 1
    1c50:	91 05       	cpc	r25, r1
    1c52:	49 f1       	breq	.+82     	; 0x1ca6 <MDIO_voidSetPinValue+0x98>
    1c54:	2e 81       	ldd	r18, Y+6	; 0x06
    1c56:	3f 81       	ldd	r19, Y+7	; 0x07
    1c58:	22 30       	cpi	r18, 0x02	; 2
    1c5a:	31 05       	cpc	r19, r1
    1c5c:	2c f4       	brge	.+10     	; 0x1c68 <MDIO_voidSetPinValue+0x5a>
    1c5e:	8e 81       	ldd	r24, Y+6	; 0x06
    1c60:	9f 81       	ldd	r25, Y+7	; 0x07
    1c62:	00 97       	sbiw	r24, 0x00	; 0
    1c64:	61 f0       	breq	.+24     	; 0x1c7e <MDIO_voidSetPinValue+0x70>
    1c66:	d2 c0       	rjmp	.+420    	; 0x1e0c <MDIO_voidSetPinValue+0x1fe>
    1c68:	2e 81       	ldd	r18, Y+6	; 0x06
    1c6a:	3f 81       	ldd	r19, Y+7	; 0x07
    1c6c:	22 30       	cpi	r18, 0x02	; 2
    1c6e:	31 05       	cpc	r19, r1
    1c70:	71 f1       	breq	.+92     	; 0x1cce <MDIO_voidSetPinValue+0xc0>
    1c72:	8e 81       	ldd	r24, Y+6	; 0x06
    1c74:	9f 81       	ldd	r25, Y+7	; 0x07
    1c76:	83 30       	cpi	r24, 0x03	; 3
    1c78:	91 05       	cpc	r25, r1
    1c7a:	e9 f1       	breq	.+122    	; 0x1cf6 <MDIO_voidSetPinValue+0xe8>
    1c7c:	c7 c0       	rjmp	.+398    	; 0x1e0c <MDIO_voidSetPinValue+0x1fe>
			{
			/*case PORTA SET the bit number PinId in PORTA register */
			case DIO_PORTA:	SET_BIT(PORTA_REG,copy_u8PinId);break;
    1c7e:	ab e3       	ldi	r26, 0x3B	; 59
    1c80:	b0 e0       	ldi	r27, 0x00	; 0
    1c82:	eb e3       	ldi	r30, 0x3B	; 59
    1c84:	f0 e0       	ldi	r31, 0x00	; 0
    1c86:	80 81       	ld	r24, Z
    1c88:	48 2f       	mov	r20, r24
    1c8a:	89 81       	ldd	r24, Y+1	; 0x01
    1c8c:	28 2f       	mov	r18, r24
    1c8e:	30 e0       	ldi	r19, 0x00	; 0
    1c90:	81 e0       	ldi	r24, 0x01	; 1
    1c92:	90 e0       	ldi	r25, 0x00	; 0
    1c94:	02 2e       	mov	r0, r18
    1c96:	02 c0       	rjmp	.+4      	; 0x1c9c <MDIO_voidSetPinValue+0x8e>
    1c98:	88 0f       	add	r24, r24
    1c9a:	99 1f       	adc	r25, r25
    1c9c:	0a 94       	dec	r0
    1c9e:	e2 f7       	brpl	.-8      	; 0x1c98 <MDIO_voidSetPinValue+0x8a>
    1ca0:	84 2b       	or	r24, r20
    1ca2:	8c 93       	st	X, r24
    1ca4:	b3 c0       	rjmp	.+358    	; 0x1e0c <MDIO_voidSetPinValue+0x1fe>
			/*case PORTB SET the bit number PinId in PORTB register */
			case DIO_PORTB:	SET_BIT(PORTB_REG,copy_u8PinId);break;
    1ca6:	a8 e3       	ldi	r26, 0x38	; 56
    1ca8:	b0 e0       	ldi	r27, 0x00	; 0
    1caa:	e8 e3       	ldi	r30, 0x38	; 56
    1cac:	f0 e0       	ldi	r31, 0x00	; 0
    1cae:	80 81       	ld	r24, Z
    1cb0:	48 2f       	mov	r20, r24
    1cb2:	89 81       	ldd	r24, Y+1	; 0x01
    1cb4:	28 2f       	mov	r18, r24
    1cb6:	30 e0       	ldi	r19, 0x00	; 0
    1cb8:	81 e0       	ldi	r24, 0x01	; 1
    1cba:	90 e0       	ldi	r25, 0x00	; 0
    1cbc:	02 2e       	mov	r0, r18
    1cbe:	02 c0       	rjmp	.+4      	; 0x1cc4 <MDIO_voidSetPinValue+0xb6>
    1cc0:	88 0f       	add	r24, r24
    1cc2:	99 1f       	adc	r25, r25
    1cc4:	0a 94       	dec	r0
    1cc6:	e2 f7       	brpl	.-8      	; 0x1cc0 <MDIO_voidSetPinValue+0xb2>
    1cc8:	84 2b       	or	r24, r20
    1cca:	8c 93       	st	X, r24
    1ccc:	9f c0       	rjmp	.+318    	; 0x1e0c <MDIO_voidSetPinValue+0x1fe>
			/*case PORTC SET the bit number PinId in PORTC register */
			case DIO_PORTC:	SET_BIT(PORTC_REG,copy_u8PinId);break;
    1cce:	a5 e3       	ldi	r26, 0x35	; 53
    1cd0:	b0 e0       	ldi	r27, 0x00	; 0
    1cd2:	e5 e3       	ldi	r30, 0x35	; 53
    1cd4:	f0 e0       	ldi	r31, 0x00	; 0
    1cd6:	80 81       	ld	r24, Z
    1cd8:	48 2f       	mov	r20, r24
    1cda:	89 81       	ldd	r24, Y+1	; 0x01
    1cdc:	28 2f       	mov	r18, r24
    1cde:	30 e0       	ldi	r19, 0x00	; 0
    1ce0:	81 e0       	ldi	r24, 0x01	; 1
    1ce2:	90 e0       	ldi	r25, 0x00	; 0
    1ce4:	02 2e       	mov	r0, r18
    1ce6:	02 c0       	rjmp	.+4      	; 0x1cec <MDIO_voidSetPinValue+0xde>
    1ce8:	88 0f       	add	r24, r24
    1cea:	99 1f       	adc	r25, r25
    1cec:	0a 94       	dec	r0
    1cee:	e2 f7       	brpl	.-8      	; 0x1ce8 <MDIO_voidSetPinValue+0xda>
    1cf0:	84 2b       	or	r24, r20
    1cf2:	8c 93       	st	X, r24
    1cf4:	8b c0       	rjmp	.+278    	; 0x1e0c <MDIO_voidSetPinValue+0x1fe>
			/*case PORTD SET the bit number PinId in PORTD register */
			case DIO_PORTD:	SET_BIT(PORTD_REG,copy_u8PinId);break;
    1cf6:	a2 e3       	ldi	r26, 0x32	; 50
    1cf8:	b0 e0       	ldi	r27, 0x00	; 0
    1cfa:	e2 e3       	ldi	r30, 0x32	; 50
    1cfc:	f0 e0       	ldi	r31, 0x00	; 0
    1cfe:	80 81       	ld	r24, Z
    1d00:	48 2f       	mov	r20, r24
    1d02:	89 81       	ldd	r24, Y+1	; 0x01
    1d04:	28 2f       	mov	r18, r24
    1d06:	30 e0       	ldi	r19, 0x00	; 0
    1d08:	81 e0       	ldi	r24, 0x01	; 1
    1d0a:	90 e0       	ldi	r25, 0x00	; 0
    1d0c:	02 2e       	mov	r0, r18
    1d0e:	02 c0       	rjmp	.+4      	; 0x1d14 <MDIO_voidSetPinValue+0x106>
    1d10:	88 0f       	add	r24, r24
    1d12:	99 1f       	adc	r25, r25
    1d14:	0a 94       	dec	r0
    1d16:	e2 f7       	brpl	.-8      	; 0x1d10 <MDIO_voidSetPinValue+0x102>
    1d18:	84 2b       	or	r24, r20
    1d1a:	8c 93       	st	X, r24
    1d1c:	77 c0       	rjmp	.+238    	; 0x1e0c <MDIO_voidSetPinValue+0x1fe>
			}
		}
		/*Value is LOW*/
		else if(copy_u8PinValue == DIO_LOW)
    1d1e:	8b 81       	ldd	r24, Y+3	; 0x03
    1d20:	88 23       	and	r24, r24
    1d22:	09 f0       	breq	.+2      	; 0x1d26 <MDIO_voidSetPinValue+0x118>
    1d24:	73 c0       	rjmp	.+230    	; 0x1e0c <MDIO_voidSetPinValue+0x1fe>
		{
			/*Switch on PortId*/
			switch(copy_u8PortId)
    1d26:	8a 81       	ldd	r24, Y+2	; 0x02
    1d28:	28 2f       	mov	r18, r24
    1d2a:	30 e0       	ldi	r19, 0x00	; 0
    1d2c:	3d 83       	std	Y+5, r19	; 0x05
    1d2e:	2c 83       	std	Y+4, r18	; 0x04
    1d30:	8c 81       	ldd	r24, Y+4	; 0x04
    1d32:	9d 81       	ldd	r25, Y+5	; 0x05
    1d34:	81 30       	cpi	r24, 0x01	; 1
    1d36:	91 05       	cpc	r25, r1
    1d38:	59 f1       	breq	.+86     	; 0x1d90 <MDIO_voidSetPinValue+0x182>
    1d3a:	2c 81       	ldd	r18, Y+4	; 0x04
    1d3c:	3d 81       	ldd	r19, Y+5	; 0x05
    1d3e:	22 30       	cpi	r18, 0x02	; 2
    1d40:	31 05       	cpc	r19, r1
    1d42:	2c f4       	brge	.+10     	; 0x1d4e <MDIO_voidSetPinValue+0x140>
    1d44:	8c 81       	ldd	r24, Y+4	; 0x04
    1d46:	9d 81       	ldd	r25, Y+5	; 0x05
    1d48:	00 97       	sbiw	r24, 0x00	; 0
    1d4a:	69 f0       	breq	.+26     	; 0x1d66 <MDIO_voidSetPinValue+0x158>
    1d4c:	5f c0       	rjmp	.+190    	; 0x1e0c <MDIO_voidSetPinValue+0x1fe>
    1d4e:	2c 81       	ldd	r18, Y+4	; 0x04
    1d50:	3d 81       	ldd	r19, Y+5	; 0x05
    1d52:	22 30       	cpi	r18, 0x02	; 2
    1d54:	31 05       	cpc	r19, r1
    1d56:	89 f1       	breq	.+98     	; 0x1dba <MDIO_voidSetPinValue+0x1ac>
    1d58:	8c 81       	ldd	r24, Y+4	; 0x04
    1d5a:	9d 81       	ldd	r25, Y+5	; 0x05
    1d5c:	83 30       	cpi	r24, 0x03	; 3
    1d5e:	91 05       	cpc	r25, r1
    1d60:	09 f4       	brne	.+2      	; 0x1d64 <MDIO_voidSetPinValue+0x156>
    1d62:	40 c0       	rjmp	.+128    	; 0x1de4 <MDIO_voidSetPinValue+0x1d6>
    1d64:	53 c0       	rjmp	.+166    	; 0x1e0c <MDIO_voidSetPinValue+0x1fe>
			{
			/*case PORTA Clear the bit number PinId in PORTA register */
			case DIO_PORTA:	CLR_BIT(PORTA_REG,copy_u8PinId);break;
    1d66:	ab e3       	ldi	r26, 0x3B	; 59
    1d68:	b0 e0       	ldi	r27, 0x00	; 0
    1d6a:	eb e3       	ldi	r30, 0x3B	; 59
    1d6c:	f0 e0       	ldi	r31, 0x00	; 0
    1d6e:	80 81       	ld	r24, Z
    1d70:	48 2f       	mov	r20, r24
    1d72:	89 81       	ldd	r24, Y+1	; 0x01
    1d74:	28 2f       	mov	r18, r24
    1d76:	30 e0       	ldi	r19, 0x00	; 0
    1d78:	81 e0       	ldi	r24, 0x01	; 1
    1d7a:	90 e0       	ldi	r25, 0x00	; 0
    1d7c:	02 2e       	mov	r0, r18
    1d7e:	02 c0       	rjmp	.+4      	; 0x1d84 <MDIO_voidSetPinValue+0x176>
    1d80:	88 0f       	add	r24, r24
    1d82:	99 1f       	adc	r25, r25
    1d84:	0a 94       	dec	r0
    1d86:	e2 f7       	brpl	.-8      	; 0x1d80 <MDIO_voidSetPinValue+0x172>
    1d88:	80 95       	com	r24
    1d8a:	84 23       	and	r24, r20
    1d8c:	8c 93       	st	X, r24
    1d8e:	3e c0       	rjmp	.+124    	; 0x1e0c <MDIO_voidSetPinValue+0x1fe>
			/*case PORTB Clear the bit number PinId in PORTB register */
			case DIO_PORTB:	CLR_BIT(PORTB_REG,copy_u8PinId);break;
    1d90:	a8 e3       	ldi	r26, 0x38	; 56
    1d92:	b0 e0       	ldi	r27, 0x00	; 0
    1d94:	e8 e3       	ldi	r30, 0x38	; 56
    1d96:	f0 e0       	ldi	r31, 0x00	; 0
    1d98:	80 81       	ld	r24, Z
    1d9a:	48 2f       	mov	r20, r24
    1d9c:	89 81       	ldd	r24, Y+1	; 0x01
    1d9e:	28 2f       	mov	r18, r24
    1da0:	30 e0       	ldi	r19, 0x00	; 0
    1da2:	81 e0       	ldi	r24, 0x01	; 1
    1da4:	90 e0       	ldi	r25, 0x00	; 0
    1da6:	02 2e       	mov	r0, r18
    1da8:	02 c0       	rjmp	.+4      	; 0x1dae <MDIO_voidSetPinValue+0x1a0>
    1daa:	88 0f       	add	r24, r24
    1dac:	99 1f       	adc	r25, r25
    1dae:	0a 94       	dec	r0
    1db0:	e2 f7       	brpl	.-8      	; 0x1daa <MDIO_voidSetPinValue+0x19c>
    1db2:	80 95       	com	r24
    1db4:	84 23       	and	r24, r20
    1db6:	8c 93       	st	X, r24
    1db8:	29 c0       	rjmp	.+82     	; 0x1e0c <MDIO_voidSetPinValue+0x1fe>
			/*case PORTC Clear the bit number PinId in PORTC register */
			case DIO_PORTC:	CLR_BIT(PORTC_REG,copy_u8PinId);break;
    1dba:	a5 e3       	ldi	r26, 0x35	; 53
    1dbc:	b0 e0       	ldi	r27, 0x00	; 0
    1dbe:	e5 e3       	ldi	r30, 0x35	; 53
    1dc0:	f0 e0       	ldi	r31, 0x00	; 0
    1dc2:	80 81       	ld	r24, Z
    1dc4:	48 2f       	mov	r20, r24
    1dc6:	89 81       	ldd	r24, Y+1	; 0x01
    1dc8:	28 2f       	mov	r18, r24
    1dca:	30 e0       	ldi	r19, 0x00	; 0
    1dcc:	81 e0       	ldi	r24, 0x01	; 1
    1dce:	90 e0       	ldi	r25, 0x00	; 0
    1dd0:	02 2e       	mov	r0, r18
    1dd2:	02 c0       	rjmp	.+4      	; 0x1dd8 <MDIO_voidSetPinValue+0x1ca>
    1dd4:	88 0f       	add	r24, r24
    1dd6:	99 1f       	adc	r25, r25
    1dd8:	0a 94       	dec	r0
    1dda:	e2 f7       	brpl	.-8      	; 0x1dd4 <MDIO_voidSetPinValue+0x1c6>
    1ddc:	80 95       	com	r24
    1dde:	84 23       	and	r24, r20
    1de0:	8c 93       	st	X, r24
    1de2:	14 c0       	rjmp	.+40     	; 0x1e0c <MDIO_voidSetPinValue+0x1fe>
			/*case PORTD Clear the bit number PinId in PORTD register */
			case DIO_PORTD:	CLR_BIT(PORTD_REG,copy_u8PinId);break;
    1de4:	a2 e3       	ldi	r26, 0x32	; 50
    1de6:	b0 e0       	ldi	r27, 0x00	; 0
    1de8:	e2 e3       	ldi	r30, 0x32	; 50
    1dea:	f0 e0       	ldi	r31, 0x00	; 0
    1dec:	80 81       	ld	r24, Z
    1dee:	48 2f       	mov	r20, r24
    1df0:	89 81       	ldd	r24, Y+1	; 0x01
    1df2:	28 2f       	mov	r18, r24
    1df4:	30 e0       	ldi	r19, 0x00	; 0
    1df6:	81 e0       	ldi	r24, 0x01	; 1
    1df8:	90 e0       	ldi	r25, 0x00	; 0
    1dfa:	02 2e       	mov	r0, r18
    1dfc:	02 c0       	rjmp	.+4      	; 0x1e02 <MDIO_voidSetPinValue+0x1f4>
    1dfe:	88 0f       	add	r24, r24
    1e00:	99 1f       	adc	r25, r25
    1e02:	0a 94       	dec	r0
    1e04:	e2 f7       	brpl	.-8      	; 0x1dfe <MDIO_voidSetPinValue+0x1f0>
    1e06:	80 95       	com	r24
    1e08:	84 23       	and	r24, r20
    1e0a:	8c 93       	st	X, r24
	}
	else
	{
		//report error massage
	}	
}
    1e0c:	27 96       	adiw	r28, 0x07	; 7
    1e0e:	0f b6       	in	r0, 0x3f	; 63
    1e10:	f8 94       	cli
    1e12:	de bf       	out	0x3e, r29	; 62
    1e14:	0f be       	out	0x3f, r0	; 63
    1e16:	cd bf       	out	0x3d, r28	; 61
    1e18:	cf 91       	pop	r28
    1e1a:	df 91       	pop	r29
    1e1c:	08 95       	ret

00001e1e <MDIO_voidTogPinValue>:

void MDIO_voidTogPinValue(u8 copy_u8PinId , u8 copy_u8PortId)
{
    1e1e:	df 93       	push	r29
    1e20:	cf 93       	push	r28
    1e22:	00 d0       	rcall	.+0      	; 0x1e24 <MDIO_voidTogPinValue+0x6>
    1e24:	00 d0       	rcall	.+0      	; 0x1e26 <MDIO_voidTogPinValue+0x8>
    1e26:	cd b7       	in	r28, 0x3d	; 61
    1e28:	de b7       	in	r29, 0x3e	; 62
    1e2a:	89 83       	std	Y+1, r24	; 0x01
    1e2c:	6a 83       	std	Y+2, r22	; 0x02
	/*check that PinId and PortId are in Range*/
	if(copy_u8PinId <= DIO_PIN7 && copy_u8PortId <= DIO_PORTD)
    1e2e:	89 81       	ldd	r24, Y+1	; 0x01
    1e30:	88 30       	cpi	r24, 0x08	; 8
    1e32:	08 f0       	brcs	.+2      	; 0x1e36 <MDIO_voidTogPinValue+0x18>
    1e34:	72 c0       	rjmp	.+228    	; 0x1f1a <MDIO_voidTogPinValue+0xfc>
    1e36:	8a 81       	ldd	r24, Y+2	; 0x02
    1e38:	84 30       	cpi	r24, 0x04	; 4
    1e3a:	08 f0       	brcs	.+2      	; 0x1e3e <MDIO_voidTogPinValue+0x20>
    1e3c:	6e c0       	rjmp	.+220    	; 0x1f1a <MDIO_voidTogPinValue+0xfc>
	{
		/*Switch on PortId*/
		switch(copy_u8PortId)
    1e3e:	8a 81       	ldd	r24, Y+2	; 0x02
    1e40:	28 2f       	mov	r18, r24
    1e42:	30 e0       	ldi	r19, 0x00	; 0
    1e44:	3c 83       	std	Y+4, r19	; 0x04
    1e46:	2b 83       	std	Y+3, r18	; 0x03
    1e48:	8b 81       	ldd	r24, Y+3	; 0x03
    1e4a:	9c 81       	ldd	r25, Y+4	; 0x04
    1e4c:	81 30       	cpi	r24, 0x01	; 1
    1e4e:	91 05       	cpc	r25, r1
    1e50:	49 f1       	breq	.+82     	; 0x1ea4 <MDIO_voidTogPinValue+0x86>
    1e52:	2b 81       	ldd	r18, Y+3	; 0x03
    1e54:	3c 81       	ldd	r19, Y+4	; 0x04
    1e56:	22 30       	cpi	r18, 0x02	; 2
    1e58:	31 05       	cpc	r19, r1
    1e5a:	2c f4       	brge	.+10     	; 0x1e66 <MDIO_voidTogPinValue+0x48>
    1e5c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e5e:	9c 81       	ldd	r25, Y+4	; 0x04
    1e60:	00 97       	sbiw	r24, 0x00	; 0
    1e62:	61 f0       	breq	.+24     	; 0x1e7c <MDIO_voidTogPinValue+0x5e>
    1e64:	5a c0       	rjmp	.+180    	; 0x1f1a <MDIO_voidTogPinValue+0xfc>
    1e66:	2b 81       	ldd	r18, Y+3	; 0x03
    1e68:	3c 81       	ldd	r19, Y+4	; 0x04
    1e6a:	22 30       	cpi	r18, 0x02	; 2
    1e6c:	31 05       	cpc	r19, r1
    1e6e:	71 f1       	breq	.+92     	; 0x1ecc <MDIO_voidTogPinValue+0xae>
    1e70:	8b 81       	ldd	r24, Y+3	; 0x03
    1e72:	9c 81       	ldd	r25, Y+4	; 0x04
    1e74:	83 30       	cpi	r24, 0x03	; 3
    1e76:	91 05       	cpc	r25, r1
    1e78:	e9 f1       	breq	.+122    	; 0x1ef4 <MDIO_voidTogPinValue+0xd6>
    1e7a:	4f c0       	rjmp	.+158    	; 0x1f1a <MDIO_voidTogPinValue+0xfc>
		{
		/*case PORTA Toggle the bit number PinId in PORTA register*/
		case DIO_PORTA:	TOG_BIT(PORTA_REG,copy_u8PinId);break;
    1e7c:	ab e3       	ldi	r26, 0x3B	; 59
    1e7e:	b0 e0       	ldi	r27, 0x00	; 0
    1e80:	eb e3       	ldi	r30, 0x3B	; 59
    1e82:	f0 e0       	ldi	r31, 0x00	; 0
    1e84:	80 81       	ld	r24, Z
    1e86:	48 2f       	mov	r20, r24
    1e88:	89 81       	ldd	r24, Y+1	; 0x01
    1e8a:	28 2f       	mov	r18, r24
    1e8c:	30 e0       	ldi	r19, 0x00	; 0
    1e8e:	81 e0       	ldi	r24, 0x01	; 1
    1e90:	90 e0       	ldi	r25, 0x00	; 0
    1e92:	02 2e       	mov	r0, r18
    1e94:	02 c0       	rjmp	.+4      	; 0x1e9a <MDIO_voidTogPinValue+0x7c>
    1e96:	88 0f       	add	r24, r24
    1e98:	99 1f       	adc	r25, r25
    1e9a:	0a 94       	dec	r0
    1e9c:	e2 f7       	brpl	.-8      	; 0x1e96 <MDIO_voidTogPinValue+0x78>
    1e9e:	84 27       	eor	r24, r20
    1ea0:	8c 93       	st	X, r24
    1ea2:	3b c0       	rjmp	.+118    	; 0x1f1a <MDIO_voidTogPinValue+0xfc>
		/*case PORTB Toggle the bit number PinId in PORTB register*/
		case DIO_PORTB:	TOG_BIT(PORTB_REG,copy_u8PinId);break;
    1ea4:	a8 e3       	ldi	r26, 0x38	; 56
    1ea6:	b0 e0       	ldi	r27, 0x00	; 0
    1ea8:	e8 e3       	ldi	r30, 0x38	; 56
    1eaa:	f0 e0       	ldi	r31, 0x00	; 0
    1eac:	80 81       	ld	r24, Z
    1eae:	48 2f       	mov	r20, r24
    1eb0:	89 81       	ldd	r24, Y+1	; 0x01
    1eb2:	28 2f       	mov	r18, r24
    1eb4:	30 e0       	ldi	r19, 0x00	; 0
    1eb6:	81 e0       	ldi	r24, 0x01	; 1
    1eb8:	90 e0       	ldi	r25, 0x00	; 0
    1eba:	02 2e       	mov	r0, r18
    1ebc:	02 c0       	rjmp	.+4      	; 0x1ec2 <MDIO_voidTogPinValue+0xa4>
    1ebe:	88 0f       	add	r24, r24
    1ec0:	99 1f       	adc	r25, r25
    1ec2:	0a 94       	dec	r0
    1ec4:	e2 f7       	brpl	.-8      	; 0x1ebe <MDIO_voidTogPinValue+0xa0>
    1ec6:	84 27       	eor	r24, r20
    1ec8:	8c 93       	st	X, r24
    1eca:	27 c0       	rjmp	.+78     	; 0x1f1a <MDIO_voidTogPinValue+0xfc>
		/*case PORTC Toggle the bit number PinId in PORTC register*/
		case DIO_PORTC:	TOG_BIT(PORTC_REG,copy_u8PinId);break;
    1ecc:	a5 e3       	ldi	r26, 0x35	; 53
    1ece:	b0 e0       	ldi	r27, 0x00	; 0
    1ed0:	e5 e3       	ldi	r30, 0x35	; 53
    1ed2:	f0 e0       	ldi	r31, 0x00	; 0
    1ed4:	80 81       	ld	r24, Z
    1ed6:	48 2f       	mov	r20, r24
    1ed8:	89 81       	ldd	r24, Y+1	; 0x01
    1eda:	28 2f       	mov	r18, r24
    1edc:	30 e0       	ldi	r19, 0x00	; 0
    1ede:	81 e0       	ldi	r24, 0x01	; 1
    1ee0:	90 e0       	ldi	r25, 0x00	; 0
    1ee2:	02 2e       	mov	r0, r18
    1ee4:	02 c0       	rjmp	.+4      	; 0x1eea <MDIO_voidTogPinValue+0xcc>
    1ee6:	88 0f       	add	r24, r24
    1ee8:	99 1f       	adc	r25, r25
    1eea:	0a 94       	dec	r0
    1eec:	e2 f7       	brpl	.-8      	; 0x1ee6 <MDIO_voidTogPinValue+0xc8>
    1eee:	84 27       	eor	r24, r20
    1ef0:	8c 93       	st	X, r24
    1ef2:	13 c0       	rjmp	.+38     	; 0x1f1a <MDIO_voidTogPinValue+0xfc>
		/*case PORTD Toggle the bit number PinId in PORTD register*/
		case DIO_PORTD:	TOG_BIT(PORTD_REG,copy_u8PinId);break;
    1ef4:	a2 e3       	ldi	r26, 0x32	; 50
    1ef6:	b0 e0       	ldi	r27, 0x00	; 0
    1ef8:	e2 e3       	ldi	r30, 0x32	; 50
    1efa:	f0 e0       	ldi	r31, 0x00	; 0
    1efc:	80 81       	ld	r24, Z
    1efe:	48 2f       	mov	r20, r24
    1f00:	89 81       	ldd	r24, Y+1	; 0x01
    1f02:	28 2f       	mov	r18, r24
    1f04:	30 e0       	ldi	r19, 0x00	; 0
    1f06:	81 e0       	ldi	r24, 0x01	; 1
    1f08:	90 e0       	ldi	r25, 0x00	; 0
    1f0a:	02 2e       	mov	r0, r18
    1f0c:	02 c0       	rjmp	.+4      	; 0x1f12 <MDIO_voidTogPinValue+0xf4>
    1f0e:	88 0f       	add	r24, r24
    1f10:	99 1f       	adc	r25, r25
    1f12:	0a 94       	dec	r0
    1f14:	e2 f7       	brpl	.-8      	; 0x1f0e <MDIO_voidTogPinValue+0xf0>
    1f16:	84 27       	eor	r24, r20
    1f18:	8c 93       	st	X, r24
	}
	else
	{
		//report error massage
	}	
}
    1f1a:	0f 90       	pop	r0
    1f1c:	0f 90       	pop	r0
    1f1e:	0f 90       	pop	r0
    1f20:	0f 90       	pop	r0
    1f22:	cf 91       	pop	r28
    1f24:	df 91       	pop	r29
    1f26:	08 95       	ret

00001f28 <MDIO_u8GetPinValue>:

u8 MDIO_u8GetPinValue(u8 copy_u8PinId , u8 copy_u8PortId)
{
    1f28:	df 93       	push	r29
    1f2a:	cf 93       	push	r28
    1f2c:	00 d0       	rcall	.+0      	; 0x1f2e <MDIO_u8GetPinValue+0x6>
    1f2e:	00 d0       	rcall	.+0      	; 0x1f30 <MDIO_u8GetPinValue+0x8>
    1f30:	0f 92       	push	r0
    1f32:	cd b7       	in	r28, 0x3d	; 61
    1f34:	de b7       	in	r29, 0x3e	; 62
    1f36:	8a 83       	std	Y+2, r24	; 0x02
    1f38:	6b 83       	std	Y+3, r22	; 0x03
	/*8_bit variable which hold and return The Value of Pin */
	u8 Local_u8Pinvalue;
	/*check that PinId and PortId are in Range*/
	if(copy_u8PinId <= DIO_PIN7 && copy_u8PortId <= DIO_PORTD)
    1f3a:	8a 81       	ldd	r24, Y+2	; 0x02
    1f3c:	88 30       	cpi	r24, 0x08	; 8
    1f3e:	08 f0       	brcs	.+2      	; 0x1f42 <MDIO_u8GetPinValue+0x1a>
    1f40:	6b c0       	rjmp	.+214    	; 0x2018 <MDIO_u8GetPinValue+0xf0>
    1f42:	8b 81       	ldd	r24, Y+3	; 0x03
    1f44:	84 30       	cpi	r24, 0x04	; 4
    1f46:	08 f0       	brcs	.+2      	; 0x1f4a <MDIO_u8GetPinValue+0x22>
    1f48:	67 c0       	rjmp	.+206    	; 0x2018 <MDIO_u8GetPinValue+0xf0>
	{
		/*Switch on PortId*/
		switch(copy_u8PortId)
    1f4a:	8b 81       	ldd	r24, Y+3	; 0x03
    1f4c:	28 2f       	mov	r18, r24
    1f4e:	30 e0       	ldi	r19, 0x00	; 0
    1f50:	3d 83       	std	Y+5, r19	; 0x05
    1f52:	2c 83       	std	Y+4, r18	; 0x04
    1f54:	4c 81       	ldd	r20, Y+4	; 0x04
    1f56:	5d 81       	ldd	r21, Y+5	; 0x05
    1f58:	41 30       	cpi	r20, 0x01	; 1
    1f5a:	51 05       	cpc	r21, r1
    1f5c:	41 f1       	breq	.+80     	; 0x1fae <MDIO_u8GetPinValue+0x86>
    1f5e:	8c 81       	ldd	r24, Y+4	; 0x04
    1f60:	9d 81       	ldd	r25, Y+5	; 0x05
    1f62:	82 30       	cpi	r24, 0x02	; 2
    1f64:	91 05       	cpc	r25, r1
    1f66:	34 f4       	brge	.+12     	; 0x1f74 <MDIO_u8GetPinValue+0x4c>
    1f68:	2c 81       	ldd	r18, Y+4	; 0x04
    1f6a:	3d 81       	ldd	r19, Y+5	; 0x05
    1f6c:	21 15       	cp	r18, r1
    1f6e:	31 05       	cpc	r19, r1
    1f70:	61 f0       	breq	.+24     	; 0x1f8a <MDIO_u8GetPinValue+0x62>
    1f72:	52 c0       	rjmp	.+164    	; 0x2018 <MDIO_u8GetPinValue+0xf0>
    1f74:	4c 81       	ldd	r20, Y+4	; 0x04
    1f76:	5d 81       	ldd	r21, Y+5	; 0x05
    1f78:	42 30       	cpi	r20, 0x02	; 2
    1f7a:	51 05       	cpc	r21, r1
    1f7c:	51 f1       	breq	.+84     	; 0x1fd2 <MDIO_u8GetPinValue+0xaa>
    1f7e:	8c 81       	ldd	r24, Y+4	; 0x04
    1f80:	9d 81       	ldd	r25, Y+5	; 0x05
    1f82:	83 30       	cpi	r24, 0x03	; 3
    1f84:	91 05       	cpc	r25, r1
    1f86:	b9 f1       	breq	.+110    	; 0x1ff6 <MDIO_u8GetPinValue+0xce>
    1f88:	47 c0       	rjmp	.+142    	; 0x2018 <MDIO_u8GetPinValue+0xf0>
		{
		/*case PORTA Get Bit Number PinId from PINA register and assign it to Local_u8Pinvalue variable*/
		case DIO_PORTA:	Local_u8Pinvalue = GET_BIT(PINA_REG,copy_u8PinId);break;
    1f8a:	e9 e3       	ldi	r30, 0x39	; 57
    1f8c:	f0 e0       	ldi	r31, 0x00	; 0
    1f8e:	80 81       	ld	r24, Z
    1f90:	28 2f       	mov	r18, r24
    1f92:	30 e0       	ldi	r19, 0x00	; 0
    1f94:	8a 81       	ldd	r24, Y+2	; 0x02
    1f96:	88 2f       	mov	r24, r24
    1f98:	90 e0       	ldi	r25, 0x00	; 0
    1f9a:	a9 01       	movw	r20, r18
    1f9c:	02 c0       	rjmp	.+4      	; 0x1fa2 <MDIO_u8GetPinValue+0x7a>
    1f9e:	55 95       	asr	r21
    1fa0:	47 95       	ror	r20
    1fa2:	8a 95       	dec	r24
    1fa4:	e2 f7       	brpl	.-8      	; 0x1f9e <MDIO_u8GetPinValue+0x76>
    1fa6:	ca 01       	movw	r24, r20
    1fa8:	81 70       	andi	r24, 0x01	; 1
    1faa:	89 83       	std	Y+1, r24	; 0x01
    1fac:	35 c0       	rjmp	.+106    	; 0x2018 <MDIO_u8GetPinValue+0xf0>
		/*case PORTB Get Bit Number PinId from PINB register and assign it to Local_u8Pinvalue variable*/
		case DIO_PORTB:	Local_u8Pinvalue = GET_BIT(PINB_REG,copy_u8PinId);break;
    1fae:	e6 e3       	ldi	r30, 0x36	; 54
    1fb0:	f0 e0       	ldi	r31, 0x00	; 0
    1fb2:	80 81       	ld	r24, Z
    1fb4:	28 2f       	mov	r18, r24
    1fb6:	30 e0       	ldi	r19, 0x00	; 0
    1fb8:	8a 81       	ldd	r24, Y+2	; 0x02
    1fba:	88 2f       	mov	r24, r24
    1fbc:	90 e0       	ldi	r25, 0x00	; 0
    1fbe:	a9 01       	movw	r20, r18
    1fc0:	02 c0       	rjmp	.+4      	; 0x1fc6 <MDIO_u8GetPinValue+0x9e>
    1fc2:	55 95       	asr	r21
    1fc4:	47 95       	ror	r20
    1fc6:	8a 95       	dec	r24
    1fc8:	e2 f7       	brpl	.-8      	; 0x1fc2 <MDIO_u8GetPinValue+0x9a>
    1fca:	ca 01       	movw	r24, r20
    1fcc:	81 70       	andi	r24, 0x01	; 1
    1fce:	89 83       	std	Y+1, r24	; 0x01
    1fd0:	23 c0       	rjmp	.+70     	; 0x2018 <MDIO_u8GetPinValue+0xf0>
		/*case PORTC Get Bit Number PinId from PINC register and assign it to Local_u8Pinvalue variable*/
		case DIO_PORTC: Local_u8Pinvalue = GET_BIT(PINC_REG,copy_u8PinId);break;
    1fd2:	e3 e3       	ldi	r30, 0x33	; 51
    1fd4:	f0 e0       	ldi	r31, 0x00	; 0
    1fd6:	80 81       	ld	r24, Z
    1fd8:	28 2f       	mov	r18, r24
    1fda:	30 e0       	ldi	r19, 0x00	; 0
    1fdc:	8a 81       	ldd	r24, Y+2	; 0x02
    1fde:	88 2f       	mov	r24, r24
    1fe0:	90 e0       	ldi	r25, 0x00	; 0
    1fe2:	a9 01       	movw	r20, r18
    1fe4:	02 c0       	rjmp	.+4      	; 0x1fea <MDIO_u8GetPinValue+0xc2>
    1fe6:	55 95       	asr	r21
    1fe8:	47 95       	ror	r20
    1fea:	8a 95       	dec	r24
    1fec:	e2 f7       	brpl	.-8      	; 0x1fe6 <MDIO_u8GetPinValue+0xbe>
    1fee:	ca 01       	movw	r24, r20
    1ff0:	81 70       	andi	r24, 0x01	; 1
    1ff2:	89 83       	std	Y+1, r24	; 0x01
    1ff4:	11 c0       	rjmp	.+34     	; 0x2018 <MDIO_u8GetPinValue+0xf0>
		/*case PORTD Get Bit Number PinId from PIND register and assign it to Local_u8Pinvalue variable*/
		case DIO_PORTD: Local_u8Pinvalue = GET_BIT(PIND_REG,copy_u8PinId);break;
    1ff6:	e0 e3       	ldi	r30, 0x30	; 48
    1ff8:	f0 e0       	ldi	r31, 0x00	; 0
    1ffa:	80 81       	ld	r24, Z
    1ffc:	28 2f       	mov	r18, r24
    1ffe:	30 e0       	ldi	r19, 0x00	; 0
    2000:	8a 81       	ldd	r24, Y+2	; 0x02
    2002:	88 2f       	mov	r24, r24
    2004:	90 e0       	ldi	r25, 0x00	; 0
    2006:	a9 01       	movw	r20, r18
    2008:	02 c0       	rjmp	.+4      	; 0x200e <MDIO_u8GetPinValue+0xe6>
    200a:	55 95       	asr	r21
    200c:	47 95       	ror	r20
    200e:	8a 95       	dec	r24
    2010:	e2 f7       	brpl	.-8      	; 0x200a <MDIO_u8GetPinValue+0xe2>
    2012:	ca 01       	movw	r24, r20
    2014:	81 70       	andi	r24, 0x01	; 1
    2016:	89 83       	std	Y+1, r24	; 0x01
	else
	{
		//report error massage
	}
	/*return the pin value*/
	return Local_u8Pinvalue;
    2018:	89 81       	ldd	r24, Y+1	; 0x01
}
    201a:	0f 90       	pop	r0
    201c:	0f 90       	pop	r0
    201e:	0f 90       	pop	r0
    2020:	0f 90       	pop	r0
    2022:	0f 90       	pop	r0
    2024:	cf 91       	pop	r28
    2026:	df 91       	pop	r29
    2028:	08 95       	ret

0000202a <MDIO_voidSetPortMode>:

void MDIO_voidSetPortMode(u8 copy_u8PortId , u8 copy_u8PortMode)
{
    202a:	df 93       	push	r29
    202c:	cf 93       	push	r28
    202e:	00 d0       	rcall	.+0      	; 0x2030 <MDIO_voidSetPortMode+0x6>
    2030:	00 d0       	rcall	.+0      	; 0x2032 <MDIO_voidSetPortMode+0x8>
    2032:	cd b7       	in	r28, 0x3d	; 61
    2034:	de b7       	in	r29, 0x3e	; 62
    2036:	89 83       	std	Y+1, r24	; 0x01
    2038:	6a 83       	std	Y+2, r22	; 0x02
		/*Switch on PortId*/
		switch(copy_u8PortId)
    203a:	89 81       	ldd	r24, Y+1	; 0x01
    203c:	28 2f       	mov	r18, r24
    203e:	30 e0       	ldi	r19, 0x00	; 0
    2040:	3c 83       	std	Y+4, r19	; 0x04
    2042:	2b 83       	std	Y+3, r18	; 0x03
    2044:	8b 81       	ldd	r24, Y+3	; 0x03
    2046:	9c 81       	ldd	r25, Y+4	; 0x04
    2048:	81 30       	cpi	r24, 0x01	; 1
    204a:	91 05       	cpc	r25, r1
    204c:	d1 f0       	breq	.+52     	; 0x2082 <MDIO_voidSetPortMode+0x58>
    204e:	2b 81       	ldd	r18, Y+3	; 0x03
    2050:	3c 81       	ldd	r19, Y+4	; 0x04
    2052:	22 30       	cpi	r18, 0x02	; 2
    2054:	31 05       	cpc	r19, r1
    2056:	2c f4       	brge	.+10     	; 0x2062 <MDIO_voidSetPortMode+0x38>
    2058:	8b 81       	ldd	r24, Y+3	; 0x03
    205a:	9c 81       	ldd	r25, Y+4	; 0x04
    205c:	00 97       	sbiw	r24, 0x00	; 0
    205e:	61 f0       	breq	.+24     	; 0x2078 <MDIO_voidSetPortMode+0x4e>
    2060:	1e c0       	rjmp	.+60     	; 0x209e <MDIO_voidSetPortMode+0x74>
    2062:	2b 81       	ldd	r18, Y+3	; 0x03
    2064:	3c 81       	ldd	r19, Y+4	; 0x04
    2066:	22 30       	cpi	r18, 0x02	; 2
    2068:	31 05       	cpc	r19, r1
    206a:	81 f0       	breq	.+32     	; 0x208c <MDIO_voidSetPortMode+0x62>
    206c:	8b 81       	ldd	r24, Y+3	; 0x03
    206e:	9c 81       	ldd	r25, Y+4	; 0x04
    2070:	83 30       	cpi	r24, 0x03	; 3
    2072:	91 05       	cpc	r25, r1
    2074:	81 f0       	breq	.+32     	; 0x2096 <MDIO_voidSetPortMode+0x6c>
    2076:	13 c0       	rjmp	.+38     	; 0x209e <MDIO_voidSetPortMode+0x74>
		{
			/*case PORTA Clear DDRA register*/
			case DIO_PORTA:	ASSIGN_REG(DDRA_REG,copy_u8PortMode);break;
    2078:	ea e3       	ldi	r30, 0x3A	; 58
    207a:	f0 e0       	ldi	r31, 0x00	; 0
    207c:	8a 81       	ldd	r24, Y+2	; 0x02
    207e:	80 83       	st	Z, r24
    2080:	0e c0       	rjmp	.+28     	; 0x209e <MDIO_voidSetPortMode+0x74>
			/*case PORTA Clear DDRA register*/
			case DIO_PORTB:	ASSIGN_REG(DDRB_REG,copy_u8PortMode);break;
    2082:	e7 e3       	ldi	r30, 0x37	; 55
    2084:	f0 e0       	ldi	r31, 0x00	; 0
    2086:	8a 81       	ldd	r24, Y+2	; 0x02
    2088:	80 83       	st	Z, r24
    208a:	09 c0       	rjmp	.+18     	; 0x209e <MDIO_voidSetPortMode+0x74>
			/*case PORTA Clear DDRA register*/
			case DIO_PORTC:	ASSIGN_REG(DDRC_REG,copy_u8PortMode);break;
    208c:	e4 e3       	ldi	r30, 0x34	; 52
    208e:	f0 e0       	ldi	r31, 0x00	; 0
    2090:	8a 81       	ldd	r24, Y+2	; 0x02
    2092:	80 83       	st	Z, r24
    2094:	04 c0       	rjmp	.+8      	; 0x209e <MDIO_voidSetPortMode+0x74>
			/*case PORTA Clear DDRA register*/
			case DIO_PORTD: ASSIGN_REG(DDRD_REG,copy_u8PortMode);break;
    2096:	e1 e3       	ldi	r30, 0x31	; 49
    2098:	f0 e0       	ldi	r31, 0x00	; 0
    209a:	8a 81       	ldd	r24, Y+2	; 0x02
    209c:	80 83       	st	Z, r24
		}

}
    209e:	0f 90       	pop	r0
    20a0:	0f 90       	pop	r0
    20a2:	0f 90       	pop	r0
    20a4:	0f 90       	pop	r0
    20a6:	cf 91       	pop	r28
    20a8:	df 91       	pop	r29
    20aa:	08 95       	ret

000020ac <MDIO_voidSetPortValue>:

void MDIO_voidSetPortValue(u8 copy_u8PortId , u8 copy_u8PortValue)
{
    20ac:	df 93       	push	r29
    20ae:	cf 93       	push	r28
    20b0:	00 d0       	rcall	.+0      	; 0x20b2 <MDIO_voidSetPortValue+0x6>
    20b2:	00 d0       	rcall	.+0      	; 0x20b4 <MDIO_voidSetPortValue+0x8>
    20b4:	cd b7       	in	r28, 0x3d	; 61
    20b6:	de b7       	in	r29, 0x3e	; 62
    20b8:	89 83       	std	Y+1, r24	; 0x01
    20ba:	6a 83       	std	Y+2, r22	; 0x02
		/*switch on PortId*/
		switch(copy_u8PortId)
    20bc:	89 81       	ldd	r24, Y+1	; 0x01
    20be:	28 2f       	mov	r18, r24
    20c0:	30 e0       	ldi	r19, 0x00	; 0
    20c2:	3c 83       	std	Y+4, r19	; 0x04
    20c4:	2b 83       	std	Y+3, r18	; 0x03
    20c6:	8b 81       	ldd	r24, Y+3	; 0x03
    20c8:	9c 81       	ldd	r25, Y+4	; 0x04
    20ca:	81 30       	cpi	r24, 0x01	; 1
    20cc:	91 05       	cpc	r25, r1
    20ce:	d1 f0       	breq	.+52     	; 0x2104 <MDIO_voidSetPortValue+0x58>
    20d0:	2b 81       	ldd	r18, Y+3	; 0x03
    20d2:	3c 81       	ldd	r19, Y+4	; 0x04
    20d4:	22 30       	cpi	r18, 0x02	; 2
    20d6:	31 05       	cpc	r19, r1
    20d8:	2c f4       	brge	.+10     	; 0x20e4 <MDIO_voidSetPortValue+0x38>
    20da:	8b 81       	ldd	r24, Y+3	; 0x03
    20dc:	9c 81       	ldd	r25, Y+4	; 0x04
    20de:	00 97       	sbiw	r24, 0x00	; 0
    20e0:	61 f0       	breq	.+24     	; 0x20fa <MDIO_voidSetPortValue+0x4e>
    20e2:	1e c0       	rjmp	.+60     	; 0x2120 <MDIO_voidSetPortValue+0x74>
    20e4:	2b 81       	ldd	r18, Y+3	; 0x03
    20e6:	3c 81       	ldd	r19, Y+4	; 0x04
    20e8:	22 30       	cpi	r18, 0x02	; 2
    20ea:	31 05       	cpc	r19, r1
    20ec:	81 f0       	breq	.+32     	; 0x210e <MDIO_voidSetPortValue+0x62>
    20ee:	8b 81       	ldd	r24, Y+3	; 0x03
    20f0:	9c 81       	ldd	r25, Y+4	; 0x04
    20f2:	83 30       	cpi	r24, 0x03	; 3
    20f4:	91 05       	cpc	r25, r1
    20f6:	81 f0       	breq	.+32     	; 0x2118 <MDIO_voidSetPortValue+0x6c>
    20f8:	13 c0       	rjmp	.+38     	; 0x2120 <MDIO_voidSetPortValue+0x74>
		{
		    /*case PORTA Assign The Value to PORTA register*/
			case DIO_PORTA:	ASSIGN_REG(PORTA_REG,copy_u8PortValue);break;
    20fa:	eb e3       	ldi	r30, 0x3B	; 59
    20fc:	f0 e0       	ldi	r31, 0x00	; 0
    20fe:	8a 81       	ldd	r24, Y+2	; 0x02
    2100:	80 83       	st	Z, r24
    2102:	0e c0       	rjmp	.+28     	; 0x2120 <MDIO_voidSetPortValue+0x74>
			/*case PORTB Assign The Value to PORTB register*/
			case DIO_PORTB:	ASSIGN_REG(PORTB_REG,copy_u8PortValue);break;
    2104:	e8 e3       	ldi	r30, 0x38	; 56
    2106:	f0 e0       	ldi	r31, 0x00	; 0
    2108:	8a 81       	ldd	r24, Y+2	; 0x02
    210a:	80 83       	st	Z, r24
    210c:	09 c0       	rjmp	.+18     	; 0x2120 <MDIO_voidSetPortValue+0x74>
			/*case PORTC Assign The Value to PORTC register*/
			case DIO_PORTC:	ASSIGN_REG(PORTC_REG,copy_u8PortValue);break;
    210e:	e5 e3       	ldi	r30, 0x35	; 53
    2110:	f0 e0       	ldi	r31, 0x00	; 0
    2112:	8a 81       	ldd	r24, Y+2	; 0x02
    2114:	80 83       	st	Z, r24
    2116:	04 c0       	rjmp	.+8      	; 0x2120 <MDIO_voidSetPortValue+0x74>
			/*case PORTD Assign The Value to PORTD register*/
			case DIO_PORTD: ASSIGN_REG(PORTD_REG,copy_u8PortValue);break;
    2118:	e2 e3       	ldi	r30, 0x32	; 50
    211a:	f0 e0       	ldi	r31, 0x00	; 0
    211c:	8a 81       	ldd	r24, Y+2	; 0x02
    211e:	80 83       	st	Z, r24
			default:break;
		}
}
    2120:	0f 90       	pop	r0
    2122:	0f 90       	pop	r0
    2124:	0f 90       	pop	r0
    2126:	0f 90       	pop	r0
    2128:	cf 91       	pop	r28
    212a:	df 91       	pop	r29
    212c:	08 95       	ret

0000212e <MDIO_voidTogPortValue>:

void MDIO_voidTogPortValue(u8 copy_u8PortId)
{
    212e:	df 93       	push	r29
    2130:	cf 93       	push	r28
    2132:	00 d0       	rcall	.+0      	; 0x2134 <MDIO_voidTogPortValue+0x6>
    2134:	0f 92       	push	r0
    2136:	cd b7       	in	r28, 0x3d	; 61
    2138:	de b7       	in	r29, 0x3e	; 62
    213a:	89 83       	std	Y+1, r24	; 0x01
	/*check that PortId is in Range*/
	if(copy_u8PortId <= DIO_PORTD)
    213c:	89 81       	ldd	r24, Y+1	; 0x01
    213e:	84 30       	cpi	r24, 0x04	; 4
    2140:	08 f0       	brcs	.+2      	; 0x2144 <MDIO_voidTogPortValue+0x16>
    2142:	3e c0       	rjmp	.+124    	; 0x21c0 <MDIO_voidTogPortValue+0x92>
	{
		/*switch on PortId*/
		switch(copy_u8PortId)
    2144:	89 81       	ldd	r24, Y+1	; 0x01
    2146:	28 2f       	mov	r18, r24
    2148:	30 e0       	ldi	r19, 0x00	; 0
    214a:	3b 83       	std	Y+3, r19	; 0x03
    214c:	2a 83       	std	Y+2, r18	; 0x02
    214e:	8a 81       	ldd	r24, Y+2	; 0x02
    2150:	9b 81       	ldd	r25, Y+3	; 0x03
    2152:	81 30       	cpi	r24, 0x01	; 1
    2154:	91 05       	cpc	r25, r1
    2156:	e9 f0       	breq	.+58     	; 0x2192 <MDIO_voidTogPortValue+0x64>
    2158:	2a 81       	ldd	r18, Y+2	; 0x02
    215a:	3b 81       	ldd	r19, Y+3	; 0x03
    215c:	22 30       	cpi	r18, 0x02	; 2
    215e:	31 05       	cpc	r19, r1
    2160:	2c f4       	brge	.+10     	; 0x216c <MDIO_voidTogPortValue+0x3e>
    2162:	8a 81       	ldd	r24, Y+2	; 0x02
    2164:	9b 81       	ldd	r25, Y+3	; 0x03
    2166:	00 97       	sbiw	r24, 0x00	; 0
    2168:	61 f0       	breq	.+24     	; 0x2182 <MDIO_voidTogPortValue+0x54>
    216a:	2a c0       	rjmp	.+84     	; 0x21c0 <MDIO_voidTogPortValue+0x92>
    216c:	2a 81       	ldd	r18, Y+2	; 0x02
    216e:	3b 81       	ldd	r19, Y+3	; 0x03
    2170:	22 30       	cpi	r18, 0x02	; 2
    2172:	31 05       	cpc	r19, r1
    2174:	b1 f0       	breq	.+44     	; 0x21a2 <MDIO_voidTogPortValue+0x74>
    2176:	8a 81       	ldd	r24, Y+2	; 0x02
    2178:	9b 81       	ldd	r25, Y+3	; 0x03
    217a:	83 30       	cpi	r24, 0x03	; 3
    217c:	91 05       	cpc	r25, r1
    217e:	c9 f0       	breq	.+50     	; 0x21b2 <MDIO_voidTogPortValue+0x84>
    2180:	1f c0       	rjmp	.+62     	; 0x21c0 <MDIO_voidTogPortValue+0x92>
		{
		    /*case PORTA Toggle The Value In PORTA register*/
			case DIO_PORTA:	TOG_REG(PORTA_REG);break;
    2182:	ab e3       	ldi	r26, 0x3B	; 59
    2184:	b0 e0       	ldi	r27, 0x00	; 0
    2186:	eb e3       	ldi	r30, 0x3B	; 59
    2188:	f0 e0       	ldi	r31, 0x00	; 0
    218a:	80 81       	ld	r24, Z
    218c:	80 95       	com	r24
    218e:	8c 93       	st	X, r24
    2190:	17 c0       	rjmp	.+46     	; 0x21c0 <MDIO_voidTogPortValue+0x92>
			/*case PORTB Toggle The Value in PORTB register*/
			case DIO_PORTB:	TOG_REG(PORTB_REG);break;
    2192:	a8 e3       	ldi	r26, 0x38	; 56
    2194:	b0 e0       	ldi	r27, 0x00	; 0
    2196:	e8 e3       	ldi	r30, 0x38	; 56
    2198:	f0 e0       	ldi	r31, 0x00	; 0
    219a:	80 81       	ld	r24, Z
    219c:	80 95       	com	r24
    219e:	8c 93       	st	X, r24
    21a0:	0f c0       	rjmp	.+30     	; 0x21c0 <MDIO_voidTogPortValue+0x92>
			/*case PORTC Toggle The Value in PORTC register*/
			case DIO_PORTC:	TOG_REG(PORTC_REG);break;
    21a2:	a5 e3       	ldi	r26, 0x35	; 53
    21a4:	b0 e0       	ldi	r27, 0x00	; 0
    21a6:	e5 e3       	ldi	r30, 0x35	; 53
    21a8:	f0 e0       	ldi	r31, 0x00	; 0
    21aa:	80 81       	ld	r24, Z
    21ac:	80 95       	com	r24
    21ae:	8c 93       	st	X, r24
    21b0:	07 c0       	rjmp	.+14     	; 0x21c0 <MDIO_voidTogPortValue+0x92>
			/*case PORTD Toggle The Value in PORTD register*/
			case DIO_PORTD: TOG_REG(PORTD_REG);break;
    21b2:	a2 e3       	ldi	r26, 0x32	; 50
    21b4:	b0 e0       	ldi	r27, 0x00	; 0
    21b6:	e2 e3       	ldi	r30, 0x32	; 50
    21b8:	f0 e0       	ldi	r31, 0x00	; 0
    21ba:	80 81       	ld	r24, Z
    21bc:	80 95       	com	r24
    21be:	8c 93       	st	X, r24
	}
	else
	{
		//report error massage
	}
}
    21c0:	0f 90       	pop	r0
    21c2:	0f 90       	pop	r0
    21c4:	0f 90       	pop	r0
    21c6:	cf 91       	pop	r28
    21c8:	df 91       	pop	r29
    21ca:	08 95       	ret

000021cc <MDIO_u8GetPortValue>:

u8 MDIO_u8GetPortValue(u8 copy_u8PortId)
{
    21cc:	df 93       	push	r29
    21ce:	cf 93       	push	r28
    21d0:	00 d0       	rcall	.+0      	; 0x21d2 <MDIO_u8GetPortValue+0x6>
    21d2:	00 d0       	rcall	.+0      	; 0x21d4 <MDIO_u8GetPortValue+0x8>
    21d4:	cd b7       	in	r28, 0x3d	; 61
    21d6:	de b7       	in	r29, 0x3e	; 62
    21d8:	8a 83       	std	Y+2, r24	; 0x02
	/*local variable to hold the value of PINx register*/
	u8 Local_u8PortValue;
	/*check that PortId is in Range*/
	if(copy_u8PortId <= DIO_PORTD)
    21da:	8a 81       	ldd	r24, Y+2	; 0x02
    21dc:	84 30       	cpi	r24, 0x04	; 4
    21de:	90 f5       	brcc	.+100    	; 0x2244 <MDIO_u8GetPortValue+0x78>
	{
		/*switch on PortId*/
		switch(copy_u8PortId)
    21e0:	8a 81       	ldd	r24, Y+2	; 0x02
    21e2:	28 2f       	mov	r18, r24
    21e4:	30 e0       	ldi	r19, 0x00	; 0
    21e6:	3c 83       	std	Y+4, r19	; 0x04
    21e8:	2b 83       	std	Y+3, r18	; 0x03
    21ea:	8b 81       	ldd	r24, Y+3	; 0x03
    21ec:	9c 81       	ldd	r25, Y+4	; 0x04
    21ee:	81 30       	cpi	r24, 0x01	; 1
    21f0:	91 05       	cpc	r25, r1
    21f2:	d1 f0       	breq	.+52     	; 0x2228 <MDIO_u8GetPortValue+0x5c>
    21f4:	2b 81       	ldd	r18, Y+3	; 0x03
    21f6:	3c 81       	ldd	r19, Y+4	; 0x04
    21f8:	22 30       	cpi	r18, 0x02	; 2
    21fa:	31 05       	cpc	r19, r1
    21fc:	2c f4       	brge	.+10     	; 0x2208 <MDIO_u8GetPortValue+0x3c>
    21fe:	8b 81       	ldd	r24, Y+3	; 0x03
    2200:	9c 81       	ldd	r25, Y+4	; 0x04
    2202:	00 97       	sbiw	r24, 0x00	; 0
    2204:	61 f0       	breq	.+24     	; 0x221e <MDIO_u8GetPortValue+0x52>
    2206:	1e c0       	rjmp	.+60     	; 0x2244 <MDIO_u8GetPortValue+0x78>
    2208:	2b 81       	ldd	r18, Y+3	; 0x03
    220a:	3c 81       	ldd	r19, Y+4	; 0x04
    220c:	22 30       	cpi	r18, 0x02	; 2
    220e:	31 05       	cpc	r19, r1
    2210:	81 f0       	breq	.+32     	; 0x2232 <MDIO_u8GetPortValue+0x66>
    2212:	8b 81       	ldd	r24, Y+3	; 0x03
    2214:	9c 81       	ldd	r25, Y+4	; 0x04
    2216:	83 30       	cpi	r24, 0x03	; 3
    2218:	91 05       	cpc	r25, r1
    221a:	81 f0       	breq	.+32     	; 0x223c <MDIO_u8GetPortValue+0x70>
    221c:	13 c0       	rjmp	.+38     	; 0x2244 <MDIO_u8GetPortValue+0x78>
		{
		/*case PORTA Get The Value In PINA register and assign it to Local_u8Portvalue variable*/
		case DIO_PORTA:	Local_u8PortValue = GET_REG(PINA_REG);break;
    221e:	e9 e3       	ldi	r30, 0x39	; 57
    2220:	f0 e0       	ldi	r31, 0x00	; 0
    2222:	80 81       	ld	r24, Z
    2224:	89 83       	std	Y+1, r24	; 0x01
    2226:	0e c0       	rjmp	.+28     	; 0x2244 <MDIO_u8GetPortValue+0x78>
		/*case PORTB Get The Value In PINB register and assign it to Local_u8Portvalue variable*/
		case DIO_PORTB:	Local_u8PortValue = GET_REG(PINB_REG);break;
    2228:	e6 e3       	ldi	r30, 0x36	; 54
    222a:	f0 e0       	ldi	r31, 0x00	; 0
    222c:	80 81       	ld	r24, Z
    222e:	89 83       	std	Y+1, r24	; 0x01
    2230:	09 c0       	rjmp	.+18     	; 0x2244 <MDIO_u8GetPortValue+0x78>
		/*case PORTC Get The Value In PINC register and assign it to Local_u8Portvalue variable*/
		case DIO_PORTC: Local_u8PortValue = GET_REG(PINC_REG);break;
    2232:	e3 e3       	ldi	r30, 0x33	; 51
    2234:	f0 e0       	ldi	r31, 0x00	; 0
    2236:	80 81       	ld	r24, Z
    2238:	89 83       	std	Y+1, r24	; 0x01
    223a:	04 c0       	rjmp	.+8      	; 0x2244 <MDIO_u8GetPortValue+0x78>
		/*case PORTD Get The Value In PIND register and assign it to Local_u8Portvalue variable*/
		case DIO_PORTD: Local_u8PortValue = GET_REG(PIND_REG);break;
    223c:	e0 e3       	ldi	r30, 0x30	; 48
    223e:	f0 e0       	ldi	r31, 0x00	; 0
    2240:	80 81       	ld	r24, Z
    2242:	89 83       	std	Y+1, r24	; 0x01
	else
	{
		//report error massage
	}
	/*return the value of PINx register*/
	return Local_u8PortValue;
    2244:	89 81       	ldd	r24, Y+1	; 0x01
}
    2246:	0f 90       	pop	r0
    2248:	0f 90       	pop	r0
    224a:	0f 90       	pop	r0
    224c:	0f 90       	pop	r0
    224e:	cf 91       	pop	r28
    2250:	df 91       	pop	r29
    2252:	08 95       	ret

00002254 <ADC_voidInit>:
#include "ADC_private.h"



void ADC_voidInit(void)
{
    2254:	df 93       	push	r29
    2256:	cf 93       	push	r28
    2258:	cd b7       	in	r28, 0x3d	; 61
    225a:	de b7       	in	r29, 0x3e	; 62
	/*Select ADC Reference Voltage*/
	#if    ADC_VREF == ADC_VCC
		SET_BIT(ADMUX_REG,REFS0);
    225c:	a7 e2       	ldi	r26, 0x27	; 39
    225e:	b0 e0       	ldi	r27, 0x00	; 0
    2260:	e7 e2       	ldi	r30, 0x27	; 39
    2262:	f0 e0       	ldi	r31, 0x00	; 0
    2264:	80 81       	ld	r24, Z
    2266:	80 64       	ori	r24, 0x40	; 64
    2268:	8c 93       	st	X, r24
		CLR_BIT(ADMUX_REG,REFS1);
    226a:	a7 e2       	ldi	r26, 0x27	; 39
    226c:	b0 e0       	ldi	r27, 0x00	; 0
    226e:	e7 e2       	ldi	r30, 0x27	; 39
    2270:	f0 e0       	ldi	r31, 0x00	; 0
    2272:	80 81       	ld	r24, Z
    2274:	8f 77       	andi	r24, 0x7F	; 127
    2276:	8c 93       	st	X, r24
	
	/*Select ADC ADJUST Result*/
	#if   ADC_ADJUST == ADC_LEFT
		SET_BIT(ADMUX_REG,ADLAR);
	#elif ADC_ADJUST == ADC_RIGHT
		CLR_BIT(ADMUX_REG,ADLAR);
    2278:	a7 e2       	ldi	r26, 0x27	; 39
    227a:	b0 e0       	ldi	r27, 0x00	; 0
    227c:	e7 e2       	ldi	r30, 0x27	; 39
    227e:	f0 e0       	ldi	r31, 0x00	; 0
    2280:	80 81       	ld	r24, Z
    2282:	8f 7d       	andi	r24, 0xDF	; 223
    2284:	8c 93       	st	X, r24
	#endif
	
	/*Select ADC Prescaler*/
	#if   ADC_PRESCALER == DivisionFactorBy128
		SET_BIT(ADCSRA_REG,ADPS2);
    2286:	a6 e2       	ldi	r26, 0x26	; 38
    2288:	b0 e0       	ldi	r27, 0x00	; 0
    228a:	e6 e2       	ldi	r30, 0x26	; 38
    228c:	f0 e0       	ldi	r31, 0x00	; 0
    228e:	80 81       	ld	r24, Z
    2290:	84 60       	ori	r24, 0x04	; 4
    2292:	8c 93       	st	X, r24
		SET_BIT(ADCSRA_REG,ADPS1);
    2294:	a6 e2       	ldi	r26, 0x26	; 38
    2296:	b0 e0       	ldi	r27, 0x00	; 0
    2298:	e6 e2       	ldi	r30, 0x26	; 38
    229a:	f0 e0       	ldi	r31, 0x00	; 0
    229c:	80 81       	ld	r24, Z
    229e:	82 60       	ori	r24, 0x02	; 2
    22a0:	8c 93       	st	X, r24
		SET_BIT(ADCSRA_REG,ADPS0);
    22a2:	a6 e2       	ldi	r26, 0x26	; 38
    22a4:	b0 e0       	ldi	r27, 0x00	; 0
    22a6:	e6 e2       	ldi	r30, 0x26	; 38
    22a8:	f0 e0       	ldi	r31, 0x00	; 0
    22aa:	80 81       	ld	r24, Z
    22ac:	81 60       	ori	r24, 0x01	; 1
    22ae:	8c 93       	st	X, r24
		CLR_BIT(ADCSRA_REG,ADPS2);
		CLR_BIT(ADCSRA_REG,ADPS1);
		CLR_BIT(ADCSRA_REG,ADPS0);
	#endif
	/*disable auto trigger*/
	CLR_BIT(ADCSRA_REG,ADATE);
    22b0:	a6 e2       	ldi	r26, 0x26	; 38
    22b2:	b0 e0       	ldi	r27, 0x00	; 0
    22b4:	e6 e2       	ldi	r30, 0x26	; 38
    22b6:	f0 e0       	ldi	r31, 0x00	; 0
    22b8:	80 81       	ld	r24, Z
    22ba:	8f 7d       	andi	r24, 0xDF	; 223
    22bc:	8c 93       	st	X, r24
	/*Enable ADC*/
	ADC_voidEnabled();
    22be:	0e 94 84 12 	call	0x2508	; 0x2508 <ADC_voidEnabled>
}
    22c2:	cf 91       	pop	r28
    22c4:	df 91       	pop	r29
    22c6:	08 95       	ret

000022c8 <ADC_u16Read>:

u16 ADC_u16Read(u8 copy_u8PinId)
{
    22c8:	df 93       	push	r29
    22ca:	cf 93       	push	r28
    22cc:	00 d0       	rcall	.+0      	; 0x22ce <ADC_u16Read+0x6>
    22ce:	0f 92       	push	r0
    22d0:	cd b7       	in	r28, 0x3d	; 61
    22d2:	de b7       	in	r29, 0x3e	; 62
    22d4:	89 83       	std	Y+1, r24	; 0x01
	ADCDATA_REG = 0x00;
    22d6:	e4 e2       	ldi	r30, 0x24	; 36
    22d8:	f0 e0       	ldi	r31, 0x00	; 0
    22da:	11 82       	std	Z+1, r1	; 0x01
    22dc:	10 82       	st	Z, r1
	ADMUX_REG &= 0b1110000;
    22de:	a7 e2       	ldi	r26, 0x27	; 39
    22e0:	b0 e0       	ldi	r27, 0x00	; 0
    22e2:	e7 e2       	ldi	r30, 0x27	; 39
    22e4:	f0 e0       	ldi	r31, 0x00	; 0
    22e6:	80 81       	ld	r24, Z
    22e8:	80 77       	andi	r24, 0x70	; 112
    22ea:	8c 93       	st	X, r24
	copy_u8PinId = copy_u8PinId & 0b00001111;
    22ec:	89 81       	ldd	r24, Y+1	; 0x01
    22ee:	8f 70       	andi	r24, 0x0F	; 15
    22f0:	89 83       	std	Y+1, r24	; 0x01
	/*Select ADC Channel*/
	switch(copy_u8PinId)
    22f2:	89 81       	ldd	r24, Y+1	; 0x01
    22f4:	28 2f       	mov	r18, r24
    22f6:	30 e0       	ldi	r19, 0x00	; 0
    22f8:	3b 83       	std	Y+3, r19	; 0x03
    22fa:	2a 83       	std	Y+2, r18	; 0x02
    22fc:	8a 81       	ldd	r24, Y+2	; 0x02
    22fe:	9b 81       	ldd	r25, Y+3	; 0x03
    2300:	83 30       	cpi	r24, 0x03	; 3
    2302:	91 05       	cpc	r25, r1
    2304:	09 f4       	brne	.+2      	; 0x2308 <ADC_u16Read+0x40>
    2306:	70 c0       	rjmp	.+224    	; 0x23e8 <ADC_u16Read+0x120>
    2308:	2a 81       	ldd	r18, Y+2	; 0x02
    230a:	3b 81       	ldd	r19, Y+3	; 0x03
    230c:	24 30       	cpi	r18, 0x04	; 4
    230e:	31 05       	cpc	r19, r1
    2310:	84 f4       	brge	.+32     	; 0x2332 <ADC_u16Read+0x6a>
    2312:	8a 81       	ldd	r24, Y+2	; 0x02
    2314:	9b 81       	ldd	r25, Y+3	; 0x03
    2316:	81 30       	cpi	r24, 0x01	; 1
    2318:	91 05       	cpc	r25, r1
    231a:	d1 f1       	breq	.+116    	; 0x2390 <ADC_u16Read+0xc8>
    231c:	2a 81       	ldd	r18, Y+2	; 0x02
    231e:	3b 81       	ldd	r19, Y+3	; 0x03
    2320:	22 30       	cpi	r18, 0x02	; 2
    2322:	31 05       	cpc	r19, r1
    2324:	0c f0       	brlt	.+2      	; 0x2328 <ADC_u16Read+0x60>
    2326:	4a c0       	rjmp	.+148    	; 0x23bc <ADC_u16Read+0xf4>
    2328:	8a 81       	ldd	r24, Y+2	; 0x02
    232a:	9b 81       	ldd	r25, Y+3	; 0x03
    232c:	00 97       	sbiw	r24, 0x00	; 0
    232e:	d1 f0       	breq	.+52     	; 0x2364 <ADC_u16Read+0x9c>
    2330:	c8 c0       	rjmp	.+400    	; 0x24c2 <ADC_u16Read+0x1fa>
    2332:	2a 81       	ldd	r18, Y+2	; 0x02
    2334:	3b 81       	ldd	r19, Y+3	; 0x03
    2336:	25 30       	cpi	r18, 0x05	; 5
    2338:	31 05       	cpc	r19, r1
    233a:	09 f4       	brne	.+2      	; 0x233e <ADC_u16Read+0x76>
    233c:	81 c0       	rjmp	.+258    	; 0x2440 <ADC_u16Read+0x178>
    233e:	8a 81       	ldd	r24, Y+2	; 0x02
    2340:	9b 81       	ldd	r25, Y+3	; 0x03
    2342:	85 30       	cpi	r24, 0x05	; 5
    2344:	91 05       	cpc	r25, r1
    2346:	0c f4       	brge	.+2      	; 0x234a <ADC_u16Read+0x82>
    2348:	65 c0       	rjmp	.+202    	; 0x2414 <ADC_u16Read+0x14c>
    234a:	2a 81       	ldd	r18, Y+2	; 0x02
    234c:	3b 81       	ldd	r19, Y+3	; 0x03
    234e:	26 30       	cpi	r18, 0x06	; 6
    2350:	31 05       	cpc	r19, r1
    2352:	09 f4       	brne	.+2      	; 0x2356 <ADC_u16Read+0x8e>
    2354:	8b c0       	rjmp	.+278    	; 0x246c <ADC_u16Read+0x1a4>
    2356:	8a 81       	ldd	r24, Y+2	; 0x02
    2358:	9b 81       	ldd	r25, Y+3	; 0x03
    235a:	87 30       	cpi	r24, 0x07	; 7
    235c:	91 05       	cpc	r25, r1
    235e:	09 f4       	brne	.+2      	; 0x2362 <ADC_u16Read+0x9a>
    2360:	9b c0       	rjmp	.+310    	; 0x2498 <ADC_u16Read+0x1d0>
    2362:	af c0       	rjmp	.+350    	; 0x24c2 <ADC_u16Read+0x1fa>
	{
		case ADC_CH0:CLR_BIT(ADMUX_REG,MUX0);CLR_BIT(ADMUX_REG,MUX1);CLR_BIT(ADMUX_REG,MUX2);break;//000
    2364:	a7 e2       	ldi	r26, 0x27	; 39
    2366:	b0 e0       	ldi	r27, 0x00	; 0
    2368:	e7 e2       	ldi	r30, 0x27	; 39
    236a:	f0 e0       	ldi	r31, 0x00	; 0
    236c:	80 81       	ld	r24, Z
    236e:	8e 7f       	andi	r24, 0xFE	; 254
    2370:	8c 93       	st	X, r24
    2372:	a7 e2       	ldi	r26, 0x27	; 39
    2374:	b0 e0       	ldi	r27, 0x00	; 0
    2376:	e7 e2       	ldi	r30, 0x27	; 39
    2378:	f0 e0       	ldi	r31, 0x00	; 0
    237a:	80 81       	ld	r24, Z
    237c:	8d 7f       	andi	r24, 0xFD	; 253
    237e:	8c 93       	st	X, r24
    2380:	a7 e2       	ldi	r26, 0x27	; 39
    2382:	b0 e0       	ldi	r27, 0x00	; 0
    2384:	e7 e2       	ldi	r30, 0x27	; 39
    2386:	f0 e0       	ldi	r31, 0x00	; 0
    2388:	80 81       	ld	r24, Z
    238a:	8b 7f       	andi	r24, 0xFB	; 251
    238c:	8c 93       	st	X, r24
    238e:	99 c0       	rjmp	.+306    	; 0x24c2 <ADC_u16Read+0x1fa>
		case ADC_CH1:SET_BIT(ADMUX_REG,MUX0);CLR_BIT(ADMUX_REG,MUX1);CLR_BIT(ADMUX_REG,MUX2);break;//001
    2390:	a7 e2       	ldi	r26, 0x27	; 39
    2392:	b0 e0       	ldi	r27, 0x00	; 0
    2394:	e7 e2       	ldi	r30, 0x27	; 39
    2396:	f0 e0       	ldi	r31, 0x00	; 0
    2398:	80 81       	ld	r24, Z
    239a:	81 60       	ori	r24, 0x01	; 1
    239c:	8c 93       	st	X, r24
    239e:	a7 e2       	ldi	r26, 0x27	; 39
    23a0:	b0 e0       	ldi	r27, 0x00	; 0
    23a2:	e7 e2       	ldi	r30, 0x27	; 39
    23a4:	f0 e0       	ldi	r31, 0x00	; 0
    23a6:	80 81       	ld	r24, Z
    23a8:	8d 7f       	andi	r24, 0xFD	; 253
    23aa:	8c 93       	st	X, r24
    23ac:	a7 e2       	ldi	r26, 0x27	; 39
    23ae:	b0 e0       	ldi	r27, 0x00	; 0
    23b0:	e7 e2       	ldi	r30, 0x27	; 39
    23b2:	f0 e0       	ldi	r31, 0x00	; 0
    23b4:	80 81       	ld	r24, Z
    23b6:	8b 7f       	andi	r24, 0xFB	; 251
    23b8:	8c 93       	st	X, r24
    23ba:	83 c0       	rjmp	.+262    	; 0x24c2 <ADC_u16Read+0x1fa>
		case ADC_CH2:CLR_BIT(ADMUX_REG,MUX0);SET_BIT(ADMUX_REG,MUX1);CLR_BIT(ADMUX_REG,MUX2);break;//010
    23bc:	a7 e2       	ldi	r26, 0x27	; 39
    23be:	b0 e0       	ldi	r27, 0x00	; 0
    23c0:	e7 e2       	ldi	r30, 0x27	; 39
    23c2:	f0 e0       	ldi	r31, 0x00	; 0
    23c4:	80 81       	ld	r24, Z
    23c6:	8e 7f       	andi	r24, 0xFE	; 254
    23c8:	8c 93       	st	X, r24
    23ca:	a7 e2       	ldi	r26, 0x27	; 39
    23cc:	b0 e0       	ldi	r27, 0x00	; 0
    23ce:	e7 e2       	ldi	r30, 0x27	; 39
    23d0:	f0 e0       	ldi	r31, 0x00	; 0
    23d2:	80 81       	ld	r24, Z
    23d4:	82 60       	ori	r24, 0x02	; 2
    23d6:	8c 93       	st	X, r24
    23d8:	a7 e2       	ldi	r26, 0x27	; 39
    23da:	b0 e0       	ldi	r27, 0x00	; 0
    23dc:	e7 e2       	ldi	r30, 0x27	; 39
    23de:	f0 e0       	ldi	r31, 0x00	; 0
    23e0:	80 81       	ld	r24, Z
    23e2:	8b 7f       	andi	r24, 0xFB	; 251
    23e4:	8c 93       	st	X, r24
    23e6:	6d c0       	rjmp	.+218    	; 0x24c2 <ADC_u16Read+0x1fa>
		case ADC_CH3:SET_BIT(ADMUX_REG,MUX0);SET_BIT(ADMUX_REG,MUX1);CLR_BIT(ADMUX_REG,MUX2);break;//011
    23e8:	a7 e2       	ldi	r26, 0x27	; 39
    23ea:	b0 e0       	ldi	r27, 0x00	; 0
    23ec:	e7 e2       	ldi	r30, 0x27	; 39
    23ee:	f0 e0       	ldi	r31, 0x00	; 0
    23f0:	80 81       	ld	r24, Z
    23f2:	81 60       	ori	r24, 0x01	; 1
    23f4:	8c 93       	st	X, r24
    23f6:	a7 e2       	ldi	r26, 0x27	; 39
    23f8:	b0 e0       	ldi	r27, 0x00	; 0
    23fa:	e7 e2       	ldi	r30, 0x27	; 39
    23fc:	f0 e0       	ldi	r31, 0x00	; 0
    23fe:	80 81       	ld	r24, Z
    2400:	82 60       	ori	r24, 0x02	; 2
    2402:	8c 93       	st	X, r24
    2404:	a7 e2       	ldi	r26, 0x27	; 39
    2406:	b0 e0       	ldi	r27, 0x00	; 0
    2408:	e7 e2       	ldi	r30, 0x27	; 39
    240a:	f0 e0       	ldi	r31, 0x00	; 0
    240c:	80 81       	ld	r24, Z
    240e:	8b 7f       	andi	r24, 0xFB	; 251
    2410:	8c 93       	st	X, r24
    2412:	57 c0       	rjmp	.+174    	; 0x24c2 <ADC_u16Read+0x1fa>
		case ADC_CH4:CLR_BIT(ADMUX_REG,MUX0);CLR_BIT(ADMUX_REG,MUX1);SET_BIT(ADMUX_REG,MUX2);break;//100
    2414:	a7 e2       	ldi	r26, 0x27	; 39
    2416:	b0 e0       	ldi	r27, 0x00	; 0
    2418:	e7 e2       	ldi	r30, 0x27	; 39
    241a:	f0 e0       	ldi	r31, 0x00	; 0
    241c:	80 81       	ld	r24, Z
    241e:	8e 7f       	andi	r24, 0xFE	; 254
    2420:	8c 93       	st	X, r24
    2422:	a7 e2       	ldi	r26, 0x27	; 39
    2424:	b0 e0       	ldi	r27, 0x00	; 0
    2426:	e7 e2       	ldi	r30, 0x27	; 39
    2428:	f0 e0       	ldi	r31, 0x00	; 0
    242a:	80 81       	ld	r24, Z
    242c:	8d 7f       	andi	r24, 0xFD	; 253
    242e:	8c 93       	st	X, r24
    2430:	a7 e2       	ldi	r26, 0x27	; 39
    2432:	b0 e0       	ldi	r27, 0x00	; 0
    2434:	e7 e2       	ldi	r30, 0x27	; 39
    2436:	f0 e0       	ldi	r31, 0x00	; 0
    2438:	80 81       	ld	r24, Z
    243a:	84 60       	ori	r24, 0x04	; 4
    243c:	8c 93       	st	X, r24
    243e:	41 c0       	rjmp	.+130    	; 0x24c2 <ADC_u16Read+0x1fa>
		case ADC_CH5:SET_BIT(ADMUX_REG,MUX0);CLR_BIT(ADMUX_REG,MUX1);SET_BIT(ADMUX_REG,MUX2);break;//101
    2440:	a7 e2       	ldi	r26, 0x27	; 39
    2442:	b0 e0       	ldi	r27, 0x00	; 0
    2444:	e7 e2       	ldi	r30, 0x27	; 39
    2446:	f0 e0       	ldi	r31, 0x00	; 0
    2448:	80 81       	ld	r24, Z
    244a:	81 60       	ori	r24, 0x01	; 1
    244c:	8c 93       	st	X, r24
    244e:	a7 e2       	ldi	r26, 0x27	; 39
    2450:	b0 e0       	ldi	r27, 0x00	; 0
    2452:	e7 e2       	ldi	r30, 0x27	; 39
    2454:	f0 e0       	ldi	r31, 0x00	; 0
    2456:	80 81       	ld	r24, Z
    2458:	8d 7f       	andi	r24, 0xFD	; 253
    245a:	8c 93       	st	X, r24
    245c:	a7 e2       	ldi	r26, 0x27	; 39
    245e:	b0 e0       	ldi	r27, 0x00	; 0
    2460:	e7 e2       	ldi	r30, 0x27	; 39
    2462:	f0 e0       	ldi	r31, 0x00	; 0
    2464:	80 81       	ld	r24, Z
    2466:	84 60       	ori	r24, 0x04	; 4
    2468:	8c 93       	st	X, r24
    246a:	2b c0       	rjmp	.+86     	; 0x24c2 <ADC_u16Read+0x1fa>
		case ADC_CH6:CLR_BIT(ADMUX_REG,MUX0);SET_BIT(ADMUX_REG,MUX1);SET_BIT(ADMUX_REG,MUX2);break;//110
    246c:	a7 e2       	ldi	r26, 0x27	; 39
    246e:	b0 e0       	ldi	r27, 0x00	; 0
    2470:	e7 e2       	ldi	r30, 0x27	; 39
    2472:	f0 e0       	ldi	r31, 0x00	; 0
    2474:	80 81       	ld	r24, Z
    2476:	8e 7f       	andi	r24, 0xFE	; 254
    2478:	8c 93       	st	X, r24
    247a:	a7 e2       	ldi	r26, 0x27	; 39
    247c:	b0 e0       	ldi	r27, 0x00	; 0
    247e:	e7 e2       	ldi	r30, 0x27	; 39
    2480:	f0 e0       	ldi	r31, 0x00	; 0
    2482:	80 81       	ld	r24, Z
    2484:	82 60       	ori	r24, 0x02	; 2
    2486:	8c 93       	st	X, r24
    2488:	a7 e2       	ldi	r26, 0x27	; 39
    248a:	b0 e0       	ldi	r27, 0x00	; 0
    248c:	e7 e2       	ldi	r30, 0x27	; 39
    248e:	f0 e0       	ldi	r31, 0x00	; 0
    2490:	80 81       	ld	r24, Z
    2492:	84 60       	ori	r24, 0x04	; 4
    2494:	8c 93       	st	X, r24
    2496:	15 c0       	rjmp	.+42     	; 0x24c2 <ADC_u16Read+0x1fa>
		case ADC_CH7:SET_BIT(ADMUX_REG,MUX0);SET_BIT(ADMUX_REG,MUX1);SET_BIT(ADMUX_REG,MUX2);break;//111
    2498:	a7 e2       	ldi	r26, 0x27	; 39
    249a:	b0 e0       	ldi	r27, 0x00	; 0
    249c:	e7 e2       	ldi	r30, 0x27	; 39
    249e:	f0 e0       	ldi	r31, 0x00	; 0
    24a0:	80 81       	ld	r24, Z
    24a2:	81 60       	ori	r24, 0x01	; 1
    24a4:	8c 93       	st	X, r24
    24a6:	a7 e2       	ldi	r26, 0x27	; 39
    24a8:	b0 e0       	ldi	r27, 0x00	; 0
    24aa:	e7 e2       	ldi	r30, 0x27	; 39
    24ac:	f0 e0       	ldi	r31, 0x00	; 0
    24ae:	80 81       	ld	r24, Z
    24b0:	82 60       	ori	r24, 0x02	; 2
    24b2:	8c 93       	st	X, r24
    24b4:	a7 e2       	ldi	r26, 0x27	; 39
    24b6:	b0 e0       	ldi	r27, 0x00	; 0
    24b8:	e7 e2       	ldi	r30, 0x27	; 39
    24ba:	f0 e0       	ldi	r31, 0x00	; 0
    24bc:	80 81       	ld	r24, Z
    24be:	84 60       	ori	r24, 0x04	; 4
    24c0:	8c 93       	st	X, r24
	}
	/*Start Conversion*/
	SET_BIT(ADCSRA_REG,ADSC);
    24c2:	a6 e2       	ldi	r26, 0x26	; 38
    24c4:	b0 e0       	ldi	r27, 0x00	; 0
    24c6:	e6 e2       	ldi	r30, 0x26	; 38
    24c8:	f0 e0       	ldi	r31, 0x00	; 0
    24ca:	80 81       	ld	r24, Z
    24cc:	80 64       	ori	r24, 0x40	; 64
    24ce:	8c 93       	st	X, r24
	/*Wait until the flag bit is switched to 1 (Conversion Complete)*/
	while(GET_BIT(ADCSRA_REG,ADIF) == 0);
    24d0:	e6 e2       	ldi	r30, 0x26	; 38
    24d2:	f0 e0       	ldi	r31, 0x00	; 0
    24d4:	80 81       	ld	r24, Z
    24d6:	82 95       	swap	r24
    24d8:	8f 70       	andi	r24, 0x0F	; 15
    24da:	88 2f       	mov	r24, r24
    24dc:	90 e0       	ldi	r25, 0x00	; 0
    24de:	81 70       	andi	r24, 0x01	; 1
    24e0:	90 70       	andi	r25, 0x00	; 0
    24e2:	00 97       	sbiw	r24, 0x00	; 0
    24e4:	a9 f3       	breq	.-22     	; 0x24d0 <ADC_u16Read+0x208>
	/*clear flag*/
	SET_BIT(ADCSRA_REG,ADIF);
    24e6:	a6 e2       	ldi	r26, 0x26	; 38
    24e8:	b0 e0       	ldi	r27, 0x00	; 0
    24ea:	e6 e2       	ldi	r30, 0x26	; 38
    24ec:	f0 e0       	ldi	r31, 0x00	; 0
    24ee:	80 81       	ld	r24, Z
    24f0:	80 61       	ori	r24, 0x10	; 16
    24f2:	8c 93       	st	X, r24
	/*Return 16 bits in ADCDATA Register */
	return ADCDATA_REG;
    24f4:	e4 e2       	ldi	r30, 0x24	; 36
    24f6:	f0 e0       	ldi	r31, 0x00	; 0
    24f8:	80 81       	ld	r24, Z
    24fa:	91 81       	ldd	r25, Z+1	; 0x01
}
    24fc:	0f 90       	pop	r0
    24fe:	0f 90       	pop	r0
    2500:	0f 90       	pop	r0
    2502:	cf 91       	pop	r28
    2504:	df 91       	pop	r29
    2506:	08 95       	ret

00002508 <ADC_voidEnabled>:

void ADC_voidEnabled(void)
{
    2508:	df 93       	push	r29
    250a:	cf 93       	push	r28
    250c:	cd b7       	in	r28, 0x3d	; 61
    250e:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(ADCSRA_REG,ADEN);
    2510:	a6 e2       	ldi	r26, 0x26	; 38
    2512:	b0 e0       	ldi	r27, 0x00	; 0
    2514:	e6 e2       	ldi	r30, 0x26	; 38
    2516:	f0 e0       	ldi	r31, 0x00	; 0
    2518:	80 81       	ld	r24, Z
    251a:	80 68       	ori	r24, 0x80	; 128
    251c:	8c 93       	st	X, r24
}
    251e:	cf 91       	pop	r28
    2520:	df 91       	pop	r29
    2522:	08 95       	ret

00002524 <ADC_voidDisabled>:

void ADC_voidDisabled(void)
{
    2524:	df 93       	push	r29
    2526:	cf 93       	push	r28
    2528:	cd b7       	in	r28, 0x3d	; 61
    252a:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(ADCSRA_REG,ADEN);
    252c:	a6 e2       	ldi	r26, 0x26	; 38
    252e:	b0 e0       	ldi	r27, 0x00	; 0
    2530:	e6 e2       	ldi	r30, 0x26	; 38
    2532:	f0 e0       	ldi	r31, 0x00	; 0
    2534:	80 81       	ld	r24, Z
    2536:	8f 77       	andi	r24, 0x7F	; 127
    2538:	8c 93       	st	X, r24
}
    253a:	cf 91       	pop	r28
    253c:	df 91       	pop	r29
    253e:	08 95       	ret

00002540 <SERVO_INIT>:
#include "../../MCAL/TIMER_1/TIMER1_private.h"
#include "SERVO.h"


void SERVO_INIT(u16 angle)
{
    2540:	df 93       	push	r29
    2542:	cf 93       	push	r28
    2544:	00 d0       	rcall	.+0      	; 0x2546 <SERVO_INIT+0x6>
    2546:	cd b7       	in	r28, 0x3d	; 61
    2548:	de b7       	in	r29, 0x3e	; 62
    254a:	9a 83       	std	Y+2, r25	; 0x02
    254c:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(TCCR1A_REG,1);
    254e:	af e4       	ldi	r26, 0x4F	; 79
    2550:	b0 e0       	ldi	r27, 0x00	; 0
    2552:	ef e4       	ldi	r30, 0x4F	; 79
    2554:	f0 e0       	ldi	r31, 0x00	; 0
    2556:	80 81       	ld	r24, Z
    2558:	82 60       	ori	r24, 0x02	; 2
    255a:	8c 93       	st	X, r24
	CLR_BIT(TCCR1A_REG,0);
    255c:	af e4       	ldi	r26, 0x4F	; 79
    255e:	b0 e0       	ldi	r27, 0x00	; 0
    2560:	ef e4       	ldi	r30, 0x4F	; 79
    2562:	f0 e0       	ldi	r31, 0x00	; 0
    2564:	80 81       	ld	r24, Z
    2566:	8e 7f       	andi	r24, 0xFE	; 254
    2568:	8c 93       	st	X, r24
	SET_BIT(TCCR1B_REG,4);
    256a:	ae e4       	ldi	r26, 0x4E	; 78
    256c:	b0 e0       	ldi	r27, 0x00	; 0
    256e:	ee e4       	ldi	r30, 0x4E	; 78
    2570:	f0 e0       	ldi	r31, 0x00	; 0
    2572:	80 81       	ld	r24, Z
    2574:	80 61       	ori	r24, 0x10	; 16
    2576:	8c 93       	st	X, r24
	SET_BIT(TCCR1B_REG,3);
    2578:	ae e4       	ldi	r26, 0x4E	; 78
    257a:	b0 e0       	ldi	r27, 0x00	; 0
    257c:	ee e4       	ldi	r30, 0x4E	; 78
    257e:	f0 e0       	ldi	r31, 0x00	; 0
    2580:	80 81       	ld	r24, Z
    2582:	88 60       	ori	r24, 0x08	; 8
    2584:	8c 93       	st	X, r24

	SET_BIT(TCCR1A_REG,7);
    2586:	af e4       	ldi	r26, 0x4F	; 79
    2588:	b0 e0       	ldi	r27, 0x00	; 0
    258a:	ef e4       	ldi	r30, 0x4F	; 79
    258c:	f0 e0       	ldi	r31, 0x00	; 0
    258e:	80 81       	ld	r24, Z
    2590:	80 68       	ori	r24, 0x80	; 128
    2592:	8c 93       	st	X, r24
	CLR_BIT(TCCR1A_REG,6);
    2594:	af e4       	ldi	r26, 0x4F	; 79
    2596:	b0 e0       	ldi	r27, 0x00	; 0
    2598:	ef e4       	ldi	r30, 0x4F	; 79
    259a:	f0 e0       	ldi	r31, 0x00	; 0
    259c:	80 81       	ld	r24, Z
    259e:	8f 7b       	andi	r24, 0xBF	; 191
    25a0:	8c 93       	st	X, r24

	ICR1_REG = 19999;
    25a2:	e6 e4       	ldi	r30, 0x46	; 70
    25a4:	f0 e0       	ldi	r31, 0x00	; 0
    25a6:	8f e1       	ldi	r24, 0x1F	; 31
    25a8:	9e e4       	ldi	r25, 0x4E	; 78
    25aa:	91 83       	std	Z+1, r25	; 0x01
    25ac:	80 83       	st	Z, r24

	OCRA1_REG = angle;
    25ae:	ea e4       	ldi	r30, 0x4A	; 74
    25b0:	f0 e0       	ldi	r31, 0x00	; 0
    25b2:	89 81       	ldd	r24, Y+1	; 0x01
    25b4:	9a 81       	ldd	r25, Y+2	; 0x02
    25b6:	91 83       	std	Z+1, r25	; 0x01
    25b8:	80 83       	st	Z, r24

	CLR_BIT(TCCR1B_REG,2);
    25ba:	ae e4       	ldi	r26, 0x4E	; 78
    25bc:	b0 e0       	ldi	r27, 0x00	; 0
    25be:	ee e4       	ldi	r30, 0x4E	; 78
    25c0:	f0 e0       	ldi	r31, 0x00	; 0
    25c2:	80 81       	ld	r24, Z
    25c4:	8b 7f       	andi	r24, 0xFB	; 251
    25c6:	8c 93       	st	X, r24
	SET_BIT(TCCR1B_REG,1);
    25c8:	ae e4       	ldi	r26, 0x4E	; 78
    25ca:	b0 e0       	ldi	r27, 0x00	; 0
    25cc:	ee e4       	ldi	r30, 0x4E	; 78
    25ce:	f0 e0       	ldi	r31, 0x00	; 0
    25d0:	80 81       	ld	r24, Z
    25d2:	82 60       	ori	r24, 0x02	; 2
    25d4:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B_REG,0);
    25d6:	ae e4       	ldi	r26, 0x4E	; 78
    25d8:	b0 e0       	ldi	r27, 0x00	; 0
    25da:	ee e4       	ldi	r30, 0x4E	; 78
    25dc:	f0 e0       	ldi	r31, 0x00	; 0
    25de:	80 81       	ld	r24, Z
    25e0:	8e 7f       	andi	r24, 0xFE	; 254
    25e2:	8c 93       	st	X, r24
}
    25e4:	0f 90       	pop	r0
    25e6:	0f 90       	pop	r0
    25e8:	cf 91       	pop	r28
    25ea:	df 91       	pop	r29
    25ec:	08 95       	ret

000025ee <SET_SERVO_ANGLE>:


void SET_SERVO_ANGLE(u16 angle)
{
    25ee:	df 93       	push	r29
    25f0:	cf 93       	push	r28
    25f2:	00 d0       	rcall	.+0      	; 0x25f4 <SET_SERVO_ANGLE+0x6>
    25f4:	cd b7       	in	r28, 0x3d	; 61
    25f6:	de b7       	in	r29, 0x3e	; 62
    25f8:	9a 83       	std	Y+2, r25	; 0x02
    25fa:	89 83       	std	Y+1, r24	; 0x01
	PWM1_voidSetDutyCycle(((5*angle)/180)+5);
    25fc:	29 81       	ldd	r18, Y+1	; 0x01
    25fe:	3a 81       	ldd	r19, Y+2	; 0x02
    2600:	c9 01       	movw	r24, r18
    2602:	88 0f       	add	r24, r24
    2604:	99 1f       	adc	r25, r25
    2606:	88 0f       	add	r24, r24
    2608:	99 1f       	adc	r25, r25
    260a:	82 0f       	add	r24, r18
    260c:	93 1f       	adc	r25, r19
    260e:	24 eb       	ldi	r18, 0xB4	; 180
    2610:	30 e0       	ldi	r19, 0x00	; 0
    2612:	b9 01       	movw	r22, r18
    2614:	0e 94 ce 29 	call	0x539c	; 0x539c <__udivmodhi4>
    2618:	cb 01       	movw	r24, r22
    261a:	05 96       	adiw	r24, 0x05	; 5
    261c:	cc 01       	movw	r24, r24
    261e:	a0 e0       	ldi	r26, 0x00	; 0
    2620:	b0 e0       	ldi	r27, 0x00	; 0
    2622:	bc 01       	movw	r22, r24
    2624:	cd 01       	movw	r24, r26
    2626:	0e 94 a4 07 	call	0xf48	; 0xf48 <PWM1_voidSetDutyCycle>
}
    262a:	0f 90       	pop	r0
    262c:	0f 90       	pop	r0
    262e:	cf 91       	pop	r28
    2630:	df 91       	pop	r29
    2632:	08 95       	ret

00002634 <SERVO_START>:
void SERVO_START()
{
    2634:	df 93       	push	r29
    2636:	cf 93       	push	r28
    2638:	cd b7       	in	r28, 0x3d	; 61
    263a:	de b7       	in	r29, 0x3e	; 62
	PWM1_voidStart();
    263c:	0e 94 ff 07 	call	0xffe	; 0xffe <PWM1_voidStart>
}
    2640:	cf 91       	pop	r28
    2642:	df 91       	pop	r29
    2644:	08 95       	ret

00002646 <SERVO_STOP>:

void SERVO_STOP()
{
    2646:	df 93       	push	r29
    2648:	cf 93       	push	r28
    264a:	cd b7       	in	r28, 0x3d	; 61
    264c:	de b7       	in	r29, 0x3e	; 62
	PWM1_voidStop();
    264e:	0e 94 1b 08 	call	0x1036	; 0x1036 <PWM1_voidStop>
}
    2652:	cf 91       	pop	r28
    2654:	df 91       	pop	r29
    2656:	08 95       	ret

00002658 <HLED_voidInit>:

#include"../../MCAL/DIO/DIO_interface.h"
#include "LED_interface.h"

void HLED_voidInit(u8 copy_u8LedPin,u8 copy_u8LedPort)
{
    2658:	df 93       	push	r29
    265a:	cf 93       	push	r28
    265c:	00 d0       	rcall	.+0      	; 0x265e <HLED_voidInit+0x6>
    265e:	cd b7       	in	r28, 0x3d	; 61
    2660:	de b7       	in	r29, 0x3e	; 62
    2662:	89 83       	std	Y+1, r24	; 0x01
    2664:	6a 83       	std	Y+2, r22	; 0x02
	MDIO_voidSetPinMode (copy_u8LedPin,copy_u8LedPort,DIO_OUTPUT);
    2666:	89 81       	ldd	r24, Y+1	; 0x01
    2668:	6a 81       	ldd	r22, Y+2	; 0x02
    266a:	41 e0       	ldi	r20, 0x01	; 1
    266c:	0e 94 ff 0c 	call	0x19fe	; 0x19fe <MDIO_voidSetPinMode>
	MDIO_voidSetPinValue(copy_u8LedPin,copy_u8LedPort,DIO_LOW);
    2670:	89 81       	ldd	r24, Y+1	; 0x01
    2672:	6a 81       	ldd	r22, Y+2	; 0x02
    2674:	40 e0       	ldi	r20, 0x00	; 0
    2676:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <MDIO_voidSetPinValue>
}
    267a:	0f 90       	pop	r0
    267c:	0f 90       	pop	r0
    267e:	cf 91       	pop	r28
    2680:	df 91       	pop	r29
    2682:	08 95       	ret

00002684 <HLED_voidOn>:

void HLED_voidOn(u8 copy_u8LedPin,u8 copy_u8LedPort)
{
    2684:	df 93       	push	r29
    2686:	cf 93       	push	r28
    2688:	00 d0       	rcall	.+0      	; 0x268a <HLED_voidOn+0x6>
    268a:	cd b7       	in	r28, 0x3d	; 61
    268c:	de b7       	in	r29, 0x3e	; 62
    268e:	89 83       	std	Y+1, r24	; 0x01
    2690:	6a 83       	std	Y+2, r22	; 0x02
	MDIO_voidSetPinValue(copy_u8LedPin,copy_u8LedPort,DIO_HIGH);
    2692:	89 81       	ldd	r24, Y+1	; 0x01
    2694:	6a 81       	ldd	r22, Y+2	; 0x02
    2696:	41 e0       	ldi	r20, 0x01	; 1
    2698:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <MDIO_voidSetPinValue>
}
    269c:	0f 90       	pop	r0
    269e:	0f 90       	pop	r0
    26a0:	cf 91       	pop	r28
    26a2:	df 91       	pop	r29
    26a4:	08 95       	ret

000026a6 <HLED_voidOff>:

void HLED_voidOff(u8 copy_u8LedPin,u8 copy_u8LedPort)
{
    26a6:	df 93       	push	r29
    26a8:	cf 93       	push	r28
    26aa:	00 d0       	rcall	.+0      	; 0x26ac <HLED_voidOff+0x6>
    26ac:	cd b7       	in	r28, 0x3d	; 61
    26ae:	de b7       	in	r29, 0x3e	; 62
    26b0:	89 83       	std	Y+1, r24	; 0x01
    26b2:	6a 83       	std	Y+2, r22	; 0x02
	MDIO_voidSetPinValue(copy_u8LedPin,copy_u8LedPort,DIO_LOW);
    26b4:	89 81       	ldd	r24, Y+1	; 0x01
    26b6:	6a 81       	ldd	r22, Y+2	; 0x02
    26b8:	40 e0       	ldi	r20, 0x00	; 0
    26ba:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <MDIO_voidSetPinValue>
}
    26be:	0f 90       	pop	r0
    26c0:	0f 90       	pop	r0
    26c2:	cf 91       	pop	r28
    26c4:	df 91       	pop	r29
    26c6:	08 95       	ret

000026c8 <HLED_voidToggle>:

void HLED_voidToggle(u8 copy_u8LedPin,u8 copy_u8LedPort)
{
    26c8:	df 93       	push	r29
    26ca:	cf 93       	push	r28
    26cc:	00 d0       	rcall	.+0      	; 0x26ce <HLED_voidToggle+0x6>
    26ce:	cd b7       	in	r28, 0x3d	; 61
    26d0:	de b7       	in	r29, 0x3e	; 62
    26d2:	89 83       	std	Y+1, r24	; 0x01
    26d4:	6a 83       	std	Y+2, r22	; 0x02
	MDIO_voidTogPinValue(copy_u8LedPin,copy_u8LedPort);
    26d6:	89 81       	ldd	r24, Y+1	; 0x01
    26d8:	6a 81       	ldd	r22, Y+2	; 0x02
    26da:	0e 94 0f 0f 	call	0x1e1e	; 0x1e1e <MDIO_voidTogPinValue>
}
    26de:	0f 90       	pop	r0
    26e0:	0f 90       	pop	r0
    26e2:	cf 91       	pop	r28
    26e4:	df 91       	pop	r29
    26e6:	08 95       	ret

000026e8 <HLCD_voidInit>:

#include "LCD_interface.h"
#include "LCD_config.h"

void HLCD_voidInit(void)
{
    26e8:	0f 93       	push	r16
    26ea:	1f 93       	push	r17
    26ec:	df 93       	push	r29
    26ee:	cf 93       	push	r28
    26f0:	cd b7       	in	r28, 0x3d	; 61
    26f2:	de b7       	in	r29, 0x3e	; 62
    26f4:	c6 54       	subi	r28, 0x46	; 70
    26f6:	d0 40       	sbci	r29, 0x00	; 0
    26f8:	0f b6       	in	r0, 0x3f	; 63
    26fa:	f8 94       	cli
    26fc:	de bf       	out	0x3e, r29	; 62
    26fe:	0f be       	out	0x3f, r0	; 63
    2700:	cd bf       	out	0x3d, r28	; 61
	MDIO_voidSetPortMode(DATA_PORT,0xFF);
    2702:	82 e0       	ldi	r24, 0x02	; 2
    2704:	6f ef       	ldi	r22, 0xFF	; 255
    2706:	0e 94 15 10 	call	0x202a	; 0x202a <MDIO_voidSetPortMode>
	MDIO_voidSetPinMode (RS_PIN,CONTROL_PORT,DIO_OUTPUT);
    270a:	80 e0       	ldi	r24, 0x00	; 0
    270c:	62 e0       	ldi	r22, 0x02	; 2
    270e:	41 e0       	ldi	r20, 0x01	; 1
    2710:	0e 94 ff 0c 	call	0x19fe	; 0x19fe <MDIO_voidSetPinMode>
	MDIO_voidSetPinMode (RW_PIN,CONTROL_PORT,DIO_OUTPUT);
    2714:	81 e0       	ldi	r24, 0x01	; 1
    2716:	62 e0       	ldi	r22, 0x02	; 2
    2718:	41 e0       	ldi	r20, 0x01	; 1
    271a:	0e 94 ff 0c 	call	0x19fe	; 0x19fe <MDIO_voidSetPinMode>
	MDIO_voidSetPinMode (E_PIN ,CONTROL_PORT,DIO_OUTPUT);
    271e:	82 e0       	ldi	r24, 0x02	; 2
    2720:	62 e0       	ldi	r22, 0x02	; 2
    2722:	41 e0       	ldi	r20, 0x01	; 1
    2724:	0e 94 ff 0c 	call	0x19fe	; 0x19fe <MDIO_voidSetPinMode>
    2728:	fe 01       	movw	r30, r28
    272a:	ed 5b       	subi	r30, 0xBD	; 189
    272c:	ff 4f       	sbci	r31, 0xFF	; 255
    272e:	80 e0       	ldi	r24, 0x00	; 0
    2730:	90 e0       	ldi	r25, 0x00	; 0
    2732:	a0 ef       	ldi	r26, 0xF0	; 240
    2734:	b1 e4       	ldi	r27, 0x41	; 65
    2736:	80 83       	st	Z, r24
    2738:	91 83       	std	Z+1, r25	; 0x01
    273a:	a2 83       	std	Z+2, r26	; 0x02
    273c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    273e:	8e 01       	movw	r16, r28
    2740:	01 5c       	subi	r16, 0xC1	; 193
    2742:	1f 4f       	sbci	r17, 0xFF	; 255
    2744:	fe 01       	movw	r30, r28
    2746:	ed 5b       	subi	r30, 0xBD	; 189
    2748:	ff 4f       	sbci	r31, 0xFF	; 255
    274a:	60 81       	ld	r22, Z
    274c:	71 81       	ldd	r23, Z+1	; 0x01
    274e:	82 81       	ldd	r24, Z+2	; 0x02
    2750:	93 81       	ldd	r25, Z+3	; 0x03
    2752:	20 e0       	ldi	r18, 0x00	; 0
    2754:	30 e0       	ldi	r19, 0x00	; 0
    2756:	4a ef       	ldi	r20, 0xFA	; 250
    2758:	54 e4       	ldi	r21, 0x44	; 68
    275a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    275e:	dc 01       	movw	r26, r24
    2760:	cb 01       	movw	r24, r22
    2762:	f8 01       	movw	r30, r16
    2764:	80 83       	st	Z, r24
    2766:	91 83       	std	Z+1, r25	; 0x01
    2768:	a2 83       	std	Z+2, r26	; 0x02
    276a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    276c:	fe 01       	movw	r30, r28
    276e:	ff 96       	adiw	r30, 0x3f	; 63
    2770:	60 81       	ld	r22, Z
    2772:	71 81       	ldd	r23, Z+1	; 0x01
    2774:	82 81       	ldd	r24, Z+2	; 0x02
    2776:	93 81       	ldd	r25, Z+3	; 0x03
    2778:	20 e0       	ldi	r18, 0x00	; 0
    277a:	30 e0       	ldi	r19, 0x00	; 0
    277c:	40 e8       	ldi	r20, 0x80	; 128
    277e:	5f e3       	ldi	r21, 0x3F	; 63
    2780:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2784:	88 23       	and	r24, r24
    2786:	2c f4       	brge	.+10     	; 0x2792 <HLCD_voidInit+0xaa>
		__ticks = 1;
    2788:	81 e0       	ldi	r24, 0x01	; 1
    278a:	90 e0       	ldi	r25, 0x00	; 0
    278c:	9e af       	std	Y+62, r25	; 0x3e
    278e:	8d af       	std	Y+61, r24	; 0x3d
    2790:	46 c0       	rjmp	.+140    	; 0x281e <HLCD_voidInit+0x136>
	else if (__tmp > 65535)
    2792:	fe 01       	movw	r30, r28
    2794:	ff 96       	adiw	r30, 0x3f	; 63
    2796:	60 81       	ld	r22, Z
    2798:	71 81       	ldd	r23, Z+1	; 0x01
    279a:	82 81       	ldd	r24, Z+2	; 0x02
    279c:	93 81       	ldd	r25, Z+3	; 0x03
    279e:	20 e0       	ldi	r18, 0x00	; 0
    27a0:	3f ef       	ldi	r19, 0xFF	; 255
    27a2:	4f e7       	ldi	r20, 0x7F	; 127
    27a4:	57 e4       	ldi	r21, 0x47	; 71
    27a6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    27aa:	18 16       	cp	r1, r24
    27ac:	64 f5       	brge	.+88     	; 0x2806 <HLCD_voidInit+0x11e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27ae:	fe 01       	movw	r30, r28
    27b0:	ed 5b       	subi	r30, 0xBD	; 189
    27b2:	ff 4f       	sbci	r31, 0xFF	; 255
    27b4:	60 81       	ld	r22, Z
    27b6:	71 81       	ldd	r23, Z+1	; 0x01
    27b8:	82 81       	ldd	r24, Z+2	; 0x02
    27ba:	93 81       	ldd	r25, Z+3	; 0x03
    27bc:	20 e0       	ldi	r18, 0x00	; 0
    27be:	30 e0       	ldi	r19, 0x00	; 0
    27c0:	40 e2       	ldi	r20, 0x20	; 32
    27c2:	51 e4       	ldi	r21, 0x41	; 65
    27c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27c8:	dc 01       	movw	r26, r24
    27ca:	cb 01       	movw	r24, r22
    27cc:	bc 01       	movw	r22, r24
    27ce:	cd 01       	movw	r24, r26
    27d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27d4:	dc 01       	movw	r26, r24
    27d6:	cb 01       	movw	r24, r22
    27d8:	9e af       	std	Y+62, r25	; 0x3e
    27da:	8d af       	std	Y+61, r24	; 0x3d
    27dc:	0f c0       	rjmp	.+30     	; 0x27fc <HLCD_voidInit+0x114>
    27de:	88 ec       	ldi	r24, 0xC8	; 200
    27e0:	90 e0       	ldi	r25, 0x00	; 0
    27e2:	9c af       	std	Y+60, r25	; 0x3c
    27e4:	8b af       	std	Y+59, r24	; 0x3b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    27e6:	8b ad       	ldd	r24, Y+59	; 0x3b
    27e8:	9c ad       	ldd	r25, Y+60	; 0x3c
    27ea:	01 97       	sbiw	r24, 0x01	; 1
    27ec:	f1 f7       	brne	.-4      	; 0x27ea <HLCD_voidInit+0x102>
    27ee:	9c af       	std	Y+60, r25	; 0x3c
    27f0:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27f2:	8d ad       	ldd	r24, Y+61	; 0x3d
    27f4:	9e ad       	ldd	r25, Y+62	; 0x3e
    27f6:	01 97       	sbiw	r24, 0x01	; 1
    27f8:	9e af       	std	Y+62, r25	; 0x3e
    27fa:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27fc:	8d ad       	ldd	r24, Y+61	; 0x3d
    27fe:	9e ad       	ldd	r25, Y+62	; 0x3e
    2800:	00 97       	sbiw	r24, 0x00	; 0
    2802:	69 f7       	brne	.-38     	; 0x27de <HLCD_voidInit+0xf6>
    2804:	16 c0       	rjmp	.+44     	; 0x2832 <HLCD_voidInit+0x14a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2806:	fe 01       	movw	r30, r28
    2808:	ff 96       	adiw	r30, 0x3f	; 63
    280a:	60 81       	ld	r22, Z
    280c:	71 81       	ldd	r23, Z+1	; 0x01
    280e:	82 81       	ldd	r24, Z+2	; 0x02
    2810:	93 81       	ldd	r25, Z+3	; 0x03
    2812:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2816:	dc 01       	movw	r26, r24
    2818:	cb 01       	movw	r24, r22
    281a:	9e af       	std	Y+62, r25	; 0x3e
    281c:	8d af       	std	Y+61, r24	; 0x3d
    281e:	8d ad       	ldd	r24, Y+61	; 0x3d
    2820:	9e ad       	ldd	r25, Y+62	; 0x3e
    2822:	9a af       	std	Y+58, r25	; 0x3a
    2824:	89 af       	std	Y+57, r24	; 0x39
    2826:	89 ad       	ldd	r24, Y+57	; 0x39
    2828:	9a ad       	ldd	r25, Y+58	; 0x3a
    282a:	01 97       	sbiw	r24, 0x01	; 1
    282c:	f1 f7       	brne	.-4      	; 0x282a <HLCD_voidInit+0x142>
    282e:	9a af       	std	Y+58, r25	; 0x3a
    2830:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(1);

	
	#elif LCD_MODE == _4Bit_Mode
	/*Function SET (4bit/2-line/5x7 dot character) and wait 1 ms*/
	HLCD_voidWriteCmd(0x33);
    2832:	83 e3       	ldi	r24, 0x33	; 51
    2834:	0e 94 ff 15 	call	0x2bfe	; 0x2bfe <HLCD_voidWriteCmd>
	HLCD_voidWriteCmd(0x32);
    2838:	82 e3       	ldi	r24, 0x32	; 50
    283a:	0e 94 ff 15 	call	0x2bfe	; 0x2bfe <HLCD_voidWriteCmd>
	HLCD_voidWriteCmd(0x28);
    283e:	88 e2       	ldi	r24, 0x28	; 40
    2840:	0e 94 ff 15 	call	0x2bfe	; 0x2bfe <HLCD_voidWriteCmd>
    2844:	80 e0       	ldi	r24, 0x00	; 0
    2846:	90 e0       	ldi	r25, 0x00	; 0
    2848:	a0 e8       	ldi	r26, 0x80	; 128
    284a:	bf e3       	ldi	r27, 0x3F	; 63
    284c:	8d ab       	std	Y+53, r24	; 0x35
    284e:	9e ab       	std	Y+54, r25	; 0x36
    2850:	af ab       	std	Y+55, r26	; 0x37
    2852:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2854:	6d a9       	ldd	r22, Y+53	; 0x35
    2856:	7e a9       	ldd	r23, Y+54	; 0x36
    2858:	8f a9       	ldd	r24, Y+55	; 0x37
    285a:	98 ad       	ldd	r25, Y+56	; 0x38
    285c:	20 e0       	ldi	r18, 0x00	; 0
    285e:	30 e0       	ldi	r19, 0x00	; 0
    2860:	4a ef       	ldi	r20, 0xFA	; 250
    2862:	54 e4       	ldi	r21, 0x44	; 68
    2864:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2868:	dc 01       	movw	r26, r24
    286a:	cb 01       	movw	r24, r22
    286c:	89 ab       	std	Y+49, r24	; 0x31
    286e:	9a ab       	std	Y+50, r25	; 0x32
    2870:	ab ab       	std	Y+51, r26	; 0x33
    2872:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2874:	69 a9       	ldd	r22, Y+49	; 0x31
    2876:	7a a9       	ldd	r23, Y+50	; 0x32
    2878:	8b a9       	ldd	r24, Y+51	; 0x33
    287a:	9c a9       	ldd	r25, Y+52	; 0x34
    287c:	20 e0       	ldi	r18, 0x00	; 0
    287e:	30 e0       	ldi	r19, 0x00	; 0
    2880:	40 e8       	ldi	r20, 0x80	; 128
    2882:	5f e3       	ldi	r21, 0x3F	; 63
    2884:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2888:	88 23       	and	r24, r24
    288a:	2c f4       	brge	.+10     	; 0x2896 <HLCD_voidInit+0x1ae>
		__ticks = 1;
    288c:	81 e0       	ldi	r24, 0x01	; 1
    288e:	90 e0       	ldi	r25, 0x00	; 0
    2890:	98 ab       	std	Y+48, r25	; 0x30
    2892:	8f a7       	std	Y+47, r24	; 0x2f
    2894:	3f c0       	rjmp	.+126    	; 0x2914 <HLCD_voidInit+0x22c>
	else if (__tmp > 65535)
    2896:	69 a9       	ldd	r22, Y+49	; 0x31
    2898:	7a a9       	ldd	r23, Y+50	; 0x32
    289a:	8b a9       	ldd	r24, Y+51	; 0x33
    289c:	9c a9       	ldd	r25, Y+52	; 0x34
    289e:	20 e0       	ldi	r18, 0x00	; 0
    28a0:	3f ef       	ldi	r19, 0xFF	; 255
    28a2:	4f e7       	ldi	r20, 0x7F	; 127
    28a4:	57 e4       	ldi	r21, 0x47	; 71
    28a6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    28aa:	18 16       	cp	r1, r24
    28ac:	4c f5       	brge	.+82     	; 0x2900 <HLCD_voidInit+0x218>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28ae:	6d a9       	ldd	r22, Y+53	; 0x35
    28b0:	7e a9       	ldd	r23, Y+54	; 0x36
    28b2:	8f a9       	ldd	r24, Y+55	; 0x37
    28b4:	98 ad       	ldd	r25, Y+56	; 0x38
    28b6:	20 e0       	ldi	r18, 0x00	; 0
    28b8:	30 e0       	ldi	r19, 0x00	; 0
    28ba:	40 e2       	ldi	r20, 0x20	; 32
    28bc:	51 e4       	ldi	r21, 0x41	; 65
    28be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28c2:	dc 01       	movw	r26, r24
    28c4:	cb 01       	movw	r24, r22
    28c6:	bc 01       	movw	r22, r24
    28c8:	cd 01       	movw	r24, r26
    28ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28ce:	dc 01       	movw	r26, r24
    28d0:	cb 01       	movw	r24, r22
    28d2:	98 ab       	std	Y+48, r25	; 0x30
    28d4:	8f a7       	std	Y+47, r24	; 0x2f
    28d6:	0f c0       	rjmp	.+30     	; 0x28f6 <HLCD_voidInit+0x20e>
    28d8:	88 ec       	ldi	r24, 0xC8	; 200
    28da:	90 e0       	ldi	r25, 0x00	; 0
    28dc:	9e a7       	std	Y+46, r25	; 0x2e
    28de:	8d a7       	std	Y+45, r24	; 0x2d
    28e0:	8d a5       	ldd	r24, Y+45	; 0x2d
    28e2:	9e a5       	ldd	r25, Y+46	; 0x2e
    28e4:	01 97       	sbiw	r24, 0x01	; 1
    28e6:	f1 f7       	brne	.-4      	; 0x28e4 <HLCD_voidInit+0x1fc>
    28e8:	9e a7       	std	Y+46, r25	; 0x2e
    28ea:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28ec:	8f a5       	ldd	r24, Y+47	; 0x2f
    28ee:	98 a9       	ldd	r25, Y+48	; 0x30
    28f0:	01 97       	sbiw	r24, 0x01	; 1
    28f2:	98 ab       	std	Y+48, r25	; 0x30
    28f4:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28f6:	8f a5       	ldd	r24, Y+47	; 0x2f
    28f8:	98 a9       	ldd	r25, Y+48	; 0x30
    28fa:	00 97       	sbiw	r24, 0x00	; 0
    28fc:	69 f7       	brne	.-38     	; 0x28d8 <HLCD_voidInit+0x1f0>
    28fe:	14 c0       	rjmp	.+40     	; 0x2928 <HLCD_voidInit+0x240>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2900:	69 a9       	ldd	r22, Y+49	; 0x31
    2902:	7a a9       	ldd	r23, Y+50	; 0x32
    2904:	8b a9       	ldd	r24, Y+51	; 0x33
    2906:	9c a9       	ldd	r25, Y+52	; 0x34
    2908:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    290c:	dc 01       	movw	r26, r24
    290e:	cb 01       	movw	r24, r22
    2910:	98 ab       	std	Y+48, r25	; 0x30
    2912:	8f a7       	std	Y+47, r24	; 0x2f
    2914:	8f a5       	ldd	r24, Y+47	; 0x2f
    2916:	98 a9       	ldd	r25, Y+48	; 0x30
    2918:	9c a7       	std	Y+44, r25	; 0x2c
    291a:	8b a7       	std	Y+43, r24	; 0x2b
    291c:	8b a5       	ldd	r24, Y+43	; 0x2b
    291e:	9c a5       	ldd	r25, Y+44	; 0x2c
    2920:	01 97       	sbiw	r24, 0x01	; 1
    2922:	f1 f7       	brne	.-4      	; 0x2920 <HLCD_voidInit+0x238>
    2924:	9c a7       	std	Y+44, r25	; 0x2c
    2926:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	#endif

	/*Display ON/OFF Control(display on, cursor off, don't blink character) and wait 1 ms*/
	HLCD_voidWriteCmd(0x0C);
    2928:	8c e0       	ldi	r24, 0x0C	; 12
    292a:	0e 94 ff 15 	call	0x2bfe	; 0x2bfe <HLCD_voidWriteCmd>
    292e:	80 e0       	ldi	r24, 0x00	; 0
    2930:	90 e0       	ldi	r25, 0x00	; 0
    2932:	a0 e8       	ldi	r26, 0x80	; 128
    2934:	bf e3       	ldi	r27, 0x3F	; 63
    2936:	8f a3       	std	Y+39, r24	; 0x27
    2938:	98 a7       	std	Y+40, r25	; 0x28
    293a:	a9 a7       	std	Y+41, r26	; 0x29
    293c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    293e:	6f a1       	ldd	r22, Y+39	; 0x27
    2940:	78 a5       	ldd	r23, Y+40	; 0x28
    2942:	89 a5       	ldd	r24, Y+41	; 0x29
    2944:	9a a5       	ldd	r25, Y+42	; 0x2a
    2946:	20 e0       	ldi	r18, 0x00	; 0
    2948:	30 e0       	ldi	r19, 0x00	; 0
    294a:	4a ef       	ldi	r20, 0xFA	; 250
    294c:	54 e4       	ldi	r21, 0x44	; 68
    294e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2952:	dc 01       	movw	r26, r24
    2954:	cb 01       	movw	r24, r22
    2956:	8b a3       	std	Y+35, r24	; 0x23
    2958:	9c a3       	std	Y+36, r25	; 0x24
    295a:	ad a3       	std	Y+37, r26	; 0x25
    295c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    295e:	6b a1       	ldd	r22, Y+35	; 0x23
    2960:	7c a1       	ldd	r23, Y+36	; 0x24
    2962:	8d a1       	ldd	r24, Y+37	; 0x25
    2964:	9e a1       	ldd	r25, Y+38	; 0x26
    2966:	20 e0       	ldi	r18, 0x00	; 0
    2968:	30 e0       	ldi	r19, 0x00	; 0
    296a:	40 e8       	ldi	r20, 0x80	; 128
    296c:	5f e3       	ldi	r21, 0x3F	; 63
    296e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2972:	88 23       	and	r24, r24
    2974:	2c f4       	brge	.+10     	; 0x2980 <HLCD_voidInit+0x298>
		__ticks = 1;
    2976:	81 e0       	ldi	r24, 0x01	; 1
    2978:	90 e0       	ldi	r25, 0x00	; 0
    297a:	9a a3       	std	Y+34, r25	; 0x22
    297c:	89 a3       	std	Y+33, r24	; 0x21
    297e:	3f c0       	rjmp	.+126    	; 0x29fe <HLCD_voidInit+0x316>
	else if (__tmp > 65535)
    2980:	6b a1       	ldd	r22, Y+35	; 0x23
    2982:	7c a1       	ldd	r23, Y+36	; 0x24
    2984:	8d a1       	ldd	r24, Y+37	; 0x25
    2986:	9e a1       	ldd	r25, Y+38	; 0x26
    2988:	20 e0       	ldi	r18, 0x00	; 0
    298a:	3f ef       	ldi	r19, 0xFF	; 255
    298c:	4f e7       	ldi	r20, 0x7F	; 127
    298e:	57 e4       	ldi	r21, 0x47	; 71
    2990:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2994:	18 16       	cp	r1, r24
    2996:	4c f5       	brge	.+82     	; 0x29ea <HLCD_voidInit+0x302>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2998:	6f a1       	ldd	r22, Y+39	; 0x27
    299a:	78 a5       	ldd	r23, Y+40	; 0x28
    299c:	89 a5       	ldd	r24, Y+41	; 0x29
    299e:	9a a5       	ldd	r25, Y+42	; 0x2a
    29a0:	20 e0       	ldi	r18, 0x00	; 0
    29a2:	30 e0       	ldi	r19, 0x00	; 0
    29a4:	40 e2       	ldi	r20, 0x20	; 32
    29a6:	51 e4       	ldi	r21, 0x41	; 65
    29a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29ac:	dc 01       	movw	r26, r24
    29ae:	cb 01       	movw	r24, r22
    29b0:	bc 01       	movw	r22, r24
    29b2:	cd 01       	movw	r24, r26
    29b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29b8:	dc 01       	movw	r26, r24
    29ba:	cb 01       	movw	r24, r22
    29bc:	9a a3       	std	Y+34, r25	; 0x22
    29be:	89 a3       	std	Y+33, r24	; 0x21
    29c0:	0f c0       	rjmp	.+30     	; 0x29e0 <HLCD_voidInit+0x2f8>
    29c2:	88 ec       	ldi	r24, 0xC8	; 200
    29c4:	90 e0       	ldi	r25, 0x00	; 0
    29c6:	98 a3       	std	Y+32, r25	; 0x20
    29c8:	8f 8f       	std	Y+31, r24	; 0x1f
    29ca:	8f 8d       	ldd	r24, Y+31	; 0x1f
    29cc:	98 a1       	ldd	r25, Y+32	; 0x20
    29ce:	01 97       	sbiw	r24, 0x01	; 1
    29d0:	f1 f7       	brne	.-4      	; 0x29ce <HLCD_voidInit+0x2e6>
    29d2:	98 a3       	std	Y+32, r25	; 0x20
    29d4:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29d6:	89 a1       	ldd	r24, Y+33	; 0x21
    29d8:	9a a1       	ldd	r25, Y+34	; 0x22
    29da:	01 97       	sbiw	r24, 0x01	; 1
    29dc:	9a a3       	std	Y+34, r25	; 0x22
    29de:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29e0:	89 a1       	ldd	r24, Y+33	; 0x21
    29e2:	9a a1       	ldd	r25, Y+34	; 0x22
    29e4:	00 97       	sbiw	r24, 0x00	; 0
    29e6:	69 f7       	brne	.-38     	; 0x29c2 <HLCD_voidInit+0x2da>
    29e8:	14 c0       	rjmp	.+40     	; 0x2a12 <HLCD_voidInit+0x32a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29ea:	6b a1       	ldd	r22, Y+35	; 0x23
    29ec:	7c a1       	ldd	r23, Y+36	; 0x24
    29ee:	8d a1       	ldd	r24, Y+37	; 0x25
    29f0:	9e a1       	ldd	r25, Y+38	; 0x26
    29f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29f6:	dc 01       	movw	r26, r24
    29f8:	cb 01       	movw	r24, r22
    29fa:	9a a3       	std	Y+34, r25	; 0x22
    29fc:	89 a3       	std	Y+33, r24	; 0x21
    29fe:	89 a1       	ldd	r24, Y+33	; 0x21
    2a00:	9a a1       	ldd	r25, Y+34	; 0x22
    2a02:	9e 8f       	std	Y+30, r25	; 0x1e
    2a04:	8d 8f       	std	Y+29, r24	; 0x1d
    2a06:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2a08:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2a0a:	01 97       	sbiw	r24, 0x01	; 1
    2a0c:	f1 f7       	brne	.-4      	; 0x2a0a <HLCD_voidInit+0x322>
    2a0e:	9e 8f       	std	Y+30, r25	; 0x1e
    2a10:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);

	/* Clear Display and wait 2 ms*/
	HLCD_voidWriteCmd(0x01);
    2a12:	81 e0       	ldi	r24, 0x01	; 1
    2a14:	0e 94 ff 15 	call	0x2bfe	; 0x2bfe <HLCD_voidWriteCmd>
    2a18:	80 e0       	ldi	r24, 0x00	; 0
    2a1a:	90 e0       	ldi	r25, 0x00	; 0
    2a1c:	a0 e0       	ldi	r26, 0x00	; 0
    2a1e:	b0 e4       	ldi	r27, 0x40	; 64
    2a20:	89 8f       	std	Y+25, r24	; 0x19
    2a22:	9a 8f       	std	Y+26, r25	; 0x1a
    2a24:	ab 8f       	std	Y+27, r26	; 0x1b
    2a26:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a28:	69 8d       	ldd	r22, Y+25	; 0x19
    2a2a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2a2c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2a2e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2a30:	20 e0       	ldi	r18, 0x00	; 0
    2a32:	30 e0       	ldi	r19, 0x00	; 0
    2a34:	4a ef       	ldi	r20, 0xFA	; 250
    2a36:	54 e4       	ldi	r21, 0x44	; 68
    2a38:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a3c:	dc 01       	movw	r26, r24
    2a3e:	cb 01       	movw	r24, r22
    2a40:	8d 8b       	std	Y+21, r24	; 0x15
    2a42:	9e 8b       	std	Y+22, r25	; 0x16
    2a44:	af 8b       	std	Y+23, r26	; 0x17
    2a46:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2a48:	6d 89       	ldd	r22, Y+21	; 0x15
    2a4a:	7e 89       	ldd	r23, Y+22	; 0x16
    2a4c:	8f 89       	ldd	r24, Y+23	; 0x17
    2a4e:	98 8d       	ldd	r25, Y+24	; 0x18
    2a50:	20 e0       	ldi	r18, 0x00	; 0
    2a52:	30 e0       	ldi	r19, 0x00	; 0
    2a54:	40 e8       	ldi	r20, 0x80	; 128
    2a56:	5f e3       	ldi	r21, 0x3F	; 63
    2a58:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2a5c:	88 23       	and	r24, r24
    2a5e:	2c f4       	brge	.+10     	; 0x2a6a <HLCD_voidInit+0x382>
		__ticks = 1;
    2a60:	81 e0       	ldi	r24, 0x01	; 1
    2a62:	90 e0       	ldi	r25, 0x00	; 0
    2a64:	9c 8b       	std	Y+20, r25	; 0x14
    2a66:	8b 8b       	std	Y+19, r24	; 0x13
    2a68:	3f c0       	rjmp	.+126    	; 0x2ae8 <HLCD_voidInit+0x400>
	else if (__tmp > 65535)
    2a6a:	6d 89       	ldd	r22, Y+21	; 0x15
    2a6c:	7e 89       	ldd	r23, Y+22	; 0x16
    2a6e:	8f 89       	ldd	r24, Y+23	; 0x17
    2a70:	98 8d       	ldd	r25, Y+24	; 0x18
    2a72:	20 e0       	ldi	r18, 0x00	; 0
    2a74:	3f ef       	ldi	r19, 0xFF	; 255
    2a76:	4f e7       	ldi	r20, 0x7F	; 127
    2a78:	57 e4       	ldi	r21, 0x47	; 71
    2a7a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2a7e:	18 16       	cp	r1, r24
    2a80:	4c f5       	brge	.+82     	; 0x2ad4 <HLCD_voidInit+0x3ec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a82:	69 8d       	ldd	r22, Y+25	; 0x19
    2a84:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2a86:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2a88:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2a8a:	20 e0       	ldi	r18, 0x00	; 0
    2a8c:	30 e0       	ldi	r19, 0x00	; 0
    2a8e:	40 e2       	ldi	r20, 0x20	; 32
    2a90:	51 e4       	ldi	r21, 0x41	; 65
    2a92:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a96:	dc 01       	movw	r26, r24
    2a98:	cb 01       	movw	r24, r22
    2a9a:	bc 01       	movw	r22, r24
    2a9c:	cd 01       	movw	r24, r26
    2a9e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2aa2:	dc 01       	movw	r26, r24
    2aa4:	cb 01       	movw	r24, r22
    2aa6:	9c 8b       	std	Y+20, r25	; 0x14
    2aa8:	8b 8b       	std	Y+19, r24	; 0x13
    2aaa:	0f c0       	rjmp	.+30     	; 0x2aca <HLCD_voidInit+0x3e2>
    2aac:	88 ec       	ldi	r24, 0xC8	; 200
    2aae:	90 e0       	ldi	r25, 0x00	; 0
    2ab0:	9a 8b       	std	Y+18, r25	; 0x12
    2ab2:	89 8b       	std	Y+17, r24	; 0x11
    2ab4:	89 89       	ldd	r24, Y+17	; 0x11
    2ab6:	9a 89       	ldd	r25, Y+18	; 0x12
    2ab8:	01 97       	sbiw	r24, 0x01	; 1
    2aba:	f1 f7       	brne	.-4      	; 0x2ab8 <HLCD_voidInit+0x3d0>
    2abc:	9a 8b       	std	Y+18, r25	; 0x12
    2abe:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ac0:	8b 89       	ldd	r24, Y+19	; 0x13
    2ac2:	9c 89       	ldd	r25, Y+20	; 0x14
    2ac4:	01 97       	sbiw	r24, 0x01	; 1
    2ac6:	9c 8b       	std	Y+20, r25	; 0x14
    2ac8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2aca:	8b 89       	ldd	r24, Y+19	; 0x13
    2acc:	9c 89       	ldd	r25, Y+20	; 0x14
    2ace:	00 97       	sbiw	r24, 0x00	; 0
    2ad0:	69 f7       	brne	.-38     	; 0x2aac <HLCD_voidInit+0x3c4>
    2ad2:	14 c0       	rjmp	.+40     	; 0x2afc <HLCD_voidInit+0x414>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ad4:	6d 89       	ldd	r22, Y+21	; 0x15
    2ad6:	7e 89       	ldd	r23, Y+22	; 0x16
    2ad8:	8f 89       	ldd	r24, Y+23	; 0x17
    2ada:	98 8d       	ldd	r25, Y+24	; 0x18
    2adc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ae0:	dc 01       	movw	r26, r24
    2ae2:	cb 01       	movw	r24, r22
    2ae4:	9c 8b       	std	Y+20, r25	; 0x14
    2ae6:	8b 8b       	std	Y+19, r24	; 0x13
    2ae8:	8b 89       	ldd	r24, Y+19	; 0x13
    2aea:	9c 89       	ldd	r25, Y+20	; 0x14
    2aec:	98 8b       	std	Y+16, r25	; 0x10
    2aee:	8f 87       	std	Y+15, r24	; 0x0f
    2af0:	8f 85       	ldd	r24, Y+15	; 0x0f
    2af2:	98 89       	ldd	r25, Y+16	; 0x10
    2af4:	01 97       	sbiw	r24, 0x01	; 1
    2af6:	f1 f7       	brne	.-4      	; 0x2af4 <HLCD_voidInit+0x40c>
    2af8:	98 8b       	std	Y+16, r25	; 0x10
    2afa:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);

	/* Entry Mode Set */
	HLCD_voidWriteCmd(0x06);
    2afc:	86 e0       	ldi	r24, 0x06	; 6
    2afe:	0e 94 ff 15 	call	0x2bfe	; 0x2bfe <HLCD_voidWriteCmd>
    2b02:	80 e0       	ldi	r24, 0x00	; 0
    2b04:	90 e0       	ldi	r25, 0x00	; 0
    2b06:	a0 e0       	ldi	r26, 0x00	; 0
    2b08:	b0 e4       	ldi	r27, 0x40	; 64
    2b0a:	8b 87       	std	Y+11, r24	; 0x0b
    2b0c:	9c 87       	std	Y+12, r25	; 0x0c
    2b0e:	ad 87       	std	Y+13, r26	; 0x0d
    2b10:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b12:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b14:	7c 85       	ldd	r23, Y+12	; 0x0c
    2b16:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b18:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b1a:	20 e0       	ldi	r18, 0x00	; 0
    2b1c:	30 e0       	ldi	r19, 0x00	; 0
    2b1e:	4a ef       	ldi	r20, 0xFA	; 250
    2b20:	54 e4       	ldi	r21, 0x44	; 68
    2b22:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b26:	dc 01       	movw	r26, r24
    2b28:	cb 01       	movw	r24, r22
    2b2a:	8f 83       	std	Y+7, r24	; 0x07
    2b2c:	98 87       	std	Y+8, r25	; 0x08
    2b2e:	a9 87       	std	Y+9, r26	; 0x09
    2b30:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2b32:	6f 81       	ldd	r22, Y+7	; 0x07
    2b34:	78 85       	ldd	r23, Y+8	; 0x08
    2b36:	89 85       	ldd	r24, Y+9	; 0x09
    2b38:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b3a:	20 e0       	ldi	r18, 0x00	; 0
    2b3c:	30 e0       	ldi	r19, 0x00	; 0
    2b3e:	40 e8       	ldi	r20, 0x80	; 128
    2b40:	5f e3       	ldi	r21, 0x3F	; 63
    2b42:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2b46:	88 23       	and	r24, r24
    2b48:	2c f4       	brge	.+10     	; 0x2b54 <HLCD_voidInit+0x46c>
		__ticks = 1;
    2b4a:	81 e0       	ldi	r24, 0x01	; 1
    2b4c:	90 e0       	ldi	r25, 0x00	; 0
    2b4e:	9e 83       	std	Y+6, r25	; 0x06
    2b50:	8d 83       	std	Y+5, r24	; 0x05
    2b52:	3f c0       	rjmp	.+126    	; 0x2bd2 <HLCD_voidInit+0x4ea>
	else if (__tmp > 65535)
    2b54:	6f 81       	ldd	r22, Y+7	; 0x07
    2b56:	78 85       	ldd	r23, Y+8	; 0x08
    2b58:	89 85       	ldd	r24, Y+9	; 0x09
    2b5a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b5c:	20 e0       	ldi	r18, 0x00	; 0
    2b5e:	3f ef       	ldi	r19, 0xFF	; 255
    2b60:	4f e7       	ldi	r20, 0x7F	; 127
    2b62:	57 e4       	ldi	r21, 0x47	; 71
    2b64:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2b68:	18 16       	cp	r1, r24
    2b6a:	4c f5       	brge	.+82     	; 0x2bbe <HLCD_voidInit+0x4d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b6c:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b6e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2b70:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b72:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b74:	20 e0       	ldi	r18, 0x00	; 0
    2b76:	30 e0       	ldi	r19, 0x00	; 0
    2b78:	40 e2       	ldi	r20, 0x20	; 32
    2b7a:	51 e4       	ldi	r21, 0x41	; 65
    2b7c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b80:	dc 01       	movw	r26, r24
    2b82:	cb 01       	movw	r24, r22
    2b84:	bc 01       	movw	r22, r24
    2b86:	cd 01       	movw	r24, r26
    2b88:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b8c:	dc 01       	movw	r26, r24
    2b8e:	cb 01       	movw	r24, r22
    2b90:	9e 83       	std	Y+6, r25	; 0x06
    2b92:	8d 83       	std	Y+5, r24	; 0x05
    2b94:	0f c0       	rjmp	.+30     	; 0x2bb4 <HLCD_voidInit+0x4cc>
    2b96:	88 ec       	ldi	r24, 0xC8	; 200
    2b98:	90 e0       	ldi	r25, 0x00	; 0
    2b9a:	9c 83       	std	Y+4, r25	; 0x04
    2b9c:	8b 83       	std	Y+3, r24	; 0x03
    2b9e:	8b 81       	ldd	r24, Y+3	; 0x03
    2ba0:	9c 81       	ldd	r25, Y+4	; 0x04
    2ba2:	01 97       	sbiw	r24, 0x01	; 1
    2ba4:	f1 f7       	brne	.-4      	; 0x2ba2 <HLCD_voidInit+0x4ba>
    2ba6:	9c 83       	std	Y+4, r25	; 0x04
    2ba8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2baa:	8d 81       	ldd	r24, Y+5	; 0x05
    2bac:	9e 81       	ldd	r25, Y+6	; 0x06
    2bae:	01 97       	sbiw	r24, 0x01	; 1
    2bb0:	9e 83       	std	Y+6, r25	; 0x06
    2bb2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2bb4:	8d 81       	ldd	r24, Y+5	; 0x05
    2bb6:	9e 81       	ldd	r25, Y+6	; 0x06
    2bb8:	00 97       	sbiw	r24, 0x00	; 0
    2bba:	69 f7       	brne	.-38     	; 0x2b96 <HLCD_voidInit+0x4ae>
    2bbc:	14 c0       	rjmp	.+40     	; 0x2be6 <HLCD_voidInit+0x4fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2bbe:	6f 81       	ldd	r22, Y+7	; 0x07
    2bc0:	78 85       	ldd	r23, Y+8	; 0x08
    2bc2:	89 85       	ldd	r24, Y+9	; 0x09
    2bc4:	9a 85       	ldd	r25, Y+10	; 0x0a
    2bc6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bca:	dc 01       	movw	r26, r24
    2bcc:	cb 01       	movw	r24, r22
    2bce:	9e 83       	std	Y+6, r25	; 0x06
    2bd0:	8d 83       	std	Y+5, r24	; 0x05
    2bd2:	8d 81       	ldd	r24, Y+5	; 0x05
    2bd4:	9e 81       	ldd	r25, Y+6	; 0x06
    2bd6:	9a 83       	std	Y+2, r25	; 0x02
    2bd8:	89 83       	std	Y+1, r24	; 0x01
    2bda:	89 81       	ldd	r24, Y+1	; 0x01
    2bdc:	9a 81       	ldd	r25, Y+2	; 0x02
    2bde:	01 97       	sbiw	r24, 0x01	; 1
    2be0:	f1 f7       	brne	.-4      	; 0x2bde <HLCD_voidInit+0x4f6>
    2be2:	9a 83       	std	Y+2, r25	; 0x02
    2be4:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    2be6:	ca 5b       	subi	r28, 0xBA	; 186
    2be8:	df 4f       	sbci	r29, 0xFF	; 255
    2bea:	0f b6       	in	r0, 0x3f	; 63
    2bec:	f8 94       	cli
    2bee:	de bf       	out	0x3e, r29	; 62
    2bf0:	0f be       	out	0x3f, r0	; 63
    2bf2:	cd bf       	out	0x3d, r28	; 61
    2bf4:	cf 91       	pop	r28
    2bf6:	df 91       	pop	r29
    2bf8:	1f 91       	pop	r17
    2bfa:	0f 91       	pop	r16
    2bfc:	08 95       	ret

00002bfe <HLCD_voidWriteCmd>:


void HLCD_voidWriteCmd(u8 copy_u8Cmd)
{
    2bfe:	df 93       	push	r29
    2c00:	cf 93       	push	r28
    2c02:	cd b7       	in	r28, 0x3d	; 61
    2c04:	de b7       	in	r29, 0x3e	; 62
    2c06:	6d 97       	sbiw	r28, 0x1d	; 29
    2c08:	0f b6       	in	r0, 0x3f	; 63
    2c0a:	f8 94       	cli
    2c0c:	de bf       	out	0x3e, r29	; 62
    2c0e:	0f be       	out	0x3f, r0	; 63
    2c10:	cd bf       	out	0x3d, r28	; 61
    2c12:	8d 8f       	std	Y+29, r24	; 0x1d
	/*Set RS Pin to LOW*/
	MDIO_voidSetPinValue(RS_PIN,CONTROL_PORT,DIO_LOW);
    2c14:	80 e0       	ldi	r24, 0x00	; 0
    2c16:	62 e0       	ldi	r22, 0x02	; 2
    2c18:	40 e0       	ldi	r20, 0x00	; 0
    2c1a:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <MDIO_voidSetPinValue>
	/*Set RW Pin to LOW*/
	MDIO_voidSetPinValue(RW_PIN,CONTROL_PORT,DIO_LOW);
    2c1e:	81 e0       	ldi	r24, 0x01	; 1
    2c20:	62 e0       	ldi	r22, 0x02	; 2
    2c22:	40 e0       	ldi	r20, 0x00	; 0
    2c24:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <MDIO_voidSetPinValue>
	/*Set E Pin to LOW*/
	MDIO_voidSetPinValue(E_PIN,CONTROL_PORT,DIO_LOW);
	/* Wait for E to settle */
	_delay_ms(5);
	#elif LCD_MODE == _4Bit_Mode
	MDIO_voidSetPinValue(D4_PIN,DATA_PORT,GET_BIT(copy_u8Cmd,4));
    2c28:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2c2a:	82 95       	swap	r24
    2c2c:	8f 70       	andi	r24, 0x0F	; 15
    2c2e:	98 2f       	mov	r25, r24
    2c30:	91 70       	andi	r25, 0x01	; 1
    2c32:	84 e0       	ldi	r24, 0x04	; 4
    2c34:	62 e0       	ldi	r22, 0x02	; 2
    2c36:	49 2f       	mov	r20, r25
    2c38:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(D5_PIN,DATA_PORT,GET_BIT(copy_u8Cmd,5));
    2c3c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2c3e:	82 95       	swap	r24
    2c40:	86 95       	lsr	r24
    2c42:	87 70       	andi	r24, 0x07	; 7
    2c44:	98 2f       	mov	r25, r24
    2c46:	91 70       	andi	r25, 0x01	; 1
    2c48:	85 e0       	ldi	r24, 0x05	; 5
    2c4a:	62 e0       	ldi	r22, 0x02	; 2
    2c4c:	49 2f       	mov	r20, r25
    2c4e:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(D6_PIN,DATA_PORT,GET_BIT(copy_u8Cmd,6));
    2c52:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2c54:	82 95       	swap	r24
    2c56:	86 95       	lsr	r24
    2c58:	86 95       	lsr	r24
    2c5a:	83 70       	andi	r24, 0x03	; 3
    2c5c:	98 2f       	mov	r25, r24
    2c5e:	91 70       	andi	r25, 0x01	; 1
    2c60:	86 e0       	ldi	r24, 0x06	; 6
    2c62:	62 e0       	ldi	r22, 0x02	; 2
    2c64:	49 2f       	mov	r20, r25
    2c66:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(D7_PIN,DATA_PORT,GET_BIT(copy_u8Cmd,7));
    2c6a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2c6c:	98 2f       	mov	r25, r24
    2c6e:	99 1f       	adc	r25, r25
    2c70:	99 27       	eor	r25, r25
    2c72:	99 1f       	adc	r25, r25
    2c74:	87 e0       	ldi	r24, 0x07	; 7
    2c76:	62 e0       	ldi	r22, 0x02	; 2
    2c78:	49 2f       	mov	r20, r25
    2c7a:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <MDIO_voidSetPinValue>

	/*Set E Pin to HIGH*/
	MDIO_voidSetPinValue(E_PIN,CONTROL_PORT,DIO_HIGH);
    2c7e:	82 e0       	ldi	r24, 0x02	; 2
    2c80:	62 e0       	ldi	r22, 0x02	; 2
    2c82:	41 e0       	ldi	r20, 0x01	; 1
    2c84:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <MDIO_voidSetPinValue>
	/*Set E Pin to LOW*/
	MDIO_voidSetPinValue(E_PIN,CONTROL_PORT,DIO_LOW);
    2c88:	82 e0       	ldi	r24, 0x02	; 2
    2c8a:	62 e0       	ldi	r22, 0x02	; 2
    2c8c:	40 e0       	ldi	r20, 0x00	; 0
    2c8e:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <MDIO_voidSetPinValue>
    2c92:	80 e0       	ldi	r24, 0x00	; 0
    2c94:	90 e0       	ldi	r25, 0x00	; 0
    2c96:	a0 ea       	ldi	r26, 0xA0	; 160
    2c98:	b0 e4       	ldi	r27, 0x40	; 64
    2c9a:	89 8f       	std	Y+25, r24	; 0x19
    2c9c:	9a 8f       	std	Y+26, r25	; 0x1a
    2c9e:	ab 8f       	std	Y+27, r26	; 0x1b
    2ca0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ca2:	69 8d       	ldd	r22, Y+25	; 0x19
    2ca4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2ca6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2ca8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2caa:	20 e0       	ldi	r18, 0x00	; 0
    2cac:	30 e0       	ldi	r19, 0x00	; 0
    2cae:	4a ef       	ldi	r20, 0xFA	; 250
    2cb0:	54 e4       	ldi	r21, 0x44	; 68
    2cb2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cb6:	dc 01       	movw	r26, r24
    2cb8:	cb 01       	movw	r24, r22
    2cba:	8d 8b       	std	Y+21, r24	; 0x15
    2cbc:	9e 8b       	std	Y+22, r25	; 0x16
    2cbe:	af 8b       	std	Y+23, r26	; 0x17
    2cc0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2cc2:	6d 89       	ldd	r22, Y+21	; 0x15
    2cc4:	7e 89       	ldd	r23, Y+22	; 0x16
    2cc6:	8f 89       	ldd	r24, Y+23	; 0x17
    2cc8:	98 8d       	ldd	r25, Y+24	; 0x18
    2cca:	20 e0       	ldi	r18, 0x00	; 0
    2ccc:	30 e0       	ldi	r19, 0x00	; 0
    2cce:	40 e8       	ldi	r20, 0x80	; 128
    2cd0:	5f e3       	ldi	r21, 0x3F	; 63
    2cd2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2cd6:	88 23       	and	r24, r24
    2cd8:	2c f4       	brge	.+10     	; 0x2ce4 <HLCD_voidWriteCmd+0xe6>
		__ticks = 1;
    2cda:	81 e0       	ldi	r24, 0x01	; 1
    2cdc:	90 e0       	ldi	r25, 0x00	; 0
    2cde:	9c 8b       	std	Y+20, r25	; 0x14
    2ce0:	8b 8b       	std	Y+19, r24	; 0x13
    2ce2:	3f c0       	rjmp	.+126    	; 0x2d62 <HLCD_voidWriteCmd+0x164>
	else if (__tmp > 65535)
    2ce4:	6d 89       	ldd	r22, Y+21	; 0x15
    2ce6:	7e 89       	ldd	r23, Y+22	; 0x16
    2ce8:	8f 89       	ldd	r24, Y+23	; 0x17
    2cea:	98 8d       	ldd	r25, Y+24	; 0x18
    2cec:	20 e0       	ldi	r18, 0x00	; 0
    2cee:	3f ef       	ldi	r19, 0xFF	; 255
    2cf0:	4f e7       	ldi	r20, 0x7F	; 127
    2cf2:	57 e4       	ldi	r21, 0x47	; 71
    2cf4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2cf8:	18 16       	cp	r1, r24
    2cfa:	4c f5       	brge	.+82     	; 0x2d4e <HLCD_voidWriteCmd+0x150>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2cfc:	69 8d       	ldd	r22, Y+25	; 0x19
    2cfe:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2d00:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2d02:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2d04:	20 e0       	ldi	r18, 0x00	; 0
    2d06:	30 e0       	ldi	r19, 0x00	; 0
    2d08:	40 e2       	ldi	r20, 0x20	; 32
    2d0a:	51 e4       	ldi	r21, 0x41	; 65
    2d0c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d10:	dc 01       	movw	r26, r24
    2d12:	cb 01       	movw	r24, r22
    2d14:	bc 01       	movw	r22, r24
    2d16:	cd 01       	movw	r24, r26
    2d18:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d1c:	dc 01       	movw	r26, r24
    2d1e:	cb 01       	movw	r24, r22
    2d20:	9c 8b       	std	Y+20, r25	; 0x14
    2d22:	8b 8b       	std	Y+19, r24	; 0x13
    2d24:	0f c0       	rjmp	.+30     	; 0x2d44 <HLCD_voidWriteCmd+0x146>
    2d26:	88 ec       	ldi	r24, 0xC8	; 200
    2d28:	90 e0       	ldi	r25, 0x00	; 0
    2d2a:	9a 8b       	std	Y+18, r25	; 0x12
    2d2c:	89 8b       	std	Y+17, r24	; 0x11
    2d2e:	89 89       	ldd	r24, Y+17	; 0x11
    2d30:	9a 89       	ldd	r25, Y+18	; 0x12
    2d32:	01 97       	sbiw	r24, 0x01	; 1
    2d34:	f1 f7       	brne	.-4      	; 0x2d32 <HLCD_voidWriteCmd+0x134>
    2d36:	9a 8b       	std	Y+18, r25	; 0x12
    2d38:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d3a:	8b 89       	ldd	r24, Y+19	; 0x13
    2d3c:	9c 89       	ldd	r25, Y+20	; 0x14
    2d3e:	01 97       	sbiw	r24, 0x01	; 1
    2d40:	9c 8b       	std	Y+20, r25	; 0x14
    2d42:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d44:	8b 89       	ldd	r24, Y+19	; 0x13
    2d46:	9c 89       	ldd	r25, Y+20	; 0x14
    2d48:	00 97       	sbiw	r24, 0x00	; 0
    2d4a:	69 f7       	brne	.-38     	; 0x2d26 <HLCD_voidWriteCmd+0x128>
    2d4c:	14 c0       	rjmp	.+40     	; 0x2d76 <HLCD_voidWriteCmd+0x178>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d4e:	6d 89       	ldd	r22, Y+21	; 0x15
    2d50:	7e 89       	ldd	r23, Y+22	; 0x16
    2d52:	8f 89       	ldd	r24, Y+23	; 0x17
    2d54:	98 8d       	ldd	r25, Y+24	; 0x18
    2d56:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d5a:	dc 01       	movw	r26, r24
    2d5c:	cb 01       	movw	r24, r22
    2d5e:	9c 8b       	std	Y+20, r25	; 0x14
    2d60:	8b 8b       	std	Y+19, r24	; 0x13
    2d62:	8b 89       	ldd	r24, Y+19	; 0x13
    2d64:	9c 89       	ldd	r25, Y+20	; 0x14
    2d66:	98 8b       	std	Y+16, r25	; 0x10
    2d68:	8f 87       	std	Y+15, r24	; 0x0f
    2d6a:	8f 85       	ldd	r24, Y+15	; 0x0f
    2d6c:	98 89       	ldd	r25, Y+16	; 0x10
    2d6e:	01 97       	sbiw	r24, 0x01	; 1
    2d70:	f1 f7       	brne	.-4      	; 0x2d6e <HLCD_voidWriteCmd+0x170>
    2d72:	98 8b       	std	Y+16, r25	; 0x10
    2d74:	8f 87       	std	Y+15, r24	; 0x0f
	/* Wait for E to settle */
	_delay_ms(5);

	MDIO_voidSetPinValue(D4_PIN,DATA_PORT,GET_BIT(copy_u8Cmd,0));
    2d76:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2d78:	98 2f       	mov	r25, r24
    2d7a:	91 70       	andi	r25, 0x01	; 1
    2d7c:	84 e0       	ldi	r24, 0x04	; 4
    2d7e:	62 e0       	ldi	r22, 0x02	; 2
    2d80:	49 2f       	mov	r20, r25
    2d82:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(D5_PIN,DATA_PORT,GET_BIT(copy_u8Cmd,1));
    2d86:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2d88:	86 95       	lsr	r24
    2d8a:	98 2f       	mov	r25, r24
    2d8c:	91 70       	andi	r25, 0x01	; 1
    2d8e:	85 e0       	ldi	r24, 0x05	; 5
    2d90:	62 e0       	ldi	r22, 0x02	; 2
    2d92:	49 2f       	mov	r20, r25
    2d94:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(D6_PIN,DATA_PORT,GET_BIT(copy_u8Cmd,2));
    2d98:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2d9a:	86 95       	lsr	r24
    2d9c:	86 95       	lsr	r24
    2d9e:	98 2f       	mov	r25, r24
    2da0:	91 70       	andi	r25, 0x01	; 1
    2da2:	86 e0       	ldi	r24, 0x06	; 6
    2da4:	62 e0       	ldi	r22, 0x02	; 2
    2da6:	49 2f       	mov	r20, r25
    2da8:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(D7_PIN,DATA_PORT,GET_BIT(copy_u8Cmd,3));
    2dac:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2dae:	86 95       	lsr	r24
    2db0:	86 95       	lsr	r24
    2db2:	86 95       	lsr	r24
    2db4:	98 2f       	mov	r25, r24
    2db6:	91 70       	andi	r25, 0x01	; 1
    2db8:	87 e0       	ldi	r24, 0x07	; 7
    2dba:	62 e0       	ldi	r22, 0x02	; 2
    2dbc:	49 2f       	mov	r20, r25
    2dbe:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <MDIO_voidSetPinValue>

	/*Set E Pin to HIGH*/
	MDIO_voidSetPinValue(E_PIN,CONTROL_PORT,DIO_HIGH);
    2dc2:	82 e0       	ldi	r24, 0x02	; 2
    2dc4:	62 e0       	ldi	r22, 0x02	; 2
    2dc6:	41 e0       	ldi	r20, 0x01	; 1
    2dc8:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <MDIO_voidSetPinValue>
	/*Set E Pin to LOW*/
	MDIO_voidSetPinValue(E_PIN,CONTROL_PORT,DIO_LOW);
    2dcc:	82 e0       	ldi	r24, 0x02	; 2
    2dce:	62 e0       	ldi	r22, 0x02	; 2
    2dd0:	40 e0       	ldi	r20, 0x00	; 0
    2dd2:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <MDIO_voidSetPinValue>
    2dd6:	80 e0       	ldi	r24, 0x00	; 0
    2dd8:	90 e0       	ldi	r25, 0x00	; 0
    2dda:	a0 ea       	ldi	r26, 0xA0	; 160
    2ddc:	b0 e4       	ldi	r27, 0x40	; 64
    2dde:	8b 87       	std	Y+11, r24	; 0x0b
    2de0:	9c 87       	std	Y+12, r25	; 0x0c
    2de2:	ad 87       	std	Y+13, r26	; 0x0d
    2de4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2de6:	6b 85       	ldd	r22, Y+11	; 0x0b
    2de8:	7c 85       	ldd	r23, Y+12	; 0x0c
    2dea:	8d 85       	ldd	r24, Y+13	; 0x0d
    2dec:	9e 85       	ldd	r25, Y+14	; 0x0e
    2dee:	20 e0       	ldi	r18, 0x00	; 0
    2df0:	30 e0       	ldi	r19, 0x00	; 0
    2df2:	4a ef       	ldi	r20, 0xFA	; 250
    2df4:	54 e4       	ldi	r21, 0x44	; 68
    2df6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2dfa:	dc 01       	movw	r26, r24
    2dfc:	cb 01       	movw	r24, r22
    2dfe:	8f 83       	std	Y+7, r24	; 0x07
    2e00:	98 87       	std	Y+8, r25	; 0x08
    2e02:	a9 87       	std	Y+9, r26	; 0x09
    2e04:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2e06:	6f 81       	ldd	r22, Y+7	; 0x07
    2e08:	78 85       	ldd	r23, Y+8	; 0x08
    2e0a:	89 85       	ldd	r24, Y+9	; 0x09
    2e0c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e0e:	20 e0       	ldi	r18, 0x00	; 0
    2e10:	30 e0       	ldi	r19, 0x00	; 0
    2e12:	40 e8       	ldi	r20, 0x80	; 128
    2e14:	5f e3       	ldi	r21, 0x3F	; 63
    2e16:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2e1a:	88 23       	and	r24, r24
    2e1c:	2c f4       	brge	.+10     	; 0x2e28 <HLCD_voidWriteCmd+0x22a>
		__ticks = 1;
    2e1e:	81 e0       	ldi	r24, 0x01	; 1
    2e20:	90 e0       	ldi	r25, 0x00	; 0
    2e22:	9e 83       	std	Y+6, r25	; 0x06
    2e24:	8d 83       	std	Y+5, r24	; 0x05
    2e26:	3f c0       	rjmp	.+126    	; 0x2ea6 <HLCD_voidWriteCmd+0x2a8>
	else if (__tmp > 65535)
    2e28:	6f 81       	ldd	r22, Y+7	; 0x07
    2e2a:	78 85       	ldd	r23, Y+8	; 0x08
    2e2c:	89 85       	ldd	r24, Y+9	; 0x09
    2e2e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e30:	20 e0       	ldi	r18, 0x00	; 0
    2e32:	3f ef       	ldi	r19, 0xFF	; 255
    2e34:	4f e7       	ldi	r20, 0x7F	; 127
    2e36:	57 e4       	ldi	r21, 0x47	; 71
    2e38:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2e3c:	18 16       	cp	r1, r24
    2e3e:	4c f5       	brge	.+82     	; 0x2e92 <HLCD_voidWriteCmd+0x294>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e40:	6b 85       	ldd	r22, Y+11	; 0x0b
    2e42:	7c 85       	ldd	r23, Y+12	; 0x0c
    2e44:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e46:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e48:	20 e0       	ldi	r18, 0x00	; 0
    2e4a:	30 e0       	ldi	r19, 0x00	; 0
    2e4c:	40 e2       	ldi	r20, 0x20	; 32
    2e4e:	51 e4       	ldi	r21, 0x41	; 65
    2e50:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e54:	dc 01       	movw	r26, r24
    2e56:	cb 01       	movw	r24, r22
    2e58:	bc 01       	movw	r22, r24
    2e5a:	cd 01       	movw	r24, r26
    2e5c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e60:	dc 01       	movw	r26, r24
    2e62:	cb 01       	movw	r24, r22
    2e64:	9e 83       	std	Y+6, r25	; 0x06
    2e66:	8d 83       	std	Y+5, r24	; 0x05
    2e68:	0f c0       	rjmp	.+30     	; 0x2e88 <HLCD_voidWriteCmd+0x28a>
    2e6a:	88 ec       	ldi	r24, 0xC8	; 200
    2e6c:	90 e0       	ldi	r25, 0x00	; 0
    2e6e:	9c 83       	std	Y+4, r25	; 0x04
    2e70:	8b 83       	std	Y+3, r24	; 0x03
    2e72:	8b 81       	ldd	r24, Y+3	; 0x03
    2e74:	9c 81       	ldd	r25, Y+4	; 0x04
    2e76:	01 97       	sbiw	r24, 0x01	; 1
    2e78:	f1 f7       	brne	.-4      	; 0x2e76 <HLCD_voidWriteCmd+0x278>
    2e7a:	9c 83       	std	Y+4, r25	; 0x04
    2e7c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e7e:	8d 81       	ldd	r24, Y+5	; 0x05
    2e80:	9e 81       	ldd	r25, Y+6	; 0x06
    2e82:	01 97       	sbiw	r24, 0x01	; 1
    2e84:	9e 83       	std	Y+6, r25	; 0x06
    2e86:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e88:	8d 81       	ldd	r24, Y+5	; 0x05
    2e8a:	9e 81       	ldd	r25, Y+6	; 0x06
    2e8c:	00 97       	sbiw	r24, 0x00	; 0
    2e8e:	69 f7       	brne	.-38     	; 0x2e6a <HLCD_voidWriteCmd+0x26c>
    2e90:	14 c0       	rjmp	.+40     	; 0x2eba <HLCD_voidWriteCmd+0x2bc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e92:	6f 81       	ldd	r22, Y+7	; 0x07
    2e94:	78 85       	ldd	r23, Y+8	; 0x08
    2e96:	89 85       	ldd	r24, Y+9	; 0x09
    2e98:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e9a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e9e:	dc 01       	movw	r26, r24
    2ea0:	cb 01       	movw	r24, r22
    2ea2:	9e 83       	std	Y+6, r25	; 0x06
    2ea4:	8d 83       	std	Y+5, r24	; 0x05
    2ea6:	8d 81       	ldd	r24, Y+5	; 0x05
    2ea8:	9e 81       	ldd	r25, Y+6	; 0x06
    2eaa:	9a 83       	std	Y+2, r25	; 0x02
    2eac:	89 83       	std	Y+1, r24	; 0x01
    2eae:	89 81       	ldd	r24, Y+1	; 0x01
    2eb0:	9a 81       	ldd	r25, Y+2	; 0x02
    2eb2:	01 97       	sbiw	r24, 0x01	; 1
    2eb4:	f1 f7       	brne	.-4      	; 0x2eb2 <HLCD_voidWriteCmd+0x2b4>
    2eb6:	9a 83       	std	Y+2, r25	; 0x02
    2eb8:	89 83       	std	Y+1, r24	; 0x01
	/* Wait for E to settle */
	_delay_ms(5);
	#endif

}
    2eba:	6d 96       	adiw	r28, 0x1d	; 29
    2ebc:	0f b6       	in	r0, 0x3f	; 63
    2ebe:	f8 94       	cli
    2ec0:	de bf       	out	0x3e, r29	; 62
    2ec2:	0f be       	out	0x3f, r0	; 63
    2ec4:	cd bf       	out	0x3d, r28	; 61
    2ec6:	cf 91       	pop	r28
    2ec8:	df 91       	pop	r29
    2eca:	08 95       	ret

00002ecc <HLCD_voidWriteChracter>:

void HLCD_voidWriteChracter(u8 copy_u8Chr)
{
    2ecc:	df 93       	push	r29
    2ece:	cf 93       	push	r28
    2ed0:	cd b7       	in	r28, 0x3d	; 61
    2ed2:	de b7       	in	r29, 0x3e	; 62
    2ed4:	6d 97       	sbiw	r28, 0x1d	; 29
    2ed6:	0f b6       	in	r0, 0x3f	; 63
    2ed8:	f8 94       	cli
    2eda:	de bf       	out	0x3e, r29	; 62
    2edc:	0f be       	out	0x3f, r0	; 63
    2ede:	cd bf       	out	0x3d, r28	; 61
    2ee0:	8d 8f       	std	Y+29, r24	; 0x1d
	/*Set RS Pin to HIGH*/
	MDIO_voidSetPinValue(RS_PIN,CONTROL_PORT,DIO_HIGH);
    2ee2:	80 e0       	ldi	r24, 0x00	; 0
    2ee4:	62 e0       	ldi	r22, 0x02	; 2
    2ee6:	41 e0       	ldi	r20, 0x01	; 1
    2ee8:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <MDIO_voidSetPinValue>
	/*Set RW Pin to LOW*/
	MDIO_voidSetPinValue(RW_PIN,CONTROL_PORT,DIO_LOW);
    2eec:	81 e0       	ldi	r24, 0x01	; 1
    2eee:	62 e0       	ldi	r22, 0x02	; 2
    2ef0:	40 e0       	ldi	r20, 0x00	; 0
    2ef2:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(E_PIN,CONTROL_PORT,DIO_LOW);
	/* Wait for E to settle */
	_delay_ms(5);
	
	#elif LCD_MODE == _4Bit_Mode
	MDIO_voidSetPinValue(D4_PIN,DATA_PORT,GET_BIT(copy_u8Chr,4));
    2ef6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2ef8:	82 95       	swap	r24
    2efa:	8f 70       	andi	r24, 0x0F	; 15
    2efc:	98 2f       	mov	r25, r24
    2efe:	91 70       	andi	r25, 0x01	; 1
    2f00:	84 e0       	ldi	r24, 0x04	; 4
    2f02:	62 e0       	ldi	r22, 0x02	; 2
    2f04:	49 2f       	mov	r20, r25
    2f06:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(D5_PIN,DATA_PORT,GET_BIT(copy_u8Chr,5));
    2f0a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2f0c:	82 95       	swap	r24
    2f0e:	86 95       	lsr	r24
    2f10:	87 70       	andi	r24, 0x07	; 7
    2f12:	98 2f       	mov	r25, r24
    2f14:	91 70       	andi	r25, 0x01	; 1
    2f16:	85 e0       	ldi	r24, 0x05	; 5
    2f18:	62 e0       	ldi	r22, 0x02	; 2
    2f1a:	49 2f       	mov	r20, r25
    2f1c:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(D6_PIN,DATA_PORT,GET_BIT(copy_u8Chr,6));
    2f20:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2f22:	82 95       	swap	r24
    2f24:	86 95       	lsr	r24
    2f26:	86 95       	lsr	r24
    2f28:	83 70       	andi	r24, 0x03	; 3
    2f2a:	98 2f       	mov	r25, r24
    2f2c:	91 70       	andi	r25, 0x01	; 1
    2f2e:	86 e0       	ldi	r24, 0x06	; 6
    2f30:	62 e0       	ldi	r22, 0x02	; 2
    2f32:	49 2f       	mov	r20, r25
    2f34:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(D7_PIN,DATA_PORT,GET_BIT(copy_u8Chr,7));
    2f38:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2f3a:	98 2f       	mov	r25, r24
    2f3c:	99 1f       	adc	r25, r25
    2f3e:	99 27       	eor	r25, r25
    2f40:	99 1f       	adc	r25, r25
    2f42:	87 e0       	ldi	r24, 0x07	; 7
    2f44:	62 e0       	ldi	r22, 0x02	; 2
    2f46:	49 2f       	mov	r20, r25
    2f48:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <MDIO_voidSetPinValue>
	
	/*Set E Pin to HIGH*/
	MDIO_voidSetPinValue(E_PIN,CONTROL_PORT,DIO_HIGH);
    2f4c:	82 e0       	ldi	r24, 0x02	; 2
    2f4e:	62 e0       	ldi	r22, 0x02	; 2
    2f50:	41 e0       	ldi	r20, 0x01	; 1
    2f52:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <MDIO_voidSetPinValue>
	/*Set E Pin to LOW*/
	MDIO_voidSetPinValue(E_PIN,CONTROL_PORT,DIO_LOW);
    2f56:	82 e0       	ldi	r24, 0x02	; 2
    2f58:	62 e0       	ldi	r22, 0x02	; 2
    2f5a:	40 e0       	ldi	r20, 0x00	; 0
    2f5c:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <MDIO_voidSetPinValue>
    2f60:	80 e0       	ldi	r24, 0x00	; 0
    2f62:	90 e0       	ldi	r25, 0x00	; 0
    2f64:	a0 ea       	ldi	r26, 0xA0	; 160
    2f66:	b0 e4       	ldi	r27, 0x40	; 64
    2f68:	89 8f       	std	Y+25, r24	; 0x19
    2f6a:	9a 8f       	std	Y+26, r25	; 0x1a
    2f6c:	ab 8f       	std	Y+27, r26	; 0x1b
    2f6e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f70:	69 8d       	ldd	r22, Y+25	; 0x19
    2f72:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2f74:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2f76:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2f78:	20 e0       	ldi	r18, 0x00	; 0
    2f7a:	30 e0       	ldi	r19, 0x00	; 0
    2f7c:	4a ef       	ldi	r20, 0xFA	; 250
    2f7e:	54 e4       	ldi	r21, 0x44	; 68
    2f80:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f84:	dc 01       	movw	r26, r24
    2f86:	cb 01       	movw	r24, r22
    2f88:	8d 8b       	std	Y+21, r24	; 0x15
    2f8a:	9e 8b       	std	Y+22, r25	; 0x16
    2f8c:	af 8b       	std	Y+23, r26	; 0x17
    2f8e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2f90:	6d 89       	ldd	r22, Y+21	; 0x15
    2f92:	7e 89       	ldd	r23, Y+22	; 0x16
    2f94:	8f 89       	ldd	r24, Y+23	; 0x17
    2f96:	98 8d       	ldd	r25, Y+24	; 0x18
    2f98:	20 e0       	ldi	r18, 0x00	; 0
    2f9a:	30 e0       	ldi	r19, 0x00	; 0
    2f9c:	40 e8       	ldi	r20, 0x80	; 128
    2f9e:	5f e3       	ldi	r21, 0x3F	; 63
    2fa0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2fa4:	88 23       	and	r24, r24
    2fa6:	2c f4       	brge	.+10     	; 0x2fb2 <HLCD_voidWriteChracter+0xe6>
		__ticks = 1;
    2fa8:	81 e0       	ldi	r24, 0x01	; 1
    2faa:	90 e0       	ldi	r25, 0x00	; 0
    2fac:	9c 8b       	std	Y+20, r25	; 0x14
    2fae:	8b 8b       	std	Y+19, r24	; 0x13
    2fb0:	3f c0       	rjmp	.+126    	; 0x3030 <HLCD_voidWriteChracter+0x164>
	else if (__tmp > 65535)
    2fb2:	6d 89       	ldd	r22, Y+21	; 0x15
    2fb4:	7e 89       	ldd	r23, Y+22	; 0x16
    2fb6:	8f 89       	ldd	r24, Y+23	; 0x17
    2fb8:	98 8d       	ldd	r25, Y+24	; 0x18
    2fba:	20 e0       	ldi	r18, 0x00	; 0
    2fbc:	3f ef       	ldi	r19, 0xFF	; 255
    2fbe:	4f e7       	ldi	r20, 0x7F	; 127
    2fc0:	57 e4       	ldi	r21, 0x47	; 71
    2fc2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2fc6:	18 16       	cp	r1, r24
    2fc8:	4c f5       	brge	.+82     	; 0x301c <HLCD_voidWriteChracter+0x150>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2fca:	69 8d       	ldd	r22, Y+25	; 0x19
    2fcc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2fce:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2fd0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2fd2:	20 e0       	ldi	r18, 0x00	; 0
    2fd4:	30 e0       	ldi	r19, 0x00	; 0
    2fd6:	40 e2       	ldi	r20, 0x20	; 32
    2fd8:	51 e4       	ldi	r21, 0x41	; 65
    2fda:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fde:	dc 01       	movw	r26, r24
    2fe0:	cb 01       	movw	r24, r22
    2fe2:	bc 01       	movw	r22, r24
    2fe4:	cd 01       	movw	r24, r26
    2fe6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fea:	dc 01       	movw	r26, r24
    2fec:	cb 01       	movw	r24, r22
    2fee:	9c 8b       	std	Y+20, r25	; 0x14
    2ff0:	8b 8b       	std	Y+19, r24	; 0x13
    2ff2:	0f c0       	rjmp	.+30     	; 0x3012 <HLCD_voidWriteChracter+0x146>
    2ff4:	88 ec       	ldi	r24, 0xC8	; 200
    2ff6:	90 e0       	ldi	r25, 0x00	; 0
    2ff8:	9a 8b       	std	Y+18, r25	; 0x12
    2ffa:	89 8b       	std	Y+17, r24	; 0x11
    2ffc:	89 89       	ldd	r24, Y+17	; 0x11
    2ffe:	9a 89       	ldd	r25, Y+18	; 0x12
    3000:	01 97       	sbiw	r24, 0x01	; 1
    3002:	f1 f7       	brne	.-4      	; 0x3000 <HLCD_voidWriteChracter+0x134>
    3004:	9a 8b       	std	Y+18, r25	; 0x12
    3006:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3008:	8b 89       	ldd	r24, Y+19	; 0x13
    300a:	9c 89       	ldd	r25, Y+20	; 0x14
    300c:	01 97       	sbiw	r24, 0x01	; 1
    300e:	9c 8b       	std	Y+20, r25	; 0x14
    3010:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3012:	8b 89       	ldd	r24, Y+19	; 0x13
    3014:	9c 89       	ldd	r25, Y+20	; 0x14
    3016:	00 97       	sbiw	r24, 0x00	; 0
    3018:	69 f7       	brne	.-38     	; 0x2ff4 <HLCD_voidWriteChracter+0x128>
    301a:	14 c0       	rjmp	.+40     	; 0x3044 <HLCD_voidWriteChracter+0x178>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    301c:	6d 89       	ldd	r22, Y+21	; 0x15
    301e:	7e 89       	ldd	r23, Y+22	; 0x16
    3020:	8f 89       	ldd	r24, Y+23	; 0x17
    3022:	98 8d       	ldd	r25, Y+24	; 0x18
    3024:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3028:	dc 01       	movw	r26, r24
    302a:	cb 01       	movw	r24, r22
    302c:	9c 8b       	std	Y+20, r25	; 0x14
    302e:	8b 8b       	std	Y+19, r24	; 0x13
    3030:	8b 89       	ldd	r24, Y+19	; 0x13
    3032:	9c 89       	ldd	r25, Y+20	; 0x14
    3034:	98 8b       	std	Y+16, r25	; 0x10
    3036:	8f 87       	std	Y+15, r24	; 0x0f
    3038:	8f 85       	ldd	r24, Y+15	; 0x0f
    303a:	98 89       	ldd	r25, Y+16	; 0x10
    303c:	01 97       	sbiw	r24, 0x01	; 1
    303e:	f1 f7       	brne	.-4      	; 0x303c <HLCD_voidWriteChracter+0x170>
    3040:	98 8b       	std	Y+16, r25	; 0x10
    3042:	8f 87       	std	Y+15, r24	; 0x0f
	/* Wait for E to settle */
	_delay_ms(5);
	
	MDIO_voidSetPinValue(D4_PIN,DATA_PORT,GET_BIT(copy_u8Chr,0));
    3044:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3046:	98 2f       	mov	r25, r24
    3048:	91 70       	andi	r25, 0x01	; 1
    304a:	84 e0       	ldi	r24, 0x04	; 4
    304c:	62 e0       	ldi	r22, 0x02	; 2
    304e:	49 2f       	mov	r20, r25
    3050:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(D5_PIN,DATA_PORT,GET_BIT(copy_u8Chr,1));
    3054:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3056:	86 95       	lsr	r24
    3058:	98 2f       	mov	r25, r24
    305a:	91 70       	andi	r25, 0x01	; 1
    305c:	85 e0       	ldi	r24, 0x05	; 5
    305e:	62 e0       	ldi	r22, 0x02	; 2
    3060:	49 2f       	mov	r20, r25
    3062:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(D6_PIN,DATA_PORT,GET_BIT(copy_u8Chr,2));
    3066:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3068:	86 95       	lsr	r24
    306a:	86 95       	lsr	r24
    306c:	98 2f       	mov	r25, r24
    306e:	91 70       	andi	r25, 0x01	; 1
    3070:	86 e0       	ldi	r24, 0x06	; 6
    3072:	62 e0       	ldi	r22, 0x02	; 2
    3074:	49 2f       	mov	r20, r25
    3076:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(D7_PIN,DATA_PORT,GET_BIT(copy_u8Chr,3));
    307a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    307c:	86 95       	lsr	r24
    307e:	86 95       	lsr	r24
    3080:	86 95       	lsr	r24
    3082:	98 2f       	mov	r25, r24
    3084:	91 70       	andi	r25, 0x01	; 1
    3086:	87 e0       	ldi	r24, 0x07	; 7
    3088:	62 e0       	ldi	r22, 0x02	; 2
    308a:	49 2f       	mov	r20, r25
    308c:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <MDIO_voidSetPinValue>
	
	/*Set E Pin to HIGH*/
	MDIO_voidSetPinValue(E_PIN,CONTROL_PORT,DIO_HIGH);
    3090:	82 e0       	ldi	r24, 0x02	; 2
    3092:	62 e0       	ldi	r22, 0x02	; 2
    3094:	41 e0       	ldi	r20, 0x01	; 1
    3096:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <MDIO_voidSetPinValue>
	/*Set E Pin to LOW*/
	MDIO_voidSetPinValue(E_PIN,CONTROL_PORT,DIO_LOW);
    309a:	82 e0       	ldi	r24, 0x02	; 2
    309c:	62 e0       	ldi	r22, 0x02	; 2
    309e:	40 e0       	ldi	r20, 0x00	; 0
    30a0:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <MDIO_voidSetPinValue>
    30a4:	80 e0       	ldi	r24, 0x00	; 0
    30a6:	90 e0       	ldi	r25, 0x00	; 0
    30a8:	a0 ea       	ldi	r26, 0xA0	; 160
    30aa:	b0 e4       	ldi	r27, 0x40	; 64
    30ac:	8b 87       	std	Y+11, r24	; 0x0b
    30ae:	9c 87       	std	Y+12, r25	; 0x0c
    30b0:	ad 87       	std	Y+13, r26	; 0x0d
    30b2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    30b4:	6b 85       	ldd	r22, Y+11	; 0x0b
    30b6:	7c 85       	ldd	r23, Y+12	; 0x0c
    30b8:	8d 85       	ldd	r24, Y+13	; 0x0d
    30ba:	9e 85       	ldd	r25, Y+14	; 0x0e
    30bc:	20 e0       	ldi	r18, 0x00	; 0
    30be:	30 e0       	ldi	r19, 0x00	; 0
    30c0:	4a ef       	ldi	r20, 0xFA	; 250
    30c2:	54 e4       	ldi	r21, 0x44	; 68
    30c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30c8:	dc 01       	movw	r26, r24
    30ca:	cb 01       	movw	r24, r22
    30cc:	8f 83       	std	Y+7, r24	; 0x07
    30ce:	98 87       	std	Y+8, r25	; 0x08
    30d0:	a9 87       	std	Y+9, r26	; 0x09
    30d2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    30d4:	6f 81       	ldd	r22, Y+7	; 0x07
    30d6:	78 85       	ldd	r23, Y+8	; 0x08
    30d8:	89 85       	ldd	r24, Y+9	; 0x09
    30da:	9a 85       	ldd	r25, Y+10	; 0x0a
    30dc:	20 e0       	ldi	r18, 0x00	; 0
    30de:	30 e0       	ldi	r19, 0x00	; 0
    30e0:	40 e8       	ldi	r20, 0x80	; 128
    30e2:	5f e3       	ldi	r21, 0x3F	; 63
    30e4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    30e8:	88 23       	and	r24, r24
    30ea:	2c f4       	brge	.+10     	; 0x30f6 <HLCD_voidWriteChracter+0x22a>
		__ticks = 1;
    30ec:	81 e0       	ldi	r24, 0x01	; 1
    30ee:	90 e0       	ldi	r25, 0x00	; 0
    30f0:	9e 83       	std	Y+6, r25	; 0x06
    30f2:	8d 83       	std	Y+5, r24	; 0x05
    30f4:	3f c0       	rjmp	.+126    	; 0x3174 <HLCD_voidWriteChracter+0x2a8>
	else if (__tmp > 65535)
    30f6:	6f 81       	ldd	r22, Y+7	; 0x07
    30f8:	78 85       	ldd	r23, Y+8	; 0x08
    30fa:	89 85       	ldd	r24, Y+9	; 0x09
    30fc:	9a 85       	ldd	r25, Y+10	; 0x0a
    30fe:	20 e0       	ldi	r18, 0x00	; 0
    3100:	3f ef       	ldi	r19, 0xFF	; 255
    3102:	4f e7       	ldi	r20, 0x7F	; 127
    3104:	57 e4       	ldi	r21, 0x47	; 71
    3106:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    310a:	18 16       	cp	r1, r24
    310c:	4c f5       	brge	.+82     	; 0x3160 <HLCD_voidWriteChracter+0x294>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    310e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3110:	7c 85       	ldd	r23, Y+12	; 0x0c
    3112:	8d 85       	ldd	r24, Y+13	; 0x0d
    3114:	9e 85       	ldd	r25, Y+14	; 0x0e
    3116:	20 e0       	ldi	r18, 0x00	; 0
    3118:	30 e0       	ldi	r19, 0x00	; 0
    311a:	40 e2       	ldi	r20, 0x20	; 32
    311c:	51 e4       	ldi	r21, 0x41	; 65
    311e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3122:	dc 01       	movw	r26, r24
    3124:	cb 01       	movw	r24, r22
    3126:	bc 01       	movw	r22, r24
    3128:	cd 01       	movw	r24, r26
    312a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    312e:	dc 01       	movw	r26, r24
    3130:	cb 01       	movw	r24, r22
    3132:	9e 83       	std	Y+6, r25	; 0x06
    3134:	8d 83       	std	Y+5, r24	; 0x05
    3136:	0f c0       	rjmp	.+30     	; 0x3156 <HLCD_voidWriteChracter+0x28a>
    3138:	88 ec       	ldi	r24, 0xC8	; 200
    313a:	90 e0       	ldi	r25, 0x00	; 0
    313c:	9c 83       	std	Y+4, r25	; 0x04
    313e:	8b 83       	std	Y+3, r24	; 0x03
    3140:	8b 81       	ldd	r24, Y+3	; 0x03
    3142:	9c 81       	ldd	r25, Y+4	; 0x04
    3144:	01 97       	sbiw	r24, 0x01	; 1
    3146:	f1 f7       	brne	.-4      	; 0x3144 <HLCD_voidWriteChracter+0x278>
    3148:	9c 83       	std	Y+4, r25	; 0x04
    314a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    314c:	8d 81       	ldd	r24, Y+5	; 0x05
    314e:	9e 81       	ldd	r25, Y+6	; 0x06
    3150:	01 97       	sbiw	r24, 0x01	; 1
    3152:	9e 83       	std	Y+6, r25	; 0x06
    3154:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3156:	8d 81       	ldd	r24, Y+5	; 0x05
    3158:	9e 81       	ldd	r25, Y+6	; 0x06
    315a:	00 97       	sbiw	r24, 0x00	; 0
    315c:	69 f7       	brne	.-38     	; 0x3138 <HLCD_voidWriteChracter+0x26c>
    315e:	14 c0       	rjmp	.+40     	; 0x3188 <HLCD_voidWriteChracter+0x2bc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3160:	6f 81       	ldd	r22, Y+7	; 0x07
    3162:	78 85       	ldd	r23, Y+8	; 0x08
    3164:	89 85       	ldd	r24, Y+9	; 0x09
    3166:	9a 85       	ldd	r25, Y+10	; 0x0a
    3168:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    316c:	dc 01       	movw	r26, r24
    316e:	cb 01       	movw	r24, r22
    3170:	9e 83       	std	Y+6, r25	; 0x06
    3172:	8d 83       	std	Y+5, r24	; 0x05
    3174:	8d 81       	ldd	r24, Y+5	; 0x05
    3176:	9e 81       	ldd	r25, Y+6	; 0x06
    3178:	9a 83       	std	Y+2, r25	; 0x02
    317a:	89 83       	std	Y+1, r24	; 0x01
    317c:	89 81       	ldd	r24, Y+1	; 0x01
    317e:	9a 81       	ldd	r25, Y+2	; 0x02
    3180:	01 97       	sbiw	r24, 0x01	; 1
    3182:	f1 f7       	brne	.-4      	; 0x3180 <HLCD_voidWriteChracter+0x2b4>
    3184:	9a 83       	std	Y+2, r25	; 0x02
    3186:	89 83       	std	Y+1, r24	; 0x01
	/* Wait for E to settle */
	_delay_ms(5);
	#endif
}
    3188:	6d 96       	adiw	r28, 0x1d	; 29
    318a:	0f b6       	in	r0, 0x3f	; 63
    318c:	f8 94       	cli
    318e:	de bf       	out	0x3e, r29	; 62
    3190:	0f be       	out	0x3f, r0	; 63
    3192:	cd bf       	out	0x3d, r28	; 61
    3194:	cf 91       	pop	r28
    3196:	df 91       	pop	r29
    3198:	08 95       	ret

0000319a <HLCD_voidWriteString>:

void HLCD_voidWriteString(u8* copy_u8PStr)
{
    319a:	df 93       	push	r29
    319c:	cf 93       	push	r28
    319e:	00 d0       	rcall	.+0      	; 0x31a0 <HLCD_voidWriteString+0x6>
    31a0:	0f 92       	push	r0
    31a2:	cd b7       	in	r28, 0x3d	; 61
    31a4:	de b7       	in	r29, 0x3e	; 62
    31a6:	9b 83       	std	Y+3, r25	; 0x03
    31a8:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8Iteration=0;
    31aa:	19 82       	std	Y+1, r1	; 0x01
    31ac:	0f c0       	rjmp	.+30     	; 0x31cc <HLCD_voidWriteString+0x32>
	while(copy_u8PStr[Local_u8Iteration]!='\0')
	{
		HLCD_voidWriteChracter(copy_u8PStr[Local_u8Iteration++]);
    31ae:	89 81       	ldd	r24, Y+1	; 0x01
    31b0:	28 2f       	mov	r18, r24
    31b2:	30 e0       	ldi	r19, 0x00	; 0
    31b4:	8a 81       	ldd	r24, Y+2	; 0x02
    31b6:	9b 81       	ldd	r25, Y+3	; 0x03
    31b8:	fc 01       	movw	r30, r24
    31ba:	e2 0f       	add	r30, r18
    31bc:	f3 1f       	adc	r31, r19
    31be:	90 81       	ld	r25, Z
    31c0:	89 81       	ldd	r24, Y+1	; 0x01
    31c2:	8f 5f       	subi	r24, 0xFF	; 255
    31c4:	89 83       	std	Y+1, r24	; 0x01
    31c6:	89 2f       	mov	r24, r25
    31c8:	0e 94 66 17 	call	0x2ecc	; 0x2ecc <HLCD_voidWriteChracter>
}

void HLCD_voidWriteString(u8* copy_u8PStr)
{
	u8 Local_u8Iteration=0;
	while(copy_u8PStr[Local_u8Iteration]!='\0')
    31cc:	89 81       	ldd	r24, Y+1	; 0x01
    31ce:	28 2f       	mov	r18, r24
    31d0:	30 e0       	ldi	r19, 0x00	; 0
    31d2:	8a 81       	ldd	r24, Y+2	; 0x02
    31d4:	9b 81       	ldd	r25, Y+3	; 0x03
    31d6:	fc 01       	movw	r30, r24
    31d8:	e2 0f       	add	r30, r18
    31da:	f3 1f       	adc	r31, r19
    31dc:	80 81       	ld	r24, Z
    31de:	88 23       	and	r24, r24
    31e0:	31 f7       	brne	.-52     	; 0x31ae <HLCD_voidWriteString+0x14>
	{
		HLCD_voidWriteChracter(copy_u8PStr[Local_u8Iteration++]);
	}
}
    31e2:	0f 90       	pop	r0
    31e4:	0f 90       	pop	r0
    31e6:	0f 90       	pop	r0
    31e8:	cf 91       	pop	r28
    31ea:	df 91       	pop	r29
    31ec:	08 95       	ret

000031ee <HLCD_voidClear>:

void HLCD_voidClear(void)
{
    31ee:	df 93       	push	r29
    31f0:	cf 93       	push	r28
    31f2:	cd b7       	in	r28, 0x3d	; 61
    31f4:	de b7       	in	r29, 0x3e	; 62
    31f6:	2e 97       	sbiw	r28, 0x0e	; 14
    31f8:	0f b6       	in	r0, 0x3f	; 63
    31fa:	f8 94       	cli
    31fc:	de bf       	out	0x3e, r29	; 62
    31fe:	0f be       	out	0x3f, r0	; 63
    3200:	cd bf       	out	0x3d, r28	; 61
	HLCD_voidWriteCmd(0x01);
    3202:	81 e0       	ldi	r24, 0x01	; 1
    3204:	0e 94 ff 15 	call	0x2bfe	; 0x2bfe <HLCD_voidWriteCmd>
    3208:	80 e0       	ldi	r24, 0x00	; 0
    320a:	90 e0       	ldi	r25, 0x00	; 0
    320c:	a0 e0       	ldi	r26, 0x00	; 0
    320e:	b0 e4       	ldi	r27, 0x40	; 64
    3210:	8b 87       	std	Y+11, r24	; 0x0b
    3212:	9c 87       	std	Y+12, r25	; 0x0c
    3214:	ad 87       	std	Y+13, r26	; 0x0d
    3216:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3218:	6b 85       	ldd	r22, Y+11	; 0x0b
    321a:	7c 85       	ldd	r23, Y+12	; 0x0c
    321c:	8d 85       	ldd	r24, Y+13	; 0x0d
    321e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3220:	20 e0       	ldi	r18, 0x00	; 0
    3222:	30 e0       	ldi	r19, 0x00	; 0
    3224:	4a ef       	ldi	r20, 0xFA	; 250
    3226:	54 e4       	ldi	r21, 0x44	; 68
    3228:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    322c:	dc 01       	movw	r26, r24
    322e:	cb 01       	movw	r24, r22
    3230:	8f 83       	std	Y+7, r24	; 0x07
    3232:	98 87       	std	Y+8, r25	; 0x08
    3234:	a9 87       	std	Y+9, r26	; 0x09
    3236:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3238:	6f 81       	ldd	r22, Y+7	; 0x07
    323a:	78 85       	ldd	r23, Y+8	; 0x08
    323c:	89 85       	ldd	r24, Y+9	; 0x09
    323e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3240:	20 e0       	ldi	r18, 0x00	; 0
    3242:	30 e0       	ldi	r19, 0x00	; 0
    3244:	40 e8       	ldi	r20, 0x80	; 128
    3246:	5f e3       	ldi	r21, 0x3F	; 63
    3248:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    324c:	88 23       	and	r24, r24
    324e:	2c f4       	brge	.+10     	; 0x325a <HLCD_voidClear+0x6c>
		__ticks = 1;
    3250:	81 e0       	ldi	r24, 0x01	; 1
    3252:	90 e0       	ldi	r25, 0x00	; 0
    3254:	9e 83       	std	Y+6, r25	; 0x06
    3256:	8d 83       	std	Y+5, r24	; 0x05
    3258:	3f c0       	rjmp	.+126    	; 0x32d8 <HLCD_voidClear+0xea>
	else if (__tmp > 65535)
    325a:	6f 81       	ldd	r22, Y+7	; 0x07
    325c:	78 85       	ldd	r23, Y+8	; 0x08
    325e:	89 85       	ldd	r24, Y+9	; 0x09
    3260:	9a 85       	ldd	r25, Y+10	; 0x0a
    3262:	20 e0       	ldi	r18, 0x00	; 0
    3264:	3f ef       	ldi	r19, 0xFF	; 255
    3266:	4f e7       	ldi	r20, 0x7F	; 127
    3268:	57 e4       	ldi	r21, 0x47	; 71
    326a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    326e:	18 16       	cp	r1, r24
    3270:	4c f5       	brge	.+82     	; 0x32c4 <HLCD_voidClear+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3272:	6b 85       	ldd	r22, Y+11	; 0x0b
    3274:	7c 85       	ldd	r23, Y+12	; 0x0c
    3276:	8d 85       	ldd	r24, Y+13	; 0x0d
    3278:	9e 85       	ldd	r25, Y+14	; 0x0e
    327a:	20 e0       	ldi	r18, 0x00	; 0
    327c:	30 e0       	ldi	r19, 0x00	; 0
    327e:	40 e2       	ldi	r20, 0x20	; 32
    3280:	51 e4       	ldi	r21, 0x41	; 65
    3282:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3286:	dc 01       	movw	r26, r24
    3288:	cb 01       	movw	r24, r22
    328a:	bc 01       	movw	r22, r24
    328c:	cd 01       	movw	r24, r26
    328e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3292:	dc 01       	movw	r26, r24
    3294:	cb 01       	movw	r24, r22
    3296:	9e 83       	std	Y+6, r25	; 0x06
    3298:	8d 83       	std	Y+5, r24	; 0x05
    329a:	0f c0       	rjmp	.+30     	; 0x32ba <HLCD_voidClear+0xcc>
    329c:	88 ec       	ldi	r24, 0xC8	; 200
    329e:	90 e0       	ldi	r25, 0x00	; 0
    32a0:	9c 83       	std	Y+4, r25	; 0x04
    32a2:	8b 83       	std	Y+3, r24	; 0x03
    32a4:	8b 81       	ldd	r24, Y+3	; 0x03
    32a6:	9c 81       	ldd	r25, Y+4	; 0x04
    32a8:	01 97       	sbiw	r24, 0x01	; 1
    32aa:	f1 f7       	brne	.-4      	; 0x32a8 <HLCD_voidClear+0xba>
    32ac:	9c 83       	std	Y+4, r25	; 0x04
    32ae:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    32b0:	8d 81       	ldd	r24, Y+5	; 0x05
    32b2:	9e 81       	ldd	r25, Y+6	; 0x06
    32b4:	01 97       	sbiw	r24, 0x01	; 1
    32b6:	9e 83       	std	Y+6, r25	; 0x06
    32b8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    32ba:	8d 81       	ldd	r24, Y+5	; 0x05
    32bc:	9e 81       	ldd	r25, Y+6	; 0x06
    32be:	00 97       	sbiw	r24, 0x00	; 0
    32c0:	69 f7       	brne	.-38     	; 0x329c <HLCD_voidClear+0xae>
    32c2:	14 c0       	rjmp	.+40     	; 0x32ec <HLCD_voidClear+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    32c4:	6f 81       	ldd	r22, Y+7	; 0x07
    32c6:	78 85       	ldd	r23, Y+8	; 0x08
    32c8:	89 85       	ldd	r24, Y+9	; 0x09
    32ca:	9a 85       	ldd	r25, Y+10	; 0x0a
    32cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32d0:	dc 01       	movw	r26, r24
    32d2:	cb 01       	movw	r24, r22
    32d4:	9e 83       	std	Y+6, r25	; 0x06
    32d6:	8d 83       	std	Y+5, r24	; 0x05
    32d8:	8d 81       	ldd	r24, Y+5	; 0x05
    32da:	9e 81       	ldd	r25, Y+6	; 0x06
    32dc:	9a 83       	std	Y+2, r25	; 0x02
    32de:	89 83       	std	Y+1, r24	; 0x01
    32e0:	89 81       	ldd	r24, Y+1	; 0x01
    32e2:	9a 81       	ldd	r25, Y+2	; 0x02
    32e4:	01 97       	sbiw	r24, 0x01	; 1
    32e6:	f1 f7       	brne	.-4      	; 0x32e4 <HLCD_voidClear+0xf6>
    32e8:	9a 83       	std	Y+2, r25	; 0x02
    32ea:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    32ec:	2e 96       	adiw	r28, 0x0e	; 14
    32ee:	0f b6       	in	r0, 0x3f	; 63
    32f0:	f8 94       	cli
    32f2:	de bf       	out	0x3e, r29	; 62
    32f4:	0f be       	out	0x3f, r0	; 63
    32f6:	cd bf       	out	0x3d, r28	; 61
    32f8:	cf 91       	pop	r28
    32fa:	df 91       	pop	r29
    32fc:	08 95       	ret

000032fe <HLCD_voidGoTo>:

void HLCD_voidGoTo(u8 copy_u8XLoc , u8 copy_u8YLoc)
{
    32fe:	df 93       	push	r29
    3300:	cf 93       	push	r28
    3302:	00 d0       	rcall	.+0      	; 0x3304 <HLCD_voidGoTo+0x6>
    3304:	00 d0       	rcall	.+0      	; 0x3306 <HLCD_voidGoTo+0x8>
    3306:	cd b7       	in	r28, 0x3d	; 61
    3308:	de b7       	in	r29, 0x3e	; 62
    330a:	89 83       	std	Y+1, r24	; 0x01
    330c:	6a 83       	std	Y+2, r22	; 0x02
	switch(copy_u8XLoc)
    330e:	89 81       	ldd	r24, Y+1	; 0x01
    3310:	28 2f       	mov	r18, r24
    3312:	30 e0       	ldi	r19, 0x00	; 0
    3314:	3c 83       	std	Y+4, r19	; 0x04
    3316:	2b 83       	std	Y+3, r18	; 0x03
    3318:	8b 81       	ldd	r24, Y+3	; 0x03
    331a:	9c 81       	ldd	r25, Y+4	; 0x04
    331c:	00 97       	sbiw	r24, 0x00	; 0
    331e:	31 f0       	breq	.+12     	; 0x332c <HLCD_voidGoTo+0x2e>
    3320:	2b 81       	ldd	r18, Y+3	; 0x03
    3322:	3c 81       	ldd	r19, Y+4	; 0x04
    3324:	21 30       	cpi	r18, 0x01	; 1
    3326:	31 05       	cpc	r19, r1
    3328:	31 f0       	breq	.+12     	; 0x3336 <HLCD_voidGoTo+0x38>
    332a:	09 c0       	rjmp	.+18     	; 0x333e <HLCD_voidGoTo+0x40>
	{
		case 0:
			HLCD_voidWriteCmd(copy_u8YLoc+128);
    332c:	8a 81       	ldd	r24, Y+2	; 0x02
    332e:	80 58       	subi	r24, 0x80	; 128
    3330:	0e 94 ff 15 	call	0x2bfe	; 0x2bfe <HLCD_voidWriteCmd>
    3334:	04 c0       	rjmp	.+8      	; 0x333e <HLCD_voidGoTo+0x40>
			break;
		case 1:
			HLCD_voidWriteCmd(copy_u8YLoc+191);
    3336:	8a 81       	ldd	r24, Y+2	; 0x02
    3338:	81 54       	subi	r24, 0x41	; 65
    333a:	0e 94 ff 15 	call	0x2bfe	; 0x2bfe <HLCD_voidWriteCmd>
			break;
		default:
			break;
	}
}
    333e:	0f 90       	pop	r0
    3340:	0f 90       	pop	r0
    3342:	0f 90       	pop	r0
    3344:	0f 90       	pop	r0
    3346:	cf 91       	pop	r28
    3348:	df 91       	pop	r29
    334a:	08 95       	ret

0000334c <HLCD_voidWriteIntNumber>:

void HLCD_voidWriteIntNumber(s32 copy_s32Num)
{
    334c:	0f 93       	push	r16
    334e:	1f 93       	push	r17
    3350:	df 93       	push	r29
    3352:	cf 93       	push	r28
    3354:	cd b7       	in	r28, 0x3d	; 61
    3356:	de b7       	in	r29, 0x3e	; 62
    3358:	64 97       	sbiw	r28, 0x14	; 20
    335a:	0f b6       	in	r0, 0x3f	; 63
    335c:	f8 94       	cli
    335e:	de bf       	out	0x3e, r29	; 62
    3360:	0f be       	out	0x3f, r0	; 63
    3362:	cd bf       	out	0x3d, r28	; 61
    3364:	69 8b       	std	Y+17, r22	; 0x11
    3366:	7a 8b       	std	Y+18, r23	; 0x12
    3368:	8b 8b       	std	Y+19, r24	; 0x13
    336a:	9c 8b       	std	Y+20, r25	; 0x14
	s8 i=0,j=0;
    336c:	1e 82       	std	Y+6, r1	; 0x06
    336e:	1d 82       	std	Y+5, r1	; 0x05
	u32 Local_u32Num;
	u8 base_NUM[10]={0};
    3370:	8a e0       	ldi	r24, 0x0A	; 10
    3372:	fe 01       	movw	r30, r28
    3374:	37 96       	adiw	r30, 0x07	; 7
    3376:	df 01       	movw	r26, r30
    3378:	98 2f       	mov	r25, r24
    337a:	1d 92       	st	X+, r1
    337c:	9a 95       	dec	r25
    337e:	e9 f7       	brne	.-6      	; 0x337a <HLCD_voidWriteIntNumber+0x2e>
	if (copy_s32Num < 0)
    3380:	89 89       	ldd	r24, Y+17	; 0x11
    3382:	9a 89       	ldd	r25, Y+18	; 0x12
    3384:	ab 89       	ldd	r26, Y+19	; 0x13
    3386:	bc 89       	ldd	r27, Y+20	; 0x14
    3388:	bb 23       	and	r27, r27
    338a:	dc f4       	brge	.+54     	; 0x33c2 <HLCD_voidWriteIntNumber+0x76>
	{
		copy_s32Num*=-1;
    338c:	89 89       	ldd	r24, Y+17	; 0x11
    338e:	9a 89       	ldd	r25, Y+18	; 0x12
    3390:	ab 89       	ldd	r26, Y+19	; 0x13
    3392:	bc 89       	ldd	r27, Y+20	; 0x14
    3394:	b0 95       	com	r27
    3396:	a0 95       	com	r26
    3398:	90 95       	com	r25
    339a:	81 95       	neg	r24
    339c:	9f 4f       	sbci	r25, 0xFF	; 255
    339e:	af 4f       	sbci	r26, 0xFF	; 255
    33a0:	bf 4f       	sbci	r27, 0xFF	; 255
    33a2:	89 8b       	std	Y+17, r24	; 0x11
    33a4:	9a 8b       	std	Y+18, r25	; 0x12
    33a6:	ab 8b       	std	Y+19, r26	; 0x13
    33a8:	bc 8b       	std	Y+20, r27	; 0x14
		Local_u32Num = copy_s32Num;
    33aa:	89 89       	ldd	r24, Y+17	; 0x11
    33ac:	9a 89       	ldd	r25, Y+18	; 0x12
    33ae:	ab 89       	ldd	r26, Y+19	; 0x13
    33b0:	bc 89       	ldd	r27, Y+20	; 0x14
    33b2:	89 83       	std	Y+1, r24	; 0x01
    33b4:	9a 83       	std	Y+2, r25	; 0x02
    33b6:	ab 83       	std	Y+3, r26	; 0x03
    33b8:	bc 83       	std	Y+4, r27	; 0x04
		HLCD_voidWriteChracter('-');
    33ba:	8d e2       	ldi	r24, 0x2D	; 45
    33bc:	0e 94 66 17 	call	0x2ecc	; 0x2ecc <HLCD_voidWriteChracter>
    33c0:	3b c0       	rjmp	.+118    	; 0x3438 <HLCD_voidWriteIntNumber+0xec>
	}
	else if (copy_s32Num == 0)
    33c2:	89 89       	ldd	r24, Y+17	; 0x11
    33c4:	9a 89       	ldd	r25, Y+18	; 0x12
    33c6:	ab 89       	ldd	r26, Y+19	; 0x13
    33c8:	bc 89       	ldd	r27, Y+20	; 0x14
    33ca:	00 97       	sbiw	r24, 0x00	; 0
    33cc:	a1 05       	cpc	r26, r1
    33ce:	b1 05       	cpc	r27, r1
    33d0:	99 f5       	brne	.+102    	; 0x3438 <HLCD_voidWriteIntNumber+0xec>
	{
		HLCD_voidWriteChracter(48);
    33d2:	80 e3       	ldi	r24, 0x30	; 48
    33d4:	0e 94 66 17 	call	0x2ecc	; 0x2ecc <HLCD_voidWriteChracter>
    33d8:	2f c0       	rjmp	.+94     	; 0x3438 <HLCD_voidWriteIntNumber+0xec>
	}

	while(copy_s32Num !=0)
	{
		base_NUM[i++] = copy_s32Num % 10;
    33da:	8e 81       	ldd	r24, Y+6	; 0x06
    33dc:	08 2f       	mov	r16, r24
    33de:	11 27       	eor	r17, r17
    33e0:	07 fd       	sbrc	r16, 7
    33e2:	10 95       	com	r17
    33e4:	89 89       	ldd	r24, Y+17	; 0x11
    33e6:	9a 89       	ldd	r25, Y+18	; 0x12
    33e8:	ab 89       	ldd	r26, Y+19	; 0x13
    33ea:	bc 89       	ldd	r27, Y+20	; 0x14
    33ec:	2a e0       	ldi	r18, 0x0A	; 10
    33ee:	30 e0       	ldi	r19, 0x00	; 0
    33f0:	40 e0       	ldi	r20, 0x00	; 0
    33f2:	50 e0       	ldi	r21, 0x00	; 0
    33f4:	bc 01       	movw	r22, r24
    33f6:	cd 01       	movw	r24, r26
    33f8:	0e 94 04 2a 	call	0x5408	; 0x5408 <__divmodsi4>
    33fc:	dc 01       	movw	r26, r24
    33fe:	cb 01       	movw	r24, r22
    3400:	28 2f       	mov	r18, r24
    3402:	ce 01       	movw	r24, r28
    3404:	07 96       	adiw	r24, 0x07	; 7
    3406:	fc 01       	movw	r30, r24
    3408:	e0 0f       	add	r30, r16
    340a:	f1 1f       	adc	r31, r17
    340c:	20 83       	st	Z, r18
    340e:	8e 81       	ldd	r24, Y+6	; 0x06
    3410:	8f 5f       	subi	r24, 0xFF	; 255
    3412:	8e 83       	std	Y+6, r24	; 0x06
		copy_s32Num/=10;
    3414:	89 89       	ldd	r24, Y+17	; 0x11
    3416:	9a 89       	ldd	r25, Y+18	; 0x12
    3418:	ab 89       	ldd	r26, Y+19	; 0x13
    341a:	bc 89       	ldd	r27, Y+20	; 0x14
    341c:	2a e0       	ldi	r18, 0x0A	; 10
    341e:	30 e0       	ldi	r19, 0x00	; 0
    3420:	40 e0       	ldi	r20, 0x00	; 0
    3422:	50 e0       	ldi	r21, 0x00	; 0
    3424:	bc 01       	movw	r22, r24
    3426:	cd 01       	movw	r24, r26
    3428:	0e 94 04 2a 	call	0x5408	; 0x5408 <__divmodsi4>
    342c:	da 01       	movw	r26, r20
    342e:	c9 01       	movw	r24, r18
    3430:	89 8b       	std	Y+17, r24	; 0x11
    3432:	9a 8b       	std	Y+18, r25	; 0x12
    3434:	ab 8b       	std	Y+19, r26	; 0x13
    3436:	bc 8b       	std	Y+20, r27	; 0x14
	else if (copy_s32Num == 0)
	{
		HLCD_voidWriteChracter(48);
	}

	while(copy_s32Num !=0)
    3438:	89 89       	ldd	r24, Y+17	; 0x11
    343a:	9a 89       	ldd	r25, Y+18	; 0x12
    343c:	ab 89       	ldd	r26, Y+19	; 0x13
    343e:	bc 89       	ldd	r27, Y+20	; 0x14
    3440:	00 97       	sbiw	r24, 0x00	; 0
    3442:	a1 05       	cpc	r26, r1
    3444:	b1 05       	cpc	r27, r1
    3446:	49 f6       	brne	.-110    	; 0x33da <HLCD_voidWriteIntNumber+0x8e>
	{
		base_NUM[i++] = copy_s32Num % 10;
		copy_s32Num/=10;
	}
	i--;
    3448:	8e 81       	ldd	r24, Y+6	; 0x06
    344a:	81 50       	subi	r24, 0x01	; 1
    344c:	8e 83       	std	Y+6, r24	; 0x06
    344e:	13 c0       	rjmp	.+38     	; 0x3476 <HLCD_voidWriteIntNumber+0x12a>
	while(i>=0)
	{
		HLCD_voidWriteChracter(base_NUM[i--]+48);
    3450:	8e 81       	ldd	r24, Y+6	; 0x06
    3452:	28 2f       	mov	r18, r24
    3454:	33 27       	eor	r19, r19
    3456:	27 fd       	sbrc	r18, 7
    3458:	30 95       	com	r19
    345a:	ce 01       	movw	r24, r28
    345c:	07 96       	adiw	r24, 0x07	; 7
    345e:	fc 01       	movw	r30, r24
    3460:	e2 0f       	add	r30, r18
    3462:	f3 1f       	adc	r31, r19
    3464:	80 81       	ld	r24, Z
    3466:	98 2f       	mov	r25, r24
    3468:	90 5d       	subi	r25, 0xD0	; 208
    346a:	8e 81       	ldd	r24, Y+6	; 0x06
    346c:	81 50       	subi	r24, 0x01	; 1
    346e:	8e 83       	std	Y+6, r24	; 0x06
    3470:	89 2f       	mov	r24, r25
    3472:	0e 94 66 17 	call	0x2ecc	; 0x2ecc <HLCD_voidWriteChracter>
	{
		base_NUM[i++] = copy_s32Num % 10;
		copy_s32Num/=10;
	}
	i--;
	while(i>=0)
    3476:	8e 81       	ldd	r24, Y+6	; 0x06
    3478:	88 23       	and	r24, r24
    347a:	54 f7       	brge	.-44     	; 0x3450 <HLCD_voidWriteIntNumber+0x104>
	{
		HLCD_voidWriteChracter(base_NUM[i--]+48);
	}

}
    347c:	64 96       	adiw	r28, 0x14	; 20
    347e:	0f b6       	in	r0, 0x3f	; 63
    3480:	f8 94       	cli
    3482:	de bf       	out	0x3e, r29	; 62
    3484:	0f be       	out	0x3f, r0	; 63
    3486:	cd bf       	out	0x3d, r28	; 61
    3488:	cf 91       	pop	r28
    348a:	df 91       	pop	r29
    348c:	1f 91       	pop	r17
    348e:	0f 91       	pop	r16
    3490:	08 95       	ret

00003492 <HLCD_voidWriteFloatNumber>:

void HLCD_voidWriteFloatNumber(f64 number)
{
    3492:	ef 92       	push	r14
    3494:	ff 92       	push	r15
    3496:	0f 93       	push	r16
    3498:	1f 93       	push	r17
    349a:	df 93       	push	r29
    349c:	cf 93       	push	r28
    349e:	cd b7       	in	r28, 0x3d	; 61
    34a0:	de b7       	in	r29, 0x3e	; 62
    34a2:	a7 97       	sbiw	r28, 0x27	; 39
    34a4:	0f b6       	in	r0, 0x3f	; 63
    34a6:	f8 94       	cli
    34a8:	de bf       	out	0x3e, r29	; 62
    34aa:	0f be       	out	0x3f, r0	; 63
    34ac:	cd bf       	out	0x3d, r28	; 61
    34ae:	6c a3       	std	Y+36, r22	; 0x24
    34b0:	7d a3       	std	Y+37, r23	; 0x25
    34b2:	8e a3       	std	Y+38, r24	; 0x26
    34b4:	9f a3       	std	Y+39, r25	; 0x27
	s8 i=0,j=0;
    34b6:	1f 86       	std	Y+15, r1	; 0x0f
    34b8:	1e 86       	std	Y+14, r1	; 0x0e
	u32 x=number;
    34ba:	6c a1       	ldd	r22, Y+36	; 0x24
    34bc:	7d a1       	ldd	r23, Y+37	; 0x25
    34be:	8e a1       	ldd	r24, Y+38	; 0x26
    34c0:	9f a1       	ldd	r25, Y+39	; 0x27
    34c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    34c6:	dc 01       	movw	r26, r24
    34c8:	cb 01       	movw	r24, r22
    34ca:	8a 87       	std	Y+10, r24	; 0x0a
    34cc:	9b 87       	std	Y+11, r25	; 0x0b
    34ce:	ac 87       	std	Y+12, r26	; 0x0c
    34d0:	bd 87       	std	Y+13, r27	; 0x0d
	u8 base_NUM[10]={0};
    34d2:	8a e0       	ldi	r24, 0x0A	; 10
    34d4:	fe 01       	movw	r30, r28
    34d6:	70 96       	adiw	r30, 0x10	; 16
    34d8:	df 01       	movw	r26, r30
    34da:	98 2f       	mov	r25, r24
    34dc:	1d 92       	st	X+, r1
    34de:	9a 95       	dec	r25
    34e0:	e9 f7       	brne	.-6      	; 0x34dc <HLCD_voidWriteFloatNumber+0x4a>
	f64 y=0;
    34e2:	80 e0       	ldi	r24, 0x00	; 0
    34e4:	90 e0       	ldi	r25, 0x00	; 0
    34e6:	a0 e0       	ldi	r26, 0x00	; 0
    34e8:	b0 e0       	ldi	r27, 0x00	; 0
    34ea:	8e 83       	std	Y+6, r24	; 0x06
    34ec:	9f 83       	std	Y+7, r25	; 0x07
    34ee:	a8 87       	std	Y+8, r26	; 0x08
    34f0:	b9 87       	std	Y+9, r27	; 0x09
	if (number<0)
    34f2:	6c a1       	ldd	r22, Y+36	; 0x24
    34f4:	7d a1       	ldd	r23, Y+37	; 0x25
    34f6:	8e a1       	ldd	r24, Y+38	; 0x26
    34f8:	9f a1       	ldd	r25, Y+39	; 0x27
    34fa:	20 e0       	ldi	r18, 0x00	; 0
    34fc:	30 e0       	ldi	r19, 0x00	; 0
    34fe:	40 e0       	ldi	r20, 0x00	; 0
    3500:	50 e0       	ldi	r21, 0x00	; 0
    3502:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3506:	88 23       	and	r24, r24
    3508:	c4 f4       	brge	.+48     	; 0x353a <HLCD_voidWriteFloatNumber+0xa8>
	{
		number*=-1;
    350a:	8c a1       	ldd	r24, Y+36	; 0x24
    350c:	9d a1       	ldd	r25, Y+37	; 0x25
    350e:	ae a1       	ldd	r26, Y+38	; 0x26
    3510:	bf a1       	ldd	r27, Y+39	; 0x27
    3512:	b0 58       	subi	r27, 0x80	; 128
    3514:	8c a3       	std	Y+36, r24	; 0x24
    3516:	9d a3       	std	Y+37, r25	; 0x25
    3518:	ae a3       	std	Y+38, r26	; 0x26
    351a:	bf a3       	std	Y+39, r27	; 0x27
		x=number;
    351c:	6c a1       	ldd	r22, Y+36	; 0x24
    351e:	7d a1       	ldd	r23, Y+37	; 0x25
    3520:	8e a1       	ldd	r24, Y+38	; 0x26
    3522:	9f a1       	ldd	r25, Y+39	; 0x27
    3524:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3528:	dc 01       	movw	r26, r24
    352a:	cb 01       	movw	r24, r22
    352c:	8a 87       	std	Y+10, r24	; 0x0a
    352e:	9b 87       	std	Y+11, r25	; 0x0b
    3530:	ac 87       	std	Y+12, r26	; 0x0c
    3532:	bd 87       	std	Y+13, r27	; 0x0d
		HLCD_voidWriteChracter('-');
    3534:	8d e2       	ldi	r24, 0x2D	; 45
    3536:	0e 94 66 17 	call	0x2ecc	; 0x2ecc <HLCD_voidWriteChracter>
	}
	y=(((number+1.0)-x)*10000000);
    353a:	6c a1       	ldd	r22, Y+36	; 0x24
    353c:	7d a1       	ldd	r23, Y+37	; 0x25
    353e:	8e a1       	ldd	r24, Y+38	; 0x26
    3540:	9f a1       	ldd	r25, Y+39	; 0x27
    3542:	20 e0       	ldi	r18, 0x00	; 0
    3544:	30 e0       	ldi	r19, 0x00	; 0
    3546:	40 e8       	ldi	r20, 0x80	; 128
    3548:	5f e3       	ldi	r21, 0x3F	; 63
    354a:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    354e:	dc 01       	movw	r26, r24
    3550:	cb 01       	movw	r24, r22
    3552:	7c 01       	movw	r14, r24
    3554:	8d 01       	movw	r16, r26
    3556:	6a 85       	ldd	r22, Y+10	; 0x0a
    3558:	7b 85       	ldd	r23, Y+11	; 0x0b
    355a:	8c 85       	ldd	r24, Y+12	; 0x0c
    355c:	9d 85       	ldd	r25, Y+13	; 0x0d
    355e:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__floatunsisf>
    3562:	9b 01       	movw	r18, r22
    3564:	ac 01       	movw	r20, r24
    3566:	c8 01       	movw	r24, r16
    3568:	b7 01       	movw	r22, r14
    356a:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    356e:	dc 01       	movw	r26, r24
    3570:	cb 01       	movw	r24, r22
    3572:	bc 01       	movw	r22, r24
    3574:	cd 01       	movw	r24, r26
    3576:	20 e8       	ldi	r18, 0x80	; 128
    3578:	36 e9       	ldi	r19, 0x96	; 150
    357a:	48 e1       	ldi	r20, 0x18	; 24
    357c:	5b e4       	ldi	r21, 0x4B	; 75
    357e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3582:	dc 01       	movw	r26, r24
    3584:	cb 01       	movw	r24, r22
    3586:	8e 83       	std	Y+6, r24	; 0x06
    3588:	9f 83       	std	Y+7, r25	; 0x07
    358a:	a8 87       	std	Y+8, r26	; 0x08
    358c:	b9 87       	std	Y+9, r27	; 0x09
    358e:	2f c0       	rjmp	.+94     	; 0x35ee <HLCD_voidWriteFloatNumber+0x15c>
	while(x !=0)
	{
		base_NUM[i++] = x % 10;
    3590:	8f 85       	ldd	r24, Y+15	; 0x0f
    3592:	08 2f       	mov	r16, r24
    3594:	11 27       	eor	r17, r17
    3596:	07 fd       	sbrc	r16, 7
    3598:	10 95       	com	r17
    359a:	8a 85       	ldd	r24, Y+10	; 0x0a
    359c:	9b 85       	ldd	r25, Y+11	; 0x0b
    359e:	ac 85       	ldd	r26, Y+12	; 0x0c
    35a0:	bd 85       	ldd	r27, Y+13	; 0x0d
    35a2:	2a e0       	ldi	r18, 0x0A	; 10
    35a4:	30 e0       	ldi	r19, 0x00	; 0
    35a6:	40 e0       	ldi	r20, 0x00	; 0
    35a8:	50 e0       	ldi	r21, 0x00	; 0
    35aa:	bc 01       	movw	r22, r24
    35ac:	cd 01       	movw	r24, r26
    35ae:	0e 94 e2 29 	call	0x53c4	; 0x53c4 <__udivmodsi4>
    35b2:	dc 01       	movw	r26, r24
    35b4:	cb 01       	movw	r24, r22
    35b6:	28 2f       	mov	r18, r24
    35b8:	ce 01       	movw	r24, r28
    35ba:	40 96       	adiw	r24, 0x10	; 16
    35bc:	fc 01       	movw	r30, r24
    35be:	e0 0f       	add	r30, r16
    35c0:	f1 1f       	adc	r31, r17
    35c2:	20 83       	st	Z, r18
    35c4:	8f 85       	ldd	r24, Y+15	; 0x0f
    35c6:	8f 5f       	subi	r24, 0xFF	; 255
    35c8:	8f 87       	std	Y+15, r24	; 0x0f
		x/=10;
    35ca:	8a 85       	ldd	r24, Y+10	; 0x0a
    35cc:	9b 85       	ldd	r25, Y+11	; 0x0b
    35ce:	ac 85       	ldd	r26, Y+12	; 0x0c
    35d0:	bd 85       	ldd	r27, Y+13	; 0x0d
    35d2:	2a e0       	ldi	r18, 0x0A	; 10
    35d4:	30 e0       	ldi	r19, 0x00	; 0
    35d6:	40 e0       	ldi	r20, 0x00	; 0
    35d8:	50 e0       	ldi	r21, 0x00	; 0
    35da:	bc 01       	movw	r22, r24
    35dc:	cd 01       	movw	r24, r26
    35de:	0e 94 e2 29 	call	0x53c4	; 0x53c4 <__udivmodsi4>
    35e2:	da 01       	movw	r26, r20
    35e4:	c9 01       	movw	r24, r18
    35e6:	8a 87       	std	Y+10, r24	; 0x0a
    35e8:	9b 87       	std	Y+11, r25	; 0x0b
    35ea:	ac 87       	std	Y+12, r26	; 0x0c
    35ec:	bd 87       	std	Y+13, r27	; 0x0d
		number*=-1;
		x=number;
		HLCD_voidWriteChracter('-');
	}
	y=(((number+1.0)-x)*10000000);
	while(x !=0)
    35ee:	8a 85       	ldd	r24, Y+10	; 0x0a
    35f0:	9b 85       	ldd	r25, Y+11	; 0x0b
    35f2:	ac 85       	ldd	r26, Y+12	; 0x0c
    35f4:	bd 85       	ldd	r27, Y+13	; 0x0d
    35f6:	00 97       	sbiw	r24, 0x00	; 0
    35f8:	a1 05       	cpc	r26, r1
    35fa:	b1 05       	cpc	r27, r1
    35fc:	49 f6       	brne	.-110    	; 0x3590 <HLCD_voidWriteFloatNumber+0xfe>
	{
		base_NUM[i++] = x % 10;
		x/=10;
	}
	u8 k=i--;
    35fe:	8f 85       	ldd	r24, Y+15	; 0x0f
    3600:	8d 83       	std	Y+5, r24	; 0x05
    3602:	8f 85       	ldd	r24, Y+15	; 0x0f
    3604:	81 50       	subi	r24, 0x01	; 1
    3606:	8f 87       	std	Y+15, r24	; 0x0f
    3608:	13 c0       	rjmp	.+38     	; 0x3630 <HLCD_voidWriteFloatNumber+0x19e>
	while(i>=0)
	{
		HLCD_voidWriteChracter(base_NUM[i--]+48);
    360a:	8f 85       	ldd	r24, Y+15	; 0x0f
    360c:	28 2f       	mov	r18, r24
    360e:	33 27       	eor	r19, r19
    3610:	27 fd       	sbrc	r18, 7
    3612:	30 95       	com	r19
    3614:	ce 01       	movw	r24, r28
    3616:	40 96       	adiw	r24, 0x10	; 16
    3618:	fc 01       	movw	r30, r24
    361a:	e2 0f       	add	r30, r18
    361c:	f3 1f       	adc	r31, r19
    361e:	80 81       	ld	r24, Z
    3620:	98 2f       	mov	r25, r24
    3622:	90 5d       	subi	r25, 0xD0	; 208
    3624:	8f 85       	ldd	r24, Y+15	; 0x0f
    3626:	81 50       	subi	r24, 0x01	; 1
    3628:	8f 87       	std	Y+15, r24	; 0x0f
    362a:	89 2f       	mov	r24, r25
    362c:	0e 94 66 17 	call	0x2ecc	; 0x2ecc <HLCD_voidWriteChracter>
	{
		base_NUM[i++] = x % 10;
		x/=10;
	}
	u8 k=i--;
	while(i>=0)
    3630:	8f 85       	ldd	r24, Y+15	; 0x0f
    3632:	88 23       	and	r24, r24
    3634:	54 f7       	brge	.-44     	; 0x360a <HLCD_voidWriteFloatNumber+0x178>
	{
		HLCD_voidWriteChracter(base_NUM[i--]+48);
	}
	u8 F_NUM[10]={0};
    3636:	8a e0       	ldi	r24, 0x0A	; 10
    3638:	fe 01       	movw	r30, r28
    363a:	7a 96       	adiw	r30, 0x1a	; 26
    363c:	df 01       	movw	r26, r30
    363e:	98 2f       	mov	r25, r24
    3640:	1d 92       	st	X+, r1
    3642:	9a 95       	dec	r25
    3644:	e9 f7       	brne	.-6      	; 0x3640 <HLCD_voidWriteFloatNumber+0x1ae>
	i=0;
    3646:	1f 86       	std	Y+15, r1	; 0x0f
	u32 z=y;
    3648:	6e 81       	ldd	r22, Y+6	; 0x06
    364a:	7f 81       	ldd	r23, Y+7	; 0x07
    364c:	88 85       	ldd	r24, Y+8	; 0x08
    364e:	99 85       	ldd	r25, Y+9	; 0x09
    3650:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3654:	dc 01       	movw	r26, r24
    3656:	cb 01       	movw	r24, r22
    3658:	89 83       	std	Y+1, r24	; 0x01
    365a:	9a 83       	std	Y+2, r25	; 0x02
    365c:	ab 83       	std	Y+3, r26	; 0x03
    365e:	bc 83       	std	Y+4, r27	; 0x04
	HLCD_voidWriteChracter('.');
    3660:	8e e2       	ldi	r24, 0x2E	; 46
    3662:	0e 94 66 17 	call	0x2ecc	; 0x2ecc <HLCD_voidWriteChracter>
    3666:	2f c0       	rjmp	.+94     	; 0x36c6 <HLCD_voidWriteFloatNumber+0x234>
	while(z !=0)
	{
		F_NUM[i++] = z % 10;
    3668:	8f 85       	ldd	r24, Y+15	; 0x0f
    366a:	08 2f       	mov	r16, r24
    366c:	11 27       	eor	r17, r17
    366e:	07 fd       	sbrc	r16, 7
    3670:	10 95       	com	r17
    3672:	89 81       	ldd	r24, Y+1	; 0x01
    3674:	9a 81       	ldd	r25, Y+2	; 0x02
    3676:	ab 81       	ldd	r26, Y+3	; 0x03
    3678:	bc 81       	ldd	r27, Y+4	; 0x04
    367a:	2a e0       	ldi	r18, 0x0A	; 10
    367c:	30 e0       	ldi	r19, 0x00	; 0
    367e:	40 e0       	ldi	r20, 0x00	; 0
    3680:	50 e0       	ldi	r21, 0x00	; 0
    3682:	bc 01       	movw	r22, r24
    3684:	cd 01       	movw	r24, r26
    3686:	0e 94 e2 29 	call	0x53c4	; 0x53c4 <__udivmodsi4>
    368a:	dc 01       	movw	r26, r24
    368c:	cb 01       	movw	r24, r22
    368e:	28 2f       	mov	r18, r24
    3690:	ce 01       	movw	r24, r28
    3692:	4a 96       	adiw	r24, 0x1a	; 26
    3694:	fc 01       	movw	r30, r24
    3696:	e0 0f       	add	r30, r16
    3698:	f1 1f       	adc	r31, r17
    369a:	20 83       	st	Z, r18
    369c:	8f 85       	ldd	r24, Y+15	; 0x0f
    369e:	8f 5f       	subi	r24, 0xFF	; 255
    36a0:	8f 87       	std	Y+15, r24	; 0x0f
		z/=10;
    36a2:	89 81       	ldd	r24, Y+1	; 0x01
    36a4:	9a 81       	ldd	r25, Y+2	; 0x02
    36a6:	ab 81       	ldd	r26, Y+3	; 0x03
    36a8:	bc 81       	ldd	r27, Y+4	; 0x04
    36aa:	2a e0       	ldi	r18, 0x0A	; 10
    36ac:	30 e0       	ldi	r19, 0x00	; 0
    36ae:	40 e0       	ldi	r20, 0x00	; 0
    36b0:	50 e0       	ldi	r21, 0x00	; 0
    36b2:	bc 01       	movw	r22, r24
    36b4:	cd 01       	movw	r24, r26
    36b6:	0e 94 e2 29 	call	0x53c4	; 0x53c4 <__udivmodsi4>
    36ba:	da 01       	movw	r26, r20
    36bc:	c9 01       	movw	r24, r18
    36be:	89 83       	std	Y+1, r24	; 0x01
    36c0:	9a 83       	std	Y+2, r25	; 0x02
    36c2:	ab 83       	std	Y+3, r26	; 0x03
    36c4:	bc 83       	std	Y+4, r27	; 0x04
	}
	u8 F_NUM[10]={0};
	i=0;
	u32 z=y;
	HLCD_voidWriteChracter('.');
	while(z !=0)
    36c6:	89 81       	ldd	r24, Y+1	; 0x01
    36c8:	9a 81       	ldd	r25, Y+2	; 0x02
    36ca:	ab 81       	ldd	r26, Y+3	; 0x03
    36cc:	bc 81       	ldd	r27, Y+4	; 0x04
    36ce:	00 97       	sbiw	r24, 0x00	; 0
    36d0:	a1 05       	cpc	r26, r1
    36d2:	b1 05       	cpc	r27, r1
    36d4:	49 f6       	brne	.-110    	; 0x3668 <HLCD_voidWriteFloatNumber+0x1d6>
	{
		F_NUM[i++] = z % 10;
		z/=10;
	}
	i-=2;
    36d6:	8f 85       	ldd	r24, Y+15	; 0x0f
    36d8:	82 50       	subi	r24, 0x02	; 2
    36da:	8f 87       	std	Y+15, r24	; 0x0f
	for(j=0;j<10;j++)
    36dc:	1e 86       	std	Y+14, r1	; 0x0e
    36de:	1c c0       	rjmp	.+56     	; 0x3718 <HLCD_voidWriteFloatNumber+0x286>
	{
		if(F_NUM[j]==0)
    36e0:	8e 85       	ldd	r24, Y+14	; 0x0e
    36e2:	28 2f       	mov	r18, r24
    36e4:	33 27       	eor	r19, r19
    36e6:	27 fd       	sbrc	r18, 7
    36e8:	30 95       	com	r19
    36ea:	ce 01       	movw	r24, r28
    36ec:	4a 96       	adiw	r24, 0x1a	; 26
    36ee:	fc 01       	movw	r30, r24
    36f0:	e2 0f       	add	r30, r18
    36f2:	f3 1f       	adc	r31, r19
    36f4:	80 81       	ld	r24, Z
    36f6:	88 23       	and	r24, r24
    36f8:	49 f5       	brne	.+82     	; 0x374c <HLCD_voidWriteFloatNumber+0x2ba>
		{
			F_NUM[j]='k';
    36fa:	8e 85       	ldd	r24, Y+14	; 0x0e
    36fc:	28 2f       	mov	r18, r24
    36fe:	33 27       	eor	r19, r19
    3700:	27 fd       	sbrc	r18, 7
    3702:	30 95       	com	r19
    3704:	ce 01       	movw	r24, r28
    3706:	4a 96       	adiw	r24, 0x1a	; 26
    3708:	fc 01       	movw	r30, r24
    370a:	e2 0f       	add	r30, r18
    370c:	f3 1f       	adc	r31, r19
    370e:	8b e6       	ldi	r24, 0x6B	; 107
    3710:	80 83       	st	Z, r24
	{
		F_NUM[i++] = z % 10;
		z/=10;
	}
	i-=2;
	for(j=0;j<10;j++)
    3712:	8e 85       	ldd	r24, Y+14	; 0x0e
    3714:	8f 5f       	subi	r24, 0xFF	; 255
    3716:	8e 87       	std	Y+14, r24	; 0x0e
    3718:	8e 85       	ldd	r24, Y+14	; 0x0e
    371a:	8a 30       	cpi	r24, 0x0A	; 10
    371c:	0c f3       	brlt	.-62     	; 0x36e0 <HLCD_voidWriteFloatNumber+0x24e>
    371e:	16 c0       	rjmp	.+44     	; 0x374c <HLCD_voidWriteFloatNumber+0x2ba>
			break;
		}
	}
	while(F_NUM[i]!='k'&& k!=7)
	{
		HLCD_voidWriteChracter(F_NUM[i--]+48);
    3720:	8f 85       	ldd	r24, Y+15	; 0x0f
    3722:	28 2f       	mov	r18, r24
    3724:	33 27       	eor	r19, r19
    3726:	27 fd       	sbrc	r18, 7
    3728:	30 95       	com	r19
    372a:	ce 01       	movw	r24, r28
    372c:	4a 96       	adiw	r24, 0x1a	; 26
    372e:	fc 01       	movw	r30, r24
    3730:	e2 0f       	add	r30, r18
    3732:	f3 1f       	adc	r31, r19
    3734:	80 81       	ld	r24, Z
    3736:	98 2f       	mov	r25, r24
    3738:	90 5d       	subi	r25, 0xD0	; 208
    373a:	8f 85       	ldd	r24, Y+15	; 0x0f
    373c:	81 50       	subi	r24, 0x01	; 1
    373e:	8f 87       	std	Y+15, r24	; 0x0f
    3740:	89 2f       	mov	r24, r25
    3742:	0e 94 66 17 	call	0x2ecc	; 0x2ecc <HLCD_voidWriteChracter>
		k++;
    3746:	8d 81       	ldd	r24, Y+5	; 0x05
    3748:	8f 5f       	subi	r24, 0xFF	; 255
    374a:	8d 83       	std	Y+5, r24	; 0x05
		else
		{
			break;
		}
	}
	while(F_NUM[i]!='k'&& k!=7)
    374c:	8f 85       	ldd	r24, Y+15	; 0x0f
    374e:	28 2f       	mov	r18, r24
    3750:	33 27       	eor	r19, r19
    3752:	27 fd       	sbrc	r18, 7
    3754:	30 95       	com	r19
    3756:	ce 01       	movw	r24, r28
    3758:	4a 96       	adiw	r24, 0x1a	; 26
    375a:	fc 01       	movw	r30, r24
    375c:	e2 0f       	add	r30, r18
    375e:	f3 1f       	adc	r31, r19
    3760:	80 81       	ld	r24, Z
    3762:	8b 36       	cpi	r24, 0x6B	; 107
    3764:	19 f0       	breq	.+6      	; 0x376c <HLCD_voidWriteFloatNumber+0x2da>
    3766:	8d 81       	ldd	r24, Y+5	; 0x05
    3768:	87 30       	cpi	r24, 0x07	; 7
    376a:	d1 f6       	brne	.-76     	; 0x3720 <HLCD_voidWriteFloatNumber+0x28e>
	{
		HLCD_voidWriteChracter(F_NUM[i--]+48);
		k++;
	}

}
    376c:	a7 96       	adiw	r28, 0x27	; 39
    376e:	0f b6       	in	r0, 0x3f	; 63
    3770:	f8 94       	cli
    3772:	de bf       	out	0x3e, r29	; 62
    3774:	0f be       	out	0x3f, r0	; 63
    3776:	cd bf       	out	0x3d, r28	; 61
    3778:	cf 91       	pop	r28
    377a:	df 91       	pop	r29
    377c:	1f 91       	pop	r17
    377e:	0f 91       	pop	r16
    3780:	ff 90       	pop	r15
    3782:	ef 90       	pop	r14
    3784:	08 95       	ret

00003786 <KPD_U8GetPressedKey>:
#include"../../MCAL/DIO/DIO_interface.h"
#include"KPD_config.h"
#include"KPD_Private.h"
#include"KPD_INT.h"

u8 KPD_U8GetPressedKey(){
    3786:	df 93       	push	r29
    3788:	cf 93       	push	r28
    378a:	cd b7       	in	r28, 0x3d	; 61
    378c:	de b7       	in	r29, 0x3e	; 62
    378e:	a3 97       	sbiw	r28, 0x23	; 35
    3790:	0f b6       	in	r0, 0x3f	; 63
    3792:	f8 94       	cli
    3794:	de bf       	out	0x3e, r29	; 62
    3796:	0f be       	out	0x3f, r0	; 63
    3798:	cd bf       	out	0x3d, r28	; 61
	u8 Local_u8ColIndex , Local_u8RowIndex , Local_u8PinState , Local_u8PressedKey=NO_PRESSED_KEY_VALUE;
    379a:	8f ef       	ldi	r24, 0xFF	; 255
    379c:	89 83       	std	Y+1, r24	; 0x01
	u8 KPD_u8Array[KPD_ROW_NUMBER][KPD_COLUMN_NUMBER] = KPD_BUTTONS_VALUES;
    379e:	ce 01       	movw	r24, r28
    37a0:	05 96       	adiw	r24, 0x05	; 5
    37a2:	9e 8b       	std	Y+22, r25	; 0x16
    37a4:	8d 8b       	std	Y+21, r24	; 0x15
    37a6:	e2 e3       	ldi	r30, 0x32	; 50
    37a8:	f2 e0       	ldi	r31, 0x02	; 2
    37aa:	f8 8f       	std	Y+24, r31	; 0x18
    37ac:	ef 8b       	std	Y+23, r30	; 0x17
    37ae:	f9 e0       	ldi	r31, 0x09	; 9
    37b0:	f9 8f       	std	Y+25, r31	; 0x19
    37b2:	ef 89       	ldd	r30, Y+23	; 0x17
    37b4:	f8 8d       	ldd	r31, Y+24	; 0x18
    37b6:	00 80       	ld	r0, Z
    37b8:	8f 89       	ldd	r24, Y+23	; 0x17
    37ba:	98 8d       	ldd	r25, Y+24	; 0x18
    37bc:	01 96       	adiw	r24, 0x01	; 1
    37be:	98 8f       	std	Y+24, r25	; 0x18
    37c0:	8f 8b       	std	Y+23, r24	; 0x17
    37c2:	ed 89       	ldd	r30, Y+21	; 0x15
    37c4:	fe 89       	ldd	r31, Y+22	; 0x16
    37c6:	00 82       	st	Z, r0
    37c8:	8d 89       	ldd	r24, Y+21	; 0x15
    37ca:	9e 89       	ldd	r25, Y+22	; 0x16
    37cc:	01 96       	adiw	r24, 0x01	; 1
    37ce:	9e 8b       	std	Y+22, r25	; 0x16
    37d0:	8d 8b       	std	Y+21, r24	; 0x15
    37d2:	99 8d       	ldd	r25, Y+25	; 0x19
    37d4:	91 50       	subi	r25, 0x01	; 1
    37d6:	99 8f       	std	Y+25, r25	; 0x19
    37d8:	e9 8d       	ldd	r30, Y+25	; 0x19
    37da:	ee 23       	and	r30, r30
    37dc:	51 f7       	brne	.-44     	; 0x37b2 <KPD_U8GetPressedKey+0x2c>

	u8 KPD_u8ColumnArray[KPD_COLUMN_NUMBER]={KPD_COLUMN_PIN0,KPD_COLUMN_PIN1,KPD_COLUMN_PIN2};
    37de:	ce 01       	movw	r24, r28
    37e0:	0e 96       	adiw	r24, 0x0e	; 14
    37e2:	9b 8f       	std	Y+27, r25	; 0x1b
    37e4:	8a 8f       	std	Y+26, r24	; 0x1a
    37e6:	ef e2       	ldi	r30, 0x2F	; 47
    37e8:	f2 e0       	ldi	r31, 0x02	; 2
    37ea:	fd 8f       	std	Y+29, r31	; 0x1d
    37ec:	ec 8f       	std	Y+28, r30	; 0x1c
    37ee:	f3 e0       	ldi	r31, 0x03	; 3
    37f0:	fe 8f       	std	Y+30, r31	; 0x1e
    37f2:	ec 8d       	ldd	r30, Y+28	; 0x1c
    37f4:	fd 8d       	ldd	r31, Y+29	; 0x1d
    37f6:	00 80       	ld	r0, Z
    37f8:	8c 8d       	ldd	r24, Y+28	; 0x1c
    37fa:	9d 8d       	ldd	r25, Y+29	; 0x1d
    37fc:	01 96       	adiw	r24, 0x01	; 1
    37fe:	9d 8f       	std	Y+29, r25	; 0x1d
    3800:	8c 8f       	std	Y+28, r24	; 0x1c
    3802:	ea 8d       	ldd	r30, Y+26	; 0x1a
    3804:	fb 8d       	ldd	r31, Y+27	; 0x1b
    3806:	00 82       	st	Z, r0
    3808:	8a 8d       	ldd	r24, Y+26	; 0x1a
    380a:	9b 8d       	ldd	r25, Y+27	; 0x1b
    380c:	01 96       	adiw	r24, 0x01	; 1
    380e:	9b 8f       	std	Y+27, r25	; 0x1b
    3810:	8a 8f       	std	Y+26, r24	; 0x1a
    3812:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3814:	91 50       	subi	r25, 0x01	; 1
    3816:	9e 8f       	std	Y+30, r25	; 0x1e
    3818:	ee 8d       	ldd	r30, Y+30	; 0x1e
    381a:	ee 23       	and	r30, r30
    381c:	51 f7       	brne	.-44     	; 0x37f2 <KPD_U8GetPressedKey+0x6c>
	u8 KPD_u8RowArray[KPD_ROW_NUMBER]={KPD_ROW_PIN0,KPD_ROW_PIN1,KPD_ROW_PIN2};
    381e:	ce 01       	movw	r24, r28
    3820:	41 96       	adiw	r24, 0x11	; 17
    3822:	98 a3       	std	Y+32, r25	; 0x20
    3824:	8f 8f       	std	Y+31, r24	; 0x1f
    3826:	ec e2       	ldi	r30, 0x2C	; 44
    3828:	f2 e0       	ldi	r31, 0x02	; 2
    382a:	fa a3       	std	Y+34, r31	; 0x22
    382c:	e9 a3       	std	Y+33, r30	; 0x21
    382e:	f3 e0       	ldi	r31, 0x03	; 3
    3830:	fb a3       	std	Y+35, r31	; 0x23
    3832:	e9 a1       	ldd	r30, Y+33	; 0x21
    3834:	fa a1       	ldd	r31, Y+34	; 0x22
    3836:	00 80       	ld	r0, Z
    3838:	89 a1       	ldd	r24, Y+33	; 0x21
    383a:	9a a1       	ldd	r25, Y+34	; 0x22
    383c:	01 96       	adiw	r24, 0x01	; 1
    383e:	9a a3       	std	Y+34, r25	; 0x22
    3840:	89 a3       	std	Y+33, r24	; 0x21
    3842:	ef 8d       	ldd	r30, Y+31	; 0x1f
    3844:	f8 a1       	ldd	r31, Y+32	; 0x20
    3846:	00 82       	st	Z, r0
    3848:	8f 8d       	ldd	r24, Y+31	; 0x1f
    384a:	98 a1       	ldd	r25, Y+32	; 0x20
    384c:	01 96       	adiw	r24, 0x01	; 1
    384e:	98 a3       	std	Y+32, r25	; 0x20
    3850:	8f 8f       	std	Y+31, r24	; 0x1f
    3852:	9b a1       	ldd	r25, Y+35	; 0x23
    3854:	91 50       	subi	r25, 0x01	; 1
    3856:	9b a3       	std	Y+35, r25	; 0x23
    3858:	eb a1       	ldd	r30, Y+35	; 0x23
    385a:	ee 23       	and	r30, r30
    385c:	51 f7       	brne	.-44     	; 0x3832 <KPD_U8GetPressedKey+0xac>


	for(Local_u8ColIndex=0 ; Local_u8ColIndex < KPD_COLUMN_NUMBER ; Local_u8ColIndex++){
    385e:	1c 82       	std	Y+4, r1	; 0x04
    3860:	60 c0       	rjmp	.+192    	; 0x3922 <KPD_U8GetPressedKey+0x19c>

		// Activate the current column
		MDIO_voidSetPinValue(KPD_u8ColumnArray[Local_u8ColIndex],KPD_PORT,DIO_LOW);
    3862:	8c 81       	ldd	r24, Y+4	; 0x04
    3864:	28 2f       	mov	r18, r24
    3866:	30 e0       	ldi	r19, 0x00	; 0
    3868:	ce 01       	movw	r24, r28
    386a:	0e 96       	adiw	r24, 0x0e	; 14
    386c:	fc 01       	movw	r30, r24
    386e:	e2 0f       	add	r30, r18
    3870:	f3 1f       	adc	r31, r19
    3872:	80 81       	ld	r24, Z
    3874:	60 e0       	ldi	r22, 0x00	; 0
    3876:	40 e0       	ldi	r20, 0x00	; 0
    3878:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <MDIO_voidSetPinValue>

		for(Local_u8RowIndex=0 ; Local_u8RowIndex < KPD_ROW_NUMBER ; Local_u8RowIndex++){
    387c:	1b 82       	std	Y+3, r1	; 0x03
    387e:	3d c0       	rjmp	.+122    	; 0x38fa <KPD_U8GetPressedKey+0x174>

			// Read the current Row
			Local_u8PinState = MDIO_u8GetPinValue(KPD_u8RowArray[Local_u8RowIndex],KPD_PORT);
    3880:	8b 81       	ldd	r24, Y+3	; 0x03
    3882:	28 2f       	mov	r18, r24
    3884:	30 e0       	ldi	r19, 0x00	; 0
    3886:	ce 01       	movw	r24, r28
    3888:	41 96       	adiw	r24, 0x11	; 17
    388a:	fc 01       	movw	r30, r24
    388c:	e2 0f       	add	r30, r18
    388e:	f3 1f       	adc	r31, r19
    3890:	80 81       	ld	r24, Z
    3892:	60 e0       	ldi	r22, 0x00	; 0
    3894:	0e 94 94 0f 	call	0x1f28	; 0x1f28 <MDIO_u8GetPinValue>
    3898:	8a 83       	std	Y+2, r24	; 0x02

			if(Local_u8PinState == DIO_LOW){
    389a:	8a 81       	ldd	r24, Y+2	; 0x02
    389c:	88 23       	and	r24, r24
    389e:	51 f5       	brne	.+84     	; 0x38f4 <KPD_U8GetPressedKey+0x16e>

				Local_u8PressedKey=KPD_u8Array[Local_u8RowIndex][Local_u8ColIndex];
    38a0:	8b 81       	ldd	r24, Y+3	; 0x03
    38a2:	28 2f       	mov	r18, r24
    38a4:	30 e0       	ldi	r19, 0x00	; 0
    38a6:	8c 81       	ldd	r24, Y+4	; 0x04
    38a8:	48 2f       	mov	r20, r24
    38aa:	50 e0       	ldi	r21, 0x00	; 0
    38ac:	c9 01       	movw	r24, r18
    38ae:	88 0f       	add	r24, r24
    38b0:	99 1f       	adc	r25, r25
    38b2:	82 0f       	add	r24, r18
    38b4:	93 1f       	adc	r25, r19
    38b6:	9e 01       	movw	r18, r28
    38b8:	2f 5f       	subi	r18, 0xFF	; 255
    38ba:	3f 4f       	sbci	r19, 0xFF	; 255
    38bc:	82 0f       	add	r24, r18
    38be:	93 1f       	adc	r25, r19
    38c0:	84 0f       	add	r24, r20
    38c2:	95 1f       	adc	r25, r21
    38c4:	fc 01       	movw	r30, r24
    38c6:	34 96       	adiw	r30, 0x04	; 4
    38c8:	80 81       	ld	r24, Z
    38ca:	89 83       	std	Y+1, r24	; 0x01
    38cc:	0d c0       	rjmp	.+26     	; 0x38e8 <KPD_U8GetPressedKey+0x162>

				// wait with blocking until the key released   (polling with Blocking)
				while(Local_u8PinState == DIO_LOW){

					Local_u8PinState = MDIO_u8GetPinValue(KPD_u8RowArray[Local_u8RowIndex],KPD_PORT);
    38ce:	8b 81       	ldd	r24, Y+3	; 0x03
    38d0:	28 2f       	mov	r18, r24
    38d2:	30 e0       	ldi	r19, 0x00	; 0
    38d4:	ce 01       	movw	r24, r28
    38d6:	41 96       	adiw	r24, 0x11	; 17
    38d8:	fc 01       	movw	r30, r24
    38da:	e2 0f       	add	r30, r18
    38dc:	f3 1f       	adc	r31, r19
    38de:	80 81       	ld	r24, Z
    38e0:	60 e0       	ldi	r22, 0x00	; 0
    38e2:	0e 94 94 0f 	call	0x1f28	; 0x1f28 <MDIO_u8GetPinValue>
    38e6:	8a 83       	std	Y+2, r24	; 0x02
			if(Local_u8PinState == DIO_LOW){

				Local_u8PressedKey=KPD_u8Array[Local_u8RowIndex][Local_u8ColIndex];

				// wait with blocking until the key released   (polling with Blocking)
				while(Local_u8PinState == DIO_LOW){
    38e8:	8a 81       	ldd	r24, Y+2	; 0x02
    38ea:	88 23       	and	r24, r24
    38ec:	81 f3       	breq	.-32     	; 0x38ce <KPD_U8GetPressedKey+0x148>

					Local_u8PinState = MDIO_u8GetPinValue(KPD_u8RowArray[Local_u8RowIndex],KPD_PORT);
				}
				return Local_u8PressedKey;
    38ee:	f9 81       	ldd	r31, Y+1	; 0x01
    38f0:	fc 8b       	std	Y+20, r31	; 0x14
    38f2:	1d c0       	rjmp	.+58     	; 0x392e <KPD_U8GetPressedKey+0x1a8>
	for(Local_u8ColIndex=0 ; Local_u8ColIndex < KPD_COLUMN_NUMBER ; Local_u8ColIndex++){

		// Activate the current column
		MDIO_voidSetPinValue(KPD_u8ColumnArray[Local_u8ColIndex],KPD_PORT,DIO_LOW);

		for(Local_u8RowIndex=0 ; Local_u8RowIndex < KPD_ROW_NUMBER ; Local_u8RowIndex++){
    38f4:	8b 81       	ldd	r24, Y+3	; 0x03
    38f6:	8f 5f       	subi	r24, 0xFF	; 255
    38f8:	8b 83       	std	Y+3, r24	; 0x03
    38fa:	8b 81       	ldd	r24, Y+3	; 0x03
    38fc:	83 30       	cpi	r24, 0x03	; 3
    38fe:	08 f4       	brcc	.+2      	; 0x3902 <KPD_U8GetPressedKey+0x17c>
    3900:	bf cf       	rjmp	.-130    	; 0x3880 <KPD_U8GetPressedKey+0xfa>
					Local_u8PinState = MDIO_u8GetPinValue(KPD_u8RowArray[Local_u8RowIndex],KPD_PORT);
				}
				return Local_u8PressedKey;
			}
		}
		MDIO_voidSetPinValue(KPD_u8ColumnArray[Local_u8ColIndex],KPD_PORT,DIO_HIGH);
    3902:	8c 81       	ldd	r24, Y+4	; 0x04
    3904:	28 2f       	mov	r18, r24
    3906:	30 e0       	ldi	r19, 0x00	; 0
    3908:	ce 01       	movw	r24, r28
    390a:	0e 96       	adiw	r24, 0x0e	; 14
    390c:	fc 01       	movw	r30, r24
    390e:	e2 0f       	add	r30, r18
    3910:	f3 1f       	adc	r31, r19
    3912:	80 81       	ld	r24, Z
    3914:	60 e0       	ldi	r22, 0x00	; 0
    3916:	41 e0       	ldi	r20, 0x01	; 1
    3918:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <MDIO_voidSetPinValue>

	u8 KPD_u8ColumnArray[KPD_COLUMN_NUMBER]={KPD_COLUMN_PIN0,KPD_COLUMN_PIN1,KPD_COLUMN_PIN2};
	u8 KPD_u8RowArray[KPD_ROW_NUMBER]={KPD_ROW_PIN0,KPD_ROW_PIN1,KPD_ROW_PIN2};


	for(Local_u8ColIndex=0 ; Local_u8ColIndex < KPD_COLUMN_NUMBER ; Local_u8ColIndex++){
    391c:	8c 81       	ldd	r24, Y+4	; 0x04
    391e:	8f 5f       	subi	r24, 0xFF	; 255
    3920:	8c 83       	std	Y+4, r24	; 0x04
    3922:	8c 81       	ldd	r24, Y+4	; 0x04
    3924:	83 30       	cpi	r24, 0x03	; 3
    3926:	08 f4       	brcc	.+2      	; 0x392a <KPD_U8GetPressedKey+0x1a4>
    3928:	9c cf       	rjmp	.-200    	; 0x3862 <KPD_U8GetPressedKey+0xdc>
				return Local_u8PressedKey;
			}
		}
		MDIO_voidSetPinValue(KPD_u8ColumnArray[Local_u8ColIndex],KPD_PORT,DIO_HIGH);
	}
	return Local_u8PressedKey;
    392a:	89 81       	ldd	r24, Y+1	; 0x01
    392c:	8c 8b       	std	Y+20, r24	; 0x14
    392e:	8c 89       	ldd	r24, Y+20	; 0x14
}
    3930:	a3 96       	adiw	r28, 0x23	; 35
    3932:	0f b6       	in	r0, 0x3f	; 63
    3934:	f8 94       	cli
    3936:	de bf       	out	0x3e, r29	; 62
    3938:	0f be       	out	0x3f, r0	; 63
    393a:	cd bf       	out	0x3d, r28	; 61
    393c:	cf 91       	pop	r28
    393e:	df 91       	pop	r29
    3940:	08 95       	ret

00003942 <HBUZ_voidInit>:
#include<util/delay.h>
#include"../../MCAL/DIO/DIO_interface.h"
#include "BUZZER_interface.h"

void HBUZ_voidInit(u8 copy_u8BuzPin,u8 copy_u8BuzPort)
{
    3942:	df 93       	push	r29
    3944:	cf 93       	push	r28
    3946:	00 d0       	rcall	.+0      	; 0x3948 <HBUZ_voidInit+0x6>
    3948:	cd b7       	in	r28, 0x3d	; 61
    394a:	de b7       	in	r29, 0x3e	; 62
    394c:	89 83       	std	Y+1, r24	; 0x01
    394e:	6a 83       	std	Y+2, r22	; 0x02
	MDIO_voidSetPinMode(copy_u8BuzPin,copy_u8BuzPort,DIO_OUTPUT);
    3950:	89 81       	ldd	r24, Y+1	; 0x01
    3952:	6a 81       	ldd	r22, Y+2	; 0x02
    3954:	41 e0       	ldi	r20, 0x01	; 1
    3956:	0e 94 ff 0c 	call	0x19fe	; 0x19fe <MDIO_voidSetPinMode>
	MDIO_voidSetPinValue(copy_u8BuzPin,copy_u8BuzPort,DIO_LOW);
    395a:	89 81       	ldd	r24, Y+1	; 0x01
    395c:	6a 81       	ldd	r22, Y+2	; 0x02
    395e:	40 e0       	ldi	r20, 0x00	; 0
    3960:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <MDIO_voidSetPinValue>
}
    3964:	0f 90       	pop	r0
    3966:	0f 90       	pop	r0
    3968:	cf 91       	pop	r28
    396a:	df 91       	pop	r29
    396c:	08 95       	ret

0000396e <HBUZ_voidOn>:

void HBUZ_voidOn(u8 copy_u8BuzPin,u8 copy_u8BuzPort)
{
    396e:	df 93       	push	r29
    3970:	cf 93       	push	r28
    3972:	00 d0       	rcall	.+0      	; 0x3974 <HBUZ_voidOn+0x6>
    3974:	cd b7       	in	r28, 0x3d	; 61
    3976:	de b7       	in	r29, 0x3e	; 62
    3978:	89 83       	std	Y+1, r24	; 0x01
    397a:	6a 83       	std	Y+2, r22	; 0x02
	MDIO_voidSetPinValue(copy_u8BuzPin , copy_u8BuzPort , DIO_HIGH);
    397c:	89 81       	ldd	r24, Y+1	; 0x01
    397e:	6a 81       	ldd	r22, Y+2	; 0x02
    3980:	41 e0       	ldi	r20, 0x01	; 1
    3982:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <MDIO_voidSetPinValue>
}
    3986:	0f 90       	pop	r0
    3988:	0f 90       	pop	r0
    398a:	cf 91       	pop	r28
    398c:	df 91       	pop	r29
    398e:	08 95       	ret

00003990 <HBUZ_voidOff>:

void HBUZ_voidOff(u8 copy_u8BuzPin,u8 copy_u8BuzPort)
{
    3990:	df 93       	push	r29
    3992:	cf 93       	push	r28
    3994:	00 d0       	rcall	.+0      	; 0x3996 <HBUZ_voidOff+0x6>
    3996:	cd b7       	in	r28, 0x3d	; 61
    3998:	de b7       	in	r29, 0x3e	; 62
    399a:	89 83       	std	Y+1, r24	; 0x01
    399c:	6a 83       	std	Y+2, r22	; 0x02
	MDIO_voidSetPinValue(copy_u8BuzPin , copy_u8BuzPort , DIO_LOW);
    399e:	89 81       	ldd	r24, Y+1	; 0x01
    39a0:	6a 81       	ldd	r22, Y+2	; 0x02
    39a2:	40 e0       	ldi	r20, 0x00	; 0
    39a4:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <MDIO_voidSetPinValue>
}
    39a8:	0f 90       	pop	r0
    39aa:	0f 90       	pop	r0
    39ac:	cf 91       	pop	r28
    39ae:	df 91       	pop	r29
    39b0:	08 95       	ret

000039b2 <HBUZ_voidToggle>:

void HBUZ_voidToggle(u8 copy_u8BuzPin,u8 copy_u8BuzPort)
{
    39b2:	df 93       	push	r29
    39b4:	cf 93       	push	r28
    39b6:	00 d0       	rcall	.+0      	; 0x39b8 <HBUZ_voidToggle+0x6>
    39b8:	cd b7       	in	r28, 0x3d	; 61
    39ba:	de b7       	in	r29, 0x3e	; 62
    39bc:	89 83       	std	Y+1, r24	; 0x01
    39be:	6a 83       	std	Y+2, r22	; 0x02
	MDIO_voidTogPinValue(copy_u8BuzPin , copy_u8BuzPort);
    39c0:	89 81       	ldd	r24, Y+1	; 0x01
    39c2:	6a 81       	ldd	r22, Y+2	; 0x02
    39c4:	0e 94 0f 0f 	call	0x1e1e	; 0x1e1e <MDIO_voidTogPinValue>
}
    39c8:	0f 90       	pop	r0
    39ca:	0f 90       	pop	r0
    39cc:	cf 91       	pop	r28
    39ce:	df 91       	pop	r29
    39d0:	08 95       	ret

000039d2 <HBUZ_voidOnce>:

void HBUZ_voidOnce(u8 copy_u8BuzPin,u8 copy_u8BuzPort)
{
    39d2:	df 93       	push	r29
    39d4:	cf 93       	push	r28
    39d6:	cd b7       	in	r28, 0x3d	; 61
    39d8:	de b7       	in	r29, 0x3e	; 62
    39da:	60 97       	sbiw	r28, 0x10	; 16
    39dc:	0f b6       	in	r0, 0x3f	; 63
    39de:	f8 94       	cli
    39e0:	de bf       	out	0x3e, r29	; 62
    39e2:	0f be       	out	0x3f, r0	; 63
    39e4:	cd bf       	out	0x3d, r28	; 61
    39e6:	8f 87       	std	Y+15, r24	; 0x0f
    39e8:	68 8b       	std	Y+16, r22	; 0x10
	MDIO_voidSetPinValue(copy_u8BuzPin , copy_u8BuzPort , DIO_HIGH);
    39ea:	8f 85       	ldd	r24, Y+15	; 0x0f
    39ec:	68 89       	ldd	r22, Y+16	; 0x10
    39ee:	41 e0       	ldi	r20, 0x01	; 1
    39f0:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <MDIO_voidSetPinValue>
    39f4:	80 e0       	ldi	r24, 0x00	; 0
    39f6:	90 e0       	ldi	r25, 0x00	; 0
    39f8:	a8 e4       	ldi	r26, 0x48	; 72
    39fa:	b3 e4       	ldi	r27, 0x43	; 67
    39fc:	8b 87       	std	Y+11, r24	; 0x0b
    39fe:	9c 87       	std	Y+12, r25	; 0x0c
    3a00:	ad 87       	std	Y+13, r26	; 0x0d
    3a02:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3a04:	6b 85       	ldd	r22, Y+11	; 0x0b
    3a06:	7c 85       	ldd	r23, Y+12	; 0x0c
    3a08:	8d 85       	ldd	r24, Y+13	; 0x0d
    3a0a:	9e 85       	ldd	r25, Y+14	; 0x0e
    3a0c:	20 e0       	ldi	r18, 0x00	; 0
    3a0e:	30 e0       	ldi	r19, 0x00	; 0
    3a10:	4a ef       	ldi	r20, 0xFA	; 250
    3a12:	54 e4       	ldi	r21, 0x44	; 68
    3a14:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a18:	dc 01       	movw	r26, r24
    3a1a:	cb 01       	movw	r24, r22
    3a1c:	8f 83       	std	Y+7, r24	; 0x07
    3a1e:	98 87       	std	Y+8, r25	; 0x08
    3a20:	a9 87       	std	Y+9, r26	; 0x09
    3a22:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3a24:	6f 81       	ldd	r22, Y+7	; 0x07
    3a26:	78 85       	ldd	r23, Y+8	; 0x08
    3a28:	89 85       	ldd	r24, Y+9	; 0x09
    3a2a:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a2c:	20 e0       	ldi	r18, 0x00	; 0
    3a2e:	30 e0       	ldi	r19, 0x00	; 0
    3a30:	40 e8       	ldi	r20, 0x80	; 128
    3a32:	5f e3       	ldi	r21, 0x3F	; 63
    3a34:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3a38:	88 23       	and	r24, r24
    3a3a:	2c f4       	brge	.+10     	; 0x3a46 <HBUZ_voidOnce+0x74>
		__ticks = 1;
    3a3c:	81 e0       	ldi	r24, 0x01	; 1
    3a3e:	90 e0       	ldi	r25, 0x00	; 0
    3a40:	9e 83       	std	Y+6, r25	; 0x06
    3a42:	8d 83       	std	Y+5, r24	; 0x05
    3a44:	3f c0       	rjmp	.+126    	; 0x3ac4 <HBUZ_voidOnce+0xf2>
	else if (__tmp > 65535)
    3a46:	6f 81       	ldd	r22, Y+7	; 0x07
    3a48:	78 85       	ldd	r23, Y+8	; 0x08
    3a4a:	89 85       	ldd	r24, Y+9	; 0x09
    3a4c:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a4e:	20 e0       	ldi	r18, 0x00	; 0
    3a50:	3f ef       	ldi	r19, 0xFF	; 255
    3a52:	4f e7       	ldi	r20, 0x7F	; 127
    3a54:	57 e4       	ldi	r21, 0x47	; 71
    3a56:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3a5a:	18 16       	cp	r1, r24
    3a5c:	4c f5       	brge	.+82     	; 0x3ab0 <HBUZ_voidOnce+0xde>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3a5e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3a60:	7c 85       	ldd	r23, Y+12	; 0x0c
    3a62:	8d 85       	ldd	r24, Y+13	; 0x0d
    3a64:	9e 85       	ldd	r25, Y+14	; 0x0e
    3a66:	20 e0       	ldi	r18, 0x00	; 0
    3a68:	30 e0       	ldi	r19, 0x00	; 0
    3a6a:	40 e2       	ldi	r20, 0x20	; 32
    3a6c:	51 e4       	ldi	r21, 0x41	; 65
    3a6e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a72:	dc 01       	movw	r26, r24
    3a74:	cb 01       	movw	r24, r22
    3a76:	bc 01       	movw	r22, r24
    3a78:	cd 01       	movw	r24, r26
    3a7a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a7e:	dc 01       	movw	r26, r24
    3a80:	cb 01       	movw	r24, r22
    3a82:	9e 83       	std	Y+6, r25	; 0x06
    3a84:	8d 83       	std	Y+5, r24	; 0x05
    3a86:	0f c0       	rjmp	.+30     	; 0x3aa6 <HBUZ_voidOnce+0xd4>
    3a88:	88 ec       	ldi	r24, 0xC8	; 200
    3a8a:	90 e0       	ldi	r25, 0x00	; 0
    3a8c:	9c 83       	std	Y+4, r25	; 0x04
    3a8e:	8b 83       	std	Y+3, r24	; 0x03
    3a90:	8b 81       	ldd	r24, Y+3	; 0x03
    3a92:	9c 81       	ldd	r25, Y+4	; 0x04
    3a94:	01 97       	sbiw	r24, 0x01	; 1
    3a96:	f1 f7       	brne	.-4      	; 0x3a94 <HBUZ_voidOnce+0xc2>
    3a98:	9c 83       	std	Y+4, r25	; 0x04
    3a9a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3a9c:	8d 81       	ldd	r24, Y+5	; 0x05
    3a9e:	9e 81       	ldd	r25, Y+6	; 0x06
    3aa0:	01 97       	sbiw	r24, 0x01	; 1
    3aa2:	9e 83       	std	Y+6, r25	; 0x06
    3aa4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3aa6:	8d 81       	ldd	r24, Y+5	; 0x05
    3aa8:	9e 81       	ldd	r25, Y+6	; 0x06
    3aaa:	00 97       	sbiw	r24, 0x00	; 0
    3aac:	69 f7       	brne	.-38     	; 0x3a88 <HBUZ_voidOnce+0xb6>
    3aae:	14 c0       	rjmp	.+40     	; 0x3ad8 <HBUZ_voidOnce+0x106>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3ab0:	6f 81       	ldd	r22, Y+7	; 0x07
    3ab2:	78 85       	ldd	r23, Y+8	; 0x08
    3ab4:	89 85       	ldd	r24, Y+9	; 0x09
    3ab6:	9a 85       	ldd	r25, Y+10	; 0x0a
    3ab8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3abc:	dc 01       	movw	r26, r24
    3abe:	cb 01       	movw	r24, r22
    3ac0:	9e 83       	std	Y+6, r25	; 0x06
    3ac2:	8d 83       	std	Y+5, r24	; 0x05
    3ac4:	8d 81       	ldd	r24, Y+5	; 0x05
    3ac6:	9e 81       	ldd	r25, Y+6	; 0x06
    3ac8:	9a 83       	std	Y+2, r25	; 0x02
    3aca:	89 83       	std	Y+1, r24	; 0x01
    3acc:	89 81       	ldd	r24, Y+1	; 0x01
    3ace:	9a 81       	ldd	r25, Y+2	; 0x02
    3ad0:	01 97       	sbiw	r24, 0x01	; 1
    3ad2:	f1 f7       	brne	.-4      	; 0x3ad0 <HBUZ_voidOnce+0xfe>
    3ad4:	9a 83       	std	Y+2, r25	; 0x02
    3ad6:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(200);
	MDIO_voidSetPinValue(copy_u8BuzPin , copy_u8BuzPort , DIO_LOW);
    3ad8:	8f 85       	ldd	r24, Y+15	; 0x0f
    3ada:	68 89       	ldd	r22, Y+16	; 0x10
    3adc:	40 e0       	ldi	r20, 0x00	; 0
    3ade:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <MDIO_voidSetPinValue>
}
    3ae2:	60 96       	adiw	r28, 0x10	; 16
    3ae4:	0f b6       	in	r0, 0x3f	; 63
    3ae6:	f8 94       	cli
    3ae8:	de bf       	out	0x3e, r29	; 62
    3aea:	0f be       	out	0x3f, r0	; 63
    3aec:	cd bf       	out	0x3d, r28	; 61
    3aee:	cf 91       	pop	r28
    3af0:	df 91       	pop	r29
    3af2:	08 95       	ret

00003af4 <HBUZ_voidTwice>:

void HBUZ_voidTwice(u8 copy_u8BuzPin,u8 copy_u8BuzPort)
{
    3af4:	df 93       	push	r29
    3af6:	cf 93       	push	r28
    3af8:	cd b7       	in	r28, 0x3d	; 61
    3afa:	de b7       	in	r29, 0x3e	; 62
    3afc:	ac 97       	sbiw	r28, 0x2c	; 44
    3afe:	0f b6       	in	r0, 0x3f	; 63
    3b00:	f8 94       	cli
    3b02:	de bf       	out	0x3e, r29	; 62
    3b04:	0f be       	out	0x3f, r0	; 63
    3b06:	cd bf       	out	0x3d, r28	; 61
    3b08:	8b a7       	std	Y+43, r24	; 0x2b
    3b0a:	6c a7       	std	Y+44, r22	; 0x2c
	MDIO_voidSetPinValue(copy_u8BuzPin , copy_u8BuzPort , DIO_HIGH);
    3b0c:	8b a5       	ldd	r24, Y+43	; 0x2b
    3b0e:	6c a5       	ldd	r22, Y+44	; 0x2c
    3b10:	41 e0       	ldi	r20, 0x01	; 1
    3b12:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <MDIO_voidSetPinValue>
    3b16:	80 e0       	ldi	r24, 0x00	; 0
    3b18:	90 e0       	ldi	r25, 0x00	; 0
    3b1a:	a8 e4       	ldi	r26, 0x48	; 72
    3b1c:	b3 e4       	ldi	r27, 0x43	; 67
    3b1e:	8f a3       	std	Y+39, r24	; 0x27
    3b20:	98 a7       	std	Y+40, r25	; 0x28
    3b22:	a9 a7       	std	Y+41, r26	; 0x29
    3b24:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3b26:	6f a1       	ldd	r22, Y+39	; 0x27
    3b28:	78 a5       	ldd	r23, Y+40	; 0x28
    3b2a:	89 a5       	ldd	r24, Y+41	; 0x29
    3b2c:	9a a5       	ldd	r25, Y+42	; 0x2a
    3b2e:	20 e0       	ldi	r18, 0x00	; 0
    3b30:	30 e0       	ldi	r19, 0x00	; 0
    3b32:	4a ef       	ldi	r20, 0xFA	; 250
    3b34:	54 e4       	ldi	r21, 0x44	; 68
    3b36:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b3a:	dc 01       	movw	r26, r24
    3b3c:	cb 01       	movw	r24, r22
    3b3e:	8b a3       	std	Y+35, r24	; 0x23
    3b40:	9c a3       	std	Y+36, r25	; 0x24
    3b42:	ad a3       	std	Y+37, r26	; 0x25
    3b44:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3b46:	6b a1       	ldd	r22, Y+35	; 0x23
    3b48:	7c a1       	ldd	r23, Y+36	; 0x24
    3b4a:	8d a1       	ldd	r24, Y+37	; 0x25
    3b4c:	9e a1       	ldd	r25, Y+38	; 0x26
    3b4e:	20 e0       	ldi	r18, 0x00	; 0
    3b50:	30 e0       	ldi	r19, 0x00	; 0
    3b52:	40 e8       	ldi	r20, 0x80	; 128
    3b54:	5f e3       	ldi	r21, 0x3F	; 63
    3b56:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3b5a:	88 23       	and	r24, r24
    3b5c:	2c f4       	brge	.+10     	; 0x3b68 <HBUZ_voidTwice+0x74>
		__ticks = 1;
    3b5e:	81 e0       	ldi	r24, 0x01	; 1
    3b60:	90 e0       	ldi	r25, 0x00	; 0
    3b62:	9a a3       	std	Y+34, r25	; 0x22
    3b64:	89 a3       	std	Y+33, r24	; 0x21
    3b66:	3f c0       	rjmp	.+126    	; 0x3be6 <HBUZ_voidTwice+0xf2>
	else if (__tmp > 65535)
    3b68:	6b a1       	ldd	r22, Y+35	; 0x23
    3b6a:	7c a1       	ldd	r23, Y+36	; 0x24
    3b6c:	8d a1       	ldd	r24, Y+37	; 0x25
    3b6e:	9e a1       	ldd	r25, Y+38	; 0x26
    3b70:	20 e0       	ldi	r18, 0x00	; 0
    3b72:	3f ef       	ldi	r19, 0xFF	; 255
    3b74:	4f e7       	ldi	r20, 0x7F	; 127
    3b76:	57 e4       	ldi	r21, 0x47	; 71
    3b78:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3b7c:	18 16       	cp	r1, r24
    3b7e:	4c f5       	brge	.+82     	; 0x3bd2 <HBUZ_voidTwice+0xde>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3b80:	6f a1       	ldd	r22, Y+39	; 0x27
    3b82:	78 a5       	ldd	r23, Y+40	; 0x28
    3b84:	89 a5       	ldd	r24, Y+41	; 0x29
    3b86:	9a a5       	ldd	r25, Y+42	; 0x2a
    3b88:	20 e0       	ldi	r18, 0x00	; 0
    3b8a:	30 e0       	ldi	r19, 0x00	; 0
    3b8c:	40 e2       	ldi	r20, 0x20	; 32
    3b8e:	51 e4       	ldi	r21, 0x41	; 65
    3b90:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b94:	dc 01       	movw	r26, r24
    3b96:	cb 01       	movw	r24, r22
    3b98:	bc 01       	movw	r22, r24
    3b9a:	cd 01       	movw	r24, r26
    3b9c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ba0:	dc 01       	movw	r26, r24
    3ba2:	cb 01       	movw	r24, r22
    3ba4:	9a a3       	std	Y+34, r25	; 0x22
    3ba6:	89 a3       	std	Y+33, r24	; 0x21
    3ba8:	0f c0       	rjmp	.+30     	; 0x3bc8 <HBUZ_voidTwice+0xd4>
    3baa:	88 ec       	ldi	r24, 0xC8	; 200
    3bac:	90 e0       	ldi	r25, 0x00	; 0
    3bae:	98 a3       	std	Y+32, r25	; 0x20
    3bb0:	8f 8f       	std	Y+31, r24	; 0x1f
    3bb2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3bb4:	98 a1       	ldd	r25, Y+32	; 0x20
    3bb6:	01 97       	sbiw	r24, 0x01	; 1
    3bb8:	f1 f7       	brne	.-4      	; 0x3bb6 <HBUZ_voidTwice+0xc2>
    3bba:	98 a3       	std	Y+32, r25	; 0x20
    3bbc:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3bbe:	89 a1       	ldd	r24, Y+33	; 0x21
    3bc0:	9a a1       	ldd	r25, Y+34	; 0x22
    3bc2:	01 97       	sbiw	r24, 0x01	; 1
    3bc4:	9a a3       	std	Y+34, r25	; 0x22
    3bc6:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3bc8:	89 a1       	ldd	r24, Y+33	; 0x21
    3bca:	9a a1       	ldd	r25, Y+34	; 0x22
    3bcc:	00 97       	sbiw	r24, 0x00	; 0
    3bce:	69 f7       	brne	.-38     	; 0x3baa <HBUZ_voidTwice+0xb6>
    3bd0:	14 c0       	rjmp	.+40     	; 0x3bfa <HBUZ_voidTwice+0x106>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3bd2:	6b a1       	ldd	r22, Y+35	; 0x23
    3bd4:	7c a1       	ldd	r23, Y+36	; 0x24
    3bd6:	8d a1       	ldd	r24, Y+37	; 0x25
    3bd8:	9e a1       	ldd	r25, Y+38	; 0x26
    3bda:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3bde:	dc 01       	movw	r26, r24
    3be0:	cb 01       	movw	r24, r22
    3be2:	9a a3       	std	Y+34, r25	; 0x22
    3be4:	89 a3       	std	Y+33, r24	; 0x21
    3be6:	89 a1       	ldd	r24, Y+33	; 0x21
    3be8:	9a a1       	ldd	r25, Y+34	; 0x22
    3bea:	9e 8f       	std	Y+30, r25	; 0x1e
    3bec:	8d 8f       	std	Y+29, r24	; 0x1d
    3bee:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3bf0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3bf2:	01 97       	sbiw	r24, 0x01	; 1
    3bf4:	f1 f7       	brne	.-4      	; 0x3bf2 <HBUZ_voidTwice+0xfe>
    3bf6:	9e 8f       	std	Y+30, r25	; 0x1e
    3bf8:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(200);
	MDIO_voidSetPinValue(copy_u8BuzPin , copy_u8BuzPort , DIO_LOW);
    3bfa:	8b a5       	ldd	r24, Y+43	; 0x2b
    3bfc:	6c a5       	ldd	r22, Y+44	; 0x2c
    3bfe:	40 e0       	ldi	r20, 0x00	; 0
    3c00:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <MDIO_voidSetPinValue>
    3c04:	80 e0       	ldi	r24, 0x00	; 0
    3c06:	90 e0       	ldi	r25, 0x00	; 0
    3c08:	a8 e4       	ldi	r26, 0x48	; 72
    3c0a:	b3 e4       	ldi	r27, 0x43	; 67
    3c0c:	89 8f       	std	Y+25, r24	; 0x19
    3c0e:	9a 8f       	std	Y+26, r25	; 0x1a
    3c10:	ab 8f       	std	Y+27, r26	; 0x1b
    3c12:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3c14:	69 8d       	ldd	r22, Y+25	; 0x19
    3c16:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3c18:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3c1a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3c1c:	20 e0       	ldi	r18, 0x00	; 0
    3c1e:	30 e0       	ldi	r19, 0x00	; 0
    3c20:	4a ef       	ldi	r20, 0xFA	; 250
    3c22:	54 e4       	ldi	r21, 0x44	; 68
    3c24:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c28:	dc 01       	movw	r26, r24
    3c2a:	cb 01       	movw	r24, r22
    3c2c:	8d 8b       	std	Y+21, r24	; 0x15
    3c2e:	9e 8b       	std	Y+22, r25	; 0x16
    3c30:	af 8b       	std	Y+23, r26	; 0x17
    3c32:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3c34:	6d 89       	ldd	r22, Y+21	; 0x15
    3c36:	7e 89       	ldd	r23, Y+22	; 0x16
    3c38:	8f 89       	ldd	r24, Y+23	; 0x17
    3c3a:	98 8d       	ldd	r25, Y+24	; 0x18
    3c3c:	20 e0       	ldi	r18, 0x00	; 0
    3c3e:	30 e0       	ldi	r19, 0x00	; 0
    3c40:	40 e8       	ldi	r20, 0x80	; 128
    3c42:	5f e3       	ldi	r21, 0x3F	; 63
    3c44:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3c48:	88 23       	and	r24, r24
    3c4a:	2c f4       	brge	.+10     	; 0x3c56 <HBUZ_voidTwice+0x162>
		__ticks = 1;
    3c4c:	81 e0       	ldi	r24, 0x01	; 1
    3c4e:	90 e0       	ldi	r25, 0x00	; 0
    3c50:	9c 8b       	std	Y+20, r25	; 0x14
    3c52:	8b 8b       	std	Y+19, r24	; 0x13
    3c54:	3f c0       	rjmp	.+126    	; 0x3cd4 <HBUZ_voidTwice+0x1e0>
	else if (__tmp > 65535)
    3c56:	6d 89       	ldd	r22, Y+21	; 0x15
    3c58:	7e 89       	ldd	r23, Y+22	; 0x16
    3c5a:	8f 89       	ldd	r24, Y+23	; 0x17
    3c5c:	98 8d       	ldd	r25, Y+24	; 0x18
    3c5e:	20 e0       	ldi	r18, 0x00	; 0
    3c60:	3f ef       	ldi	r19, 0xFF	; 255
    3c62:	4f e7       	ldi	r20, 0x7F	; 127
    3c64:	57 e4       	ldi	r21, 0x47	; 71
    3c66:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3c6a:	18 16       	cp	r1, r24
    3c6c:	4c f5       	brge	.+82     	; 0x3cc0 <HBUZ_voidTwice+0x1cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3c6e:	69 8d       	ldd	r22, Y+25	; 0x19
    3c70:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3c72:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3c74:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3c76:	20 e0       	ldi	r18, 0x00	; 0
    3c78:	30 e0       	ldi	r19, 0x00	; 0
    3c7a:	40 e2       	ldi	r20, 0x20	; 32
    3c7c:	51 e4       	ldi	r21, 0x41	; 65
    3c7e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c82:	dc 01       	movw	r26, r24
    3c84:	cb 01       	movw	r24, r22
    3c86:	bc 01       	movw	r22, r24
    3c88:	cd 01       	movw	r24, r26
    3c8a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c8e:	dc 01       	movw	r26, r24
    3c90:	cb 01       	movw	r24, r22
    3c92:	9c 8b       	std	Y+20, r25	; 0x14
    3c94:	8b 8b       	std	Y+19, r24	; 0x13
    3c96:	0f c0       	rjmp	.+30     	; 0x3cb6 <HBUZ_voidTwice+0x1c2>
    3c98:	88 ec       	ldi	r24, 0xC8	; 200
    3c9a:	90 e0       	ldi	r25, 0x00	; 0
    3c9c:	9a 8b       	std	Y+18, r25	; 0x12
    3c9e:	89 8b       	std	Y+17, r24	; 0x11
    3ca0:	89 89       	ldd	r24, Y+17	; 0x11
    3ca2:	9a 89       	ldd	r25, Y+18	; 0x12
    3ca4:	01 97       	sbiw	r24, 0x01	; 1
    3ca6:	f1 f7       	brne	.-4      	; 0x3ca4 <HBUZ_voidTwice+0x1b0>
    3ca8:	9a 8b       	std	Y+18, r25	; 0x12
    3caa:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3cac:	8b 89       	ldd	r24, Y+19	; 0x13
    3cae:	9c 89       	ldd	r25, Y+20	; 0x14
    3cb0:	01 97       	sbiw	r24, 0x01	; 1
    3cb2:	9c 8b       	std	Y+20, r25	; 0x14
    3cb4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3cb6:	8b 89       	ldd	r24, Y+19	; 0x13
    3cb8:	9c 89       	ldd	r25, Y+20	; 0x14
    3cba:	00 97       	sbiw	r24, 0x00	; 0
    3cbc:	69 f7       	brne	.-38     	; 0x3c98 <HBUZ_voidTwice+0x1a4>
    3cbe:	14 c0       	rjmp	.+40     	; 0x3ce8 <HBUZ_voidTwice+0x1f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3cc0:	6d 89       	ldd	r22, Y+21	; 0x15
    3cc2:	7e 89       	ldd	r23, Y+22	; 0x16
    3cc4:	8f 89       	ldd	r24, Y+23	; 0x17
    3cc6:	98 8d       	ldd	r25, Y+24	; 0x18
    3cc8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ccc:	dc 01       	movw	r26, r24
    3cce:	cb 01       	movw	r24, r22
    3cd0:	9c 8b       	std	Y+20, r25	; 0x14
    3cd2:	8b 8b       	std	Y+19, r24	; 0x13
    3cd4:	8b 89       	ldd	r24, Y+19	; 0x13
    3cd6:	9c 89       	ldd	r25, Y+20	; 0x14
    3cd8:	98 8b       	std	Y+16, r25	; 0x10
    3cda:	8f 87       	std	Y+15, r24	; 0x0f
    3cdc:	8f 85       	ldd	r24, Y+15	; 0x0f
    3cde:	98 89       	ldd	r25, Y+16	; 0x10
    3ce0:	01 97       	sbiw	r24, 0x01	; 1
    3ce2:	f1 f7       	brne	.-4      	; 0x3ce0 <HBUZ_voidTwice+0x1ec>
    3ce4:	98 8b       	std	Y+16, r25	; 0x10
    3ce6:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(200);
	MDIO_voidSetPinValue(copy_u8BuzPin , copy_u8BuzPort , DIO_HIGH);
    3ce8:	8b a5       	ldd	r24, Y+43	; 0x2b
    3cea:	6c a5       	ldd	r22, Y+44	; 0x2c
    3cec:	41 e0       	ldi	r20, 0x01	; 1
    3cee:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <MDIO_voidSetPinValue>
    3cf2:	80 e0       	ldi	r24, 0x00	; 0
    3cf4:	90 e0       	ldi	r25, 0x00	; 0
    3cf6:	a8 e4       	ldi	r26, 0x48	; 72
    3cf8:	b3 e4       	ldi	r27, 0x43	; 67
    3cfa:	8b 87       	std	Y+11, r24	; 0x0b
    3cfc:	9c 87       	std	Y+12, r25	; 0x0c
    3cfe:	ad 87       	std	Y+13, r26	; 0x0d
    3d00:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3d02:	6b 85       	ldd	r22, Y+11	; 0x0b
    3d04:	7c 85       	ldd	r23, Y+12	; 0x0c
    3d06:	8d 85       	ldd	r24, Y+13	; 0x0d
    3d08:	9e 85       	ldd	r25, Y+14	; 0x0e
    3d0a:	20 e0       	ldi	r18, 0x00	; 0
    3d0c:	30 e0       	ldi	r19, 0x00	; 0
    3d0e:	4a ef       	ldi	r20, 0xFA	; 250
    3d10:	54 e4       	ldi	r21, 0x44	; 68
    3d12:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d16:	dc 01       	movw	r26, r24
    3d18:	cb 01       	movw	r24, r22
    3d1a:	8f 83       	std	Y+7, r24	; 0x07
    3d1c:	98 87       	std	Y+8, r25	; 0x08
    3d1e:	a9 87       	std	Y+9, r26	; 0x09
    3d20:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3d22:	6f 81       	ldd	r22, Y+7	; 0x07
    3d24:	78 85       	ldd	r23, Y+8	; 0x08
    3d26:	89 85       	ldd	r24, Y+9	; 0x09
    3d28:	9a 85       	ldd	r25, Y+10	; 0x0a
    3d2a:	20 e0       	ldi	r18, 0x00	; 0
    3d2c:	30 e0       	ldi	r19, 0x00	; 0
    3d2e:	40 e8       	ldi	r20, 0x80	; 128
    3d30:	5f e3       	ldi	r21, 0x3F	; 63
    3d32:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3d36:	88 23       	and	r24, r24
    3d38:	2c f4       	brge	.+10     	; 0x3d44 <HBUZ_voidTwice+0x250>
		__ticks = 1;
    3d3a:	81 e0       	ldi	r24, 0x01	; 1
    3d3c:	90 e0       	ldi	r25, 0x00	; 0
    3d3e:	9e 83       	std	Y+6, r25	; 0x06
    3d40:	8d 83       	std	Y+5, r24	; 0x05
    3d42:	3f c0       	rjmp	.+126    	; 0x3dc2 <HBUZ_voidTwice+0x2ce>
	else if (__tmp > 65535)
    3d44:	6f 81       	ldd	r22, Y+7	; 0x07
    3d46:	78 85       	ldd	r23, Y+8	; 0x08
    3d48:	89 85       	ldd	r24, Y+9	; 0x09
    3d4a:	9a 85       	ldd	r25, Y+10	; 0x0a
    3d4c:	20 e0       	ldi	r18, 0x00	; 0
    3d4e:	3f ef       	ldi	r19, 0xFF	; 255
    3d50:	4f e7       	ldi	r20, 0x7F	; 127
    3d52:	57 e4       	ldi	r21, 0x47	; 71
    3d54:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3d58:	18 16       	cp	r1, r24
    3d5a:	4c f5       	brge	.+82     	; 0x3dae <HBUZ_voidTwice+0x2ba>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3d5c:	6b 85       	ldd	r22, Y+11	; 0x0b
    3d5e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3d60:	8d 85       	ldd	r24, Y+13	; 0x0d
    3d62:	9e 85       	ldd	r25, Y+14	; 0x0e
    3d64:	20 e0       	ldi	r18, 0x00	; 0
    3d66:	30 e0       	ldi	r19, 0x00	; 0
    3d68:	40 e2       	ldi	r20, 0x20	; 32
    3d6a:	51 e4       	ldi	r21, 0x41	; 65
    3d6c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d70:	dc 01       	movw	r26, r24
    3d72:	cb 01       	movw	r24, r22
    3d74:	bc 01       	movw	r22, r24
    3d76:	cd 01       	movw	r24, r26
    3d78:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d7c:	dc 01       	movw	r26, r24
    3d7e:	cb 01       	movw	r24, r22
    3d80:	9e 83       	std	Y+6, r25	; 0x06
    3d82:	8d 83       	std	Y+5, r24	; 0x05
    3d84:	0f c0       	rjmp	.+30     	; 0x3da4 <HBUZ_voidTwice+0x2b0>
    3d86:	88 ec       	ldi	r24, 0xC8	; 200
    3d88:	90 e0       	ldi	r25, 0x00	; 0
    3d8a:	9c 83       	std	Y+4, r25	; 0x04
    3d8c:	8b 83       	std	Y+3, r24	; 0x03
    3d8e:	8b 81       	ldd	r24, Y+3	; 0x03
    3d90:	9c 81       	ldd	r25, Y+4	; 0x04
    3d92:	01 97       	sbiw	r24, 0x01	; 1
    3d94:	f1 f7       	brne	.-4      	; 0x3d92 <HBUZ_voidTwice+0x29e>
    3d96:	9c 83       	std	Y+4, r25	; 0x04
    3d98:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3d9a:	8d 81       	ldd	r24, Y+5	; 0x05
    3d9c:	9e 81       	ldd	r25, Y+6	; 0x06
    3d9e:	01 97       	sbiw	r24, 0x01	; 1
    3da0:	9e 83       	std	Y+6, r25	; 0x06
    3da2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3da4:	8d 81       	ldd	r24, Y+5	; 0x05
    3da6:	9e 81       	ldd	r25, Y+6	; 0x06
    3da8:	00 97       	sbiw	r24, 0x00	; 0
    3daa:	69 f7       	brne	.-38     	; 0x3d86 <HBUZ_voidTwice+0x292>
    3dac:	14 c0       	rjmp	.+40     	; 0x3dd6 <HBUZ_voidTwice+0x2e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3dae:	6f 81       	ldd	r22, Y+7	; 0x07
    3db0:	78 85       	ldd	r23, Y+8	; 0x08
    3db2:	89 85       	ldd	r24, Y+9	; 0x09
    3db4:	9a 85       	ldd	r25, Y+10	; 0x0a
    3db6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3dba:	dc 01       	movw	r26, r24
    3dbc:	cb 01       	movw	r24, r22
    3dbe:	9e 83       	std	Y+6, r25	; 0x06
    3dc0:	8d 83       	std	Y+5, r24	; 0x05
    3dc2:	8d 81       	ldd	r24, Y+5	; 0x05
    3dc4:	9e 81       	ldd	r25, Y+6	; 0x06
    3dc6:	9a 83       	std	Y+2, r25	; 0x02
    3dc8:	89 83       	std	Y+1, r24	; 0x01
    3dca:	89 81       	ldd	r24, Y+1	; 0x01
    3dcc:	9a 81       	ldd	r25, Y+2	; 0x02
    3dce:	01 97       	sbiw	r24, 0x01	; 1
    3dd0:	f1 f7       	brne	.-4      	; 0x3dce <HBUZ_voidTwice+0x2da>
    3dd2:	9a 83       	std	Y+2, r25	; 0x02
    3dd4:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(200);
	MDIO_voidSetPinValue(copy_u8BuzPin , copy_u8BuzPort , DIO_LOW);
    3dd6:	8b a5       	ldd	r24, Y+43	; 0x2b
    3dd8:	6c a5       	ldd	r22, Y+44	; 0x2c
    3dda:	40 e0       	ldi	r20, 0x00	; 0
    3ddc:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <MDIO_voidSetPinValue>
}
    3de0:	ac 96       	adiw	r28, 0x2c	; 44
    3de2:	0f b6       	in	r0, 0x3f	; 63
    3de4:	f8 94       	cli
    3de6:	de bf       	out	0x3e, r29	; 62
    3de8:	0f be       	out	0x3f, r0	; 63
    3dea:	cd bf       	out	0x3d, r28	; 61
    3dec:	cf 91       	pop	r28
    3dee:	df 91       	pop	r29
    3df0:	08 95       	ret

00003df2 <HBUZ_voidTriple>:

void HBUZ_voidTriple(u8 copy_u8BuzPin,u8 copy_u8BuzPort)
{
    3df2:	0f 93       	push	r16
    3df4:	1f 93       	push	r17
    3df6:	df 93       	push	r29
    3df8:	cf 93       	push	r28
    3dfa:	cd b7       	in	r28, 0x3d	; 61
    3dfc:	de b7       	in	r29, 0x3e	; 62
    3dfe:	c8 54       	subi	r28, 0x48	; 72
    3e00:	d0 40       	sbci	r29, 0x00	; 0
    3e02:	0f b6       	in	r0, 0x3f	; 63
    3e04:	f8 94       	cli
    3e06:	de bf       	out	0x3e, r29	; 62
    3e08:	0f be       	out	0x3f, r0	; 63
    3e0a:	cd bf       	out	0x3d, r28	; 61
    3e0c:	fe 01       	movw	r30, r28
    3e0e:	e9 5b       	subi	r30, 0xB9	; 185
    3e10:	ff 4f       	sbci	r31, 0xFF	; 255
    3e12:	80 83       	st	Z, r24
    3e14:	fe 01       	movw	r30, r28
    3e16:	e8 5b       	subi	r30, 0xB8	; 184
    3e18:	ff 4f       	sbci	r31, 0xFF	; 255
    3e1a:	60 83       	st	Z, r22
	MDIO_voidSetPinValue(copy_u8BuzPin , copy_u8BuzPort , DIO_HIGH);
    3e1c:	fe 01       	movw	r30, r28
    3e1e:	e9 5b       	subi	r30, 0xB9	; 185
    3e20:	ff 4f       	sbci	r31, 0xFF	; 255
    3e22:	de 01       	movw	r26, r28
    3e24:	a8 5b       	subi	r26, 0xB8	; 184
    3e26:	bf 4f       	sbci	r27, 0xFF	; 255
    3e28:	80 81       	ld	r24, Z
    3e2a:	6c 91       	ld	r22, X
    3e2c:	41 e0       	ldi	r20, 0x01	; 1
    3e2e:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <MDIO_voidSetPinValue>
    3e32:	fe 01       	movw	r30, r28
    3e34:	ed 5b       	subi	r30, 0xBD	; 189
    3e36:	ff 4f       	sbci	r31, 0xFF	; 255
    3e38:	80 e0       	ldi	r24, 0x00	; 0
    3e3a:	90 e0       	ldi	r25, 0x00	; 0
    3e3c:	a8 e4       	ldi	r26, 0x48	; 72
    3e3e:	b3 e4       	ldi	r27, 0x43	; 67
    3e40:	80 83       	st	Z, r24
    3e42:	91 83       	std	Z+1, r25	; 0x01
    3e44:	a2 83       	std	Z+2, r26	; 0x02
    3e46:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3e48:	8e 01       	movw	r16, r28
    3e4a:	01 5c       	subi	r16, 0xC1	; 193
    3e4c:	1f 4f       	sbci	r17, 0xFF	; 255
    3e4e:	fe 01       	movw	r30, r28
    3e50:	ed 5b       	subi	r30, 0xBD	; 189
    3e52:	ff 4f       	sbci	r31, 0xFF	; 255
    3e54:	60 81       	ld	r22, Z
    3e56:	71 81       	ldd	r23, Z+1	; 0x01
    3e58:	82 81       	ldd	r24, Z+2	; 0x02
    3e5a:	93 81       	ldd	r25, Z+3	; 0x03
    3e5c:	20 e0       	ldi	r18, 0x00	; 0
    3e5e:	30 e0       	ldi	r19, 0x00	; 0
    3e60:	4a ef       	ldi	r20, 0xFA	; 250
    3e62:	54 e4       	ldi	r21, 0x44	; 68
    3e64:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e68:	dc 01       	movw	r26, r24
    3e6a:	cb 01       	movw	r24, r22
    3e6c:	f8 01       	movw	r30, r16
    3e6e:	80 83       	st	Z, r24
    3e70:	91 83       	std	Z+1, r25	; 0x01
    3e72:	a2 83       	std	Z+2, r26	; 0x02
    3e74:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3e76:	fe 01       	movw	r30, r28
    3e78:	ff 96       	adiw	r30, 0x3f	; 63
    3e7a:	60 81       	ld	r22, Z
    3e7c:	71 81       	ldd	r23, Z+1	; 0x01
    3e7e:	82 81       	ldd	r24, Z+2	; 0x02
    3e80:	93 81       	ldd	r25, Z+3	; 0x03
    3e82:	20 e0       	ldi	r18, 0x00	; 0
    3e84:	30 e0       	ldi	r19, 0x00	; 0
    3e86:	40 e8       	ldi	r20, 0x80	; 128
    3e88:	5f e3       	ldi	r21, 0x3F	; 63
    3e8a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3e8e:	88 23       	and	r24, r24
    3e90:	2c f4       	brge	.+10     	; 0x3e9c <HBUZ_voidTriple+0xaa>
		__ticks = 1;
    3e92:	81 e0       	ldi	r24, 0x01	; 1
    3e94:	90 e0       	ldi	r25, 0x00	; 0
    3e96:	9e af       	std	Y+62, r25	; 0x3e
    3e98:	8d af       	std	Y+61, r24	; 0x3d
    3e9a:	46 c0       	rjmp	.+140    	; 0x3f28 <HBUZ_voidTriple+0x136>
	else if (__tmp > 65535)
    3e9c:	fe 01       	movw	r30, r28
    3e9e:	ff 96       	adiw	r30, 0x3f	; 63
    3ea0:	60 81       	ld	r22, Z
    3ea2:	71 81       	ldd	r23, Z+1	; 0x01
    3ea4:	82 81       	ldd	r24, Z+2	; 0x02
    3ea6:	93 81       	ldd	r25, Z+3	; 0x03
    3ea8:	20 e0       	ldi	r18, 0x00	; 0
    3eaa:	3f ef       	ldi	r19, 0xFF	; 255
    3eac:	4f e7       	ldi	r20, 0x7F	; 127
    3eae:	57 e4       	ldi	r21, 0x47	; 71
    3eb0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3eb4:	18 16       	cp	r1, r24
    3eb6:	64 f5       	brge	.+88     	; 0x3f10 <HBUZ_voidTriple+0x11e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3eb8:	fe 01       	movw	r30, r28
    3eba:	ed 5b       	subi	r30, 0xBD	; 189
    3ebc:	ff 4f       	sbci	r31, 0xFF	; 255
    3ebe:	60 81       	ld	r22, Z
    3ec0:	71 81       	ldd	r23, Z+1	; 0x01
    3ec2:	82 81       	ldd	r24, Z+2	; 0x02
    3ec4:	93 81       	ldd	r25, Z+3	; 0x03
    3ec6:	20 e0       	ldi	r18, 0x00	; 0
    3ec8:	30 e0       	ldi	r19, 0x00	; 0
    3eca:	40 e2       	ldi	r20, 0x20	; 32
    3ecc:	51 e4       	ldi	r21, 0x41	; 65
    3ece:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ed2:	dc 01       	movw	r26, r24
    3ed4:	cb 01       	movw	r24, r22
    3ed6:	bc 01       	movw	r22, r24
    3ed8:	cd 01       	movw	r24, r26
    3eda:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ede:	dc 01       	movw	r26, r24
    3ee0:	cb 01       	movw	r24, r22
    3ee2:	9e af       	std	Y+62, r25	; 0x3e
    3ee4:	8d af       	std	Y+61, r24	; 0x3d
    3ee6:	0f c0       	rjmp	.+30     	; 0x3f06 <HBUZ_voidTriple+0x114>
    3ee8:	88 ec       	ldi	r24, 0xC8	; 200
    3eea:	90 e0       	ldi	r25, 0x00	; 0
    3eec:	9c af       	std	Y+60, r25	; 0x3c
    3eee:	8b af       	std	Y+59, r24	; 0x3b
    3ef0:	8b ad       	ldd	r24, Y+59	; 0x3b
    3ef2:	9c ad       	ldd	r25, Y+60	; 0x3c
    3ef4:	01 97       	sbiw	r24, 0x01	; 1
    3ef6:	f1 f7       	brne	.-4      	; 0x3ef4 <HBUZ_voidTriple+0x102>
    3ef8:	9c af       	std	Y+60, r25	; 0x3c
    3efa:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3efc:	8d ad       	ldd	r24, Y+61	; 0x3d
    3efe:	9e ad       	ldd	r25, Y+62	; 0x3e
    3f00:	01 97       	sbiw	r24, 0x01	; 1
    3f02:	9e af       	std	Y+62, r25	; 0x3e
    3f04:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3f06:	8d ad       	ldd	r24, Y+61	; 0x3d
    3f08:	9e ad       	ldd	r25, Y+62	; 0x3e
    3f0a:	00 97       	sbiw	r24, 0x00	; 0
    3f0c:	69 f7       	brne	.-38     	; 0x3ee8 <HBUZ_voidTriple+0xf6>
    3f0e:	16 c0       	rjmp	.+44     	; 0x3f3c <HBUZ_voidTriple+0x14a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3f10:	fe 01       	movw	r30, r28
    3f12:	ff 96       	adiw	r30, 0x3f	; 63
    3f14:	60 81       	ld	r22, Z
    3f16:	71 81       	ldd	r23, Z+1	; 0x01
    3f18:	82 81       	ldd	r24, Z+2	; 0x02
    3f1a:	93 81       	ldd	r25, Z+3	; 0x03
    3f1c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3f20:	dc 01       	movw	r26, r24
    3f22:	cb 01       	movw	r24, r22
    3f24:	9e af       	std	Y+62, r25	; 0x3e
    3f26:	8d af       	std	Y+61, r24	; 0x3d
    3f28:	8d ad       	ldd	r24, Y+61	; 0x3d
    3f2a:	9e ad       	ldd	r25, Y+62	; 0x3e
    3f2c:	9a af       	std	Y+58, r25	; 0x3a
    3f2e:	89 af       	std	Y+57, r24	; 0x39
    3f30:	89 ad       	ldd	r24, Y+57	; 0x39
    3f32:	9a ad       	ldd	r25, Y+58	; 0x3a
    3f34:	01 97       	sbiw	r24, 0x01	; 1
    3f36:	f1 f7       	brne	.-4      	; 0x3f34 <HBUZ_voidTriple+0x142>
    3f38:	9a af       	std	Y+58, r25	; 0x3a
    3f3a:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(200);
	MDIO_voidSetPinValue(copy_u8BuzPin , copy_u8BuzPort , DIO_LOW);
    3f3c:	fe 01       	movw	r30, r28
    3f3e:	e9 5b       	subi	r30, 0xB9	; 185
    3f40:	ff 4f       	sbci	r31, 0xFF	; 255
    3f42:	de 01       	movw	r26, r28
    3f44:	a8 5b       	subi	r26, 0xB8	; 184
    3f46:	bf 4f       	sbci	r27, 0xFF	; 255
    3f48:	80 81       	ld	r24, Z
    3f4a:	6c 91       	ld	r22, X
    3f4c:	40 e0       	ldi	r20, 0x00	; 0
    3f4e:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <MDIO_voidSetPinValue>
    3f52:	80 e0       	ldi	r24, 0x00	; 0
    3f54:	90 e0       	ldi	r25, 0x00	; 0
    3f56:	a8 e4       	ldi	r26, 0x48	; 72
    3f58:	b3 e4       	ldi	r27, 0x43	; 67
    3f5a:	8d ab       	std	Y+53, r24	; 0x35
    3f5c:	9e ab       	std	Y+54, r25	; 0x36
    3f5e:	af ab       	std	Y+55, r26	; 0x37
    3f60:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3f62:	6d a9       	ldd	r22, Y+53	; 0x35
    3f64:	7e a9       	ldd	r23, Y+54	; 0x36
    3f66:	8f a9       	ldd	r24, Y+55	; 0x37
    3f68:	98 ad       	ldd	r25, Y+56	; 0x38
    3f6a:	20 e0       	ldi	r18, 0x00	; 0
    3f6c:	30 e0       	ldi	r19, 0x00	; 0
    3f6e:	4a ef       	ldi	r20, 0xFA	; 250
    3f70:	54 e4       	ldi	r21, 0x44	; 68
    3f72:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f76:	dc 01       	movw	r26, r24
    3f78:	cb 01       	movw	r24, r22
    3f7a:	89 ab       	std	Y+49, r24	; 0x31
    3f7c:	9a ab       	std	Y+50, r25	; 0x32
    3f7e:	ab ab       	std	Y+51, r26	; 0x33
    3f80:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3f82:	69 a9       	ldd	r22, Y+49	; 0x31
    3f84:	7a a9       	ldd	r23, Y+50	; 0x32
    3f86:	8b a9       	ldd	r24, Y+51	; 0x33
    3f88:	9c a9       	ldd	r25, Y+52	; 0x34
    3f8a:	20 e0       	ldi	r18, 0x00	; 0
    3f8c:	30 e0       	ldi	r19, 0x00	; 0
    3f8e:	40 e8       	ldi	r20, 0x80	; 128
    3f90:	5f e3       	ldi	r21, 0x3F	; 63
    3f92:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3f96:	88 23       	and	r24, r24
    3f98:	2c f4       	brge	.+10     	; 0x3fa4 <HBUZ_voidTriple+0x1b2>
		__ticks = 1;
    3f9a:	81 e0       	ldi	r24, 0x01	; 1
    3f9c:	90 e0       	ldi	r25, 0x00	; 0
    3f9e:	98 ab       	std	Y+48, r25	; 0x30
    3fa0:	8f a7       	std	Y+47, r24	; 0x2f
    3fa2:	3f c0       	rjmp	.+126    	; 0x4022 <HBUZ_voidTriple+0x230>
	else if (__tmp > 65535)
    3fa4:	69 a9       	ldd	r22, Y+49	; 0x31
    3fa6:	7a a9       	ldd	r23, Y+50	; 0x32
    3fa8:	8b a9       	ldd	r24, Y+51	; 0x33
    3faa:	9c a9       	ldd	r25, Y+52	; 0x34
    3fac:	20 e0       	ldi	r18, 0x00	; 0
    3fae:	3f ef       	ldi	r19, 0xFF	; 255
    3fb0:	4f e7       	ldi	r20, 0x7F	; 127
    3fb2:	57 e4       	ldi	r21, 0x47	; 71
    3fb4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3fb8:	18 16       	cp	r1, r24
    3fba:	4c f5       	brge	.+82     	; 0x400e <HBUZ_voidTriple+0x21c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3fbc:	6d a9       	ldd	r22, Y+53	; 0x35
    3fbe:	7e a9       	ldd	r23, Y+54	; 0x36
    3fc0:	8f a9       	ldd	r24, Y+55	; 0x37
    3fc2:	98 ad       	ldd	r25, Y+56	; 0x38
    3fc4:	20 e0       	ldi	r18, 0x00	; 0
    3fc6:	30 e0       	ldi	r19, 0x00	; 0
    3fc8:	40 e2       	ldi	r20, 0x20	; 32
    3fca:	51 e4       	ldi	r21, 0x41	; 65
    3fcc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3fd0:	dc 01       	movw	r26, r24
    3fd2:	cb 01       	movw	r24, r22
    3fd4:	bc 01       	movw	r22, r24
    3fd6:	cd 01       	movw	r24, r26
    3fd8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3fdc:	dc 01       	movw	r26, r24
    3fde:	cb 01       	movw	r24, r22
    3fe0:	98 ab       	std	Y+48, r25	; 0x30
    3fe2:	8f a7       	std	Y+47, r24	; 0x2f
    3fe4:	0f c0       	rjmp	.+30     	; 0x4004 <HBUZ_voidTriple+0x212>
    3fe6:	88 ec       	ldi	r24, 0xC8	; 200
    3fe8:	90 e0       	ldi	r25, 0x00	; 0
    3fea:	9e a7       	std	Y+46, r25	; 0x2e
    3fec:	8d a7       	std	Y+45, r24	; 0x2d
    3fee:	8d a5       	ldd	r24, Y+45	; 0x2d
    3ff0:	9e a5       	ldd	r25, Y+46	; 0x2e
    3ff2:	01 97       	sbiw	r24, 0x01	; 1
    3ff4:	f1 f7       	brne	.-4      	; 0x3ff2 <HBUZ_voidTriple+0x200>
    3ff6:	9e a7       	std	Y+46, r25	; 0x2e
    3ff8:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3ffa:	8f a5       	ldd	r24, Y+47	; 0x2f
    3ffc:	98 a9       	ldd	r25, Y+48	; 0x30
    3ffe:	01 97       	sbiw	r24, 0x01	; 1
    4000:	98 ab       	std	Y+48, r25	; 0x30
    4002:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4004:	8f a5       	ldd	r24, Y+47	; 0x2f
    4006:	98 a9       	ldd	r25, Y+48	; 0x30
    4008:	00 97       	sbiw	r24, 0x00	; 0
    400a:	69 f7       	brne	.-38     	; 0x3fe6 <HBUZ_voidTriple+0x1f4>
    400c:	14 c0       	rjmp	.+40     	; 0x4036 <HBUZ_voidTriple+0x244>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    400e:	69 a9       	ldd	r22, Y+49	; 0x31
    4010:	7a a9       	ldd	r23, Y+50	; 0x32
    4012:	8b a9       	ldd	r24, Y+51	; 0x33
    4014:	9c a9       	ldd	r25, Y+52	; 0x34
    4016:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    401a:	dc 01       	movw	r26, r24
    401c:	cb 01       	movw	r24, r22
    401e:	98 ab       	std	Y+48, r25	; 0x30
    4020:	8f a7       	std	Y+47, r24	; 0x2f
    4022:	8f a5       	ldd	r24, Y+47	; 0x2f
    4024:	98 a9       	ldd	r25, Y+48	; 0x30
    4026:	9c a7       	std	Y+44, r25	; 0x2c
    4028:	8b a7       	std	Y+43, r24	; 0x2b
    402a:	8b a5       	ldd	r24, Y+43	; 0x2b
    402c:	9c a5       	ldd	r25, Y+44	; 0x2c
    402e:	01 97       	sbiw	r24, 0x01	; 1
    4030:	f1 f7       	brne	.-4      	; 0x402e <HBUZ_voidTriple+0x23c>
    4032:	9c a7       	std	Y+44, r25	; 0x2c
    4034:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(200);
	MDIO_voidSetPinValue(copy_u8BuzPin , copy_u8BuzPort , DIO_HIGH);
    4036:	fe 01       	movw	r30, r28
    4038:	e9 5b       	subi	r30, 0xB9	; 185
    403a:	ff 4f       	sbci	r31, 0xFF	; 255
    403c:	de 01       	movw	r26, r28
    403e:	a8 5b       	subi	r26, 0xB8	; 184
    4040:	bf 4f       	sbci	r27, 0xFF	; 255
    4042:	80 81       	ld	r24, Z
    4044:	6c 91       	ld	r22, X
    4046:	41 e0       	ldi	r20, 0x01	; 1
    4048:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <MDIO_voidSetPinValue>
    404c:	80 e0       	ldi	r24, 0x00	; 0
    404e:	90 e0       	ldi	r25, 0x00	; 0
    4050:	a8 e4       	ldi	r26, 0x48	; 72
    4052:	b3 e4       	ldi	r27, 0x43	; 67
    4054:	8f a3       	std	Y+39, r24	; 0x27
    4056:	98 a7       	std	Y+40, r25	; 0x28
    4058:	a9 a7       	std	Y+41, r26	; 0x29
    405a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    405c:	6f a1       	ldd	r22, Y+39	; 0x27
    405e:	78 a5       	ldd	r23, Y+40	; 0x28
    4060:	89 a5       	ldd	r24, Y+41	; 0x29
    4062:	9a a5       	ldd	r25, Y+42	; 0x2a
    4064:	20 e0       	ldi	r18, 0x00	; 0
    4066:	30 e0       	ldi	r19, 0x00	; 0
    4068:	4a ef       	ldi	r20, 0xFA	; 250
    406a:	54 e4       	ldi	r21, 0x44	; 68
    406c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4070:	dc 01       	movw	r26, r24
    4072:	cb 01       	movw	r24, r22
    4074:	8b a3       	std	Y+35, r24	; 0x23
    4076:	9c a3       	std	Y+36, r25	; 0x24
    4078:	ad a3       	std	Y+37, r26	; 0x25
    407a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    407c:	6b a1       	ldd	r22, Y+35	; 0x23
    407e:	7c a1       	ldd	r23, Y+36	; 0x24
    4080:	8d a1       	ldd	r24, Y+37	; 0x25
    4082:	9e a1       	ldd	r25, Y+38	; 0x26
    4084:	20 e0       	ldi	r18, 0x00	; 0
    4086:	30 e0       	ldi	r19, 0x00	; 0
    4088:	40 e8       	ldi	r20, 0x80	; 128
    408a:	5f e3       	ldi	r21, 0x3F	; 63
    408c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4090:	88 23       	and	r24, r24
    4092:	2c f4       	brge	.+10     	; 0x409e <HBUZ_voidTriple+0x2ac>
		__ticks = 1;
    4094:	81 e0       	ldi	r24, 0x01	; 1
    4096:	90 e0       	ldi	r25, 0x00	; 0
    4098:	9a a3       	std	Y+34, r25	; 0x22
    409a:	89 a3       	std	Y+33, r24	; 0x21
    409c:	3f c0       	rjmp	.+126    	; 0x411c <HBUZ_voidTriple+0x32a>
	else if (__tmp > 65535)
    409e:	6b a1       	ldd	r22, Y+35	; 0x23
    40a0:	7c a1       	ldd	r23, Y+36	; 0x24
    40a2:	8d a1       	ldd	r24, Y+37	; 0x25
    40a4:	9e a1       	ldd	r25, Y+38	; 0x26
    40a6:	20 e0       	ldi	r18, 0x00	; 0
    40a8:	3f ef       	ldi	r19, 0xFF	; 255
    40aa:	4f e7       	ldi	r20, 0x7F	; 127
    40ac:	57 e4       	ldi	r21, 0x47	; 71
    40ae:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    40b2:	18 16       	cp	r1, r24
    40b4:	4c f5       	brge	.+82     	; 0x4108 <HBUZ_voidTriple+0x316>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    40b6:	6f a1       	ldd	r22, Y+39	; 0x27
    40b8:	78 a5       	ldd	r23, Y+40	; 0x28
    40ba:	89 a5       	ldd	r24, Y+41	; 0x29
    40bc:	9a a5       	ldd	r25, Y+42	; 0x2a
    40be:	20 e0       	ldi	r18, 0x00	; 0
    40c0:	30 e0       	ldi	r19, 0x00	; 0
    40c2:	40 e2       	ldi	r20, 0x20	; 32
    40c4:	51 e4       	ldi	r21, 0x41	; 65
    40c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    40ca:	dc 01       	movw	r26, r24
    40cc:	cb 01       	movw	r24, r22
    40ce:	bc 01       	movw	r22, r24
    40d0:	cd 01       	movw	r24, r26
    40d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    40d6:	dc 01       	movw	r26, r24
    40d8:	cb 01       	movw	r24, r22
    40da:	9a a3       	std	Y+34, r25	; 0x22
    40dc:	89 a3       	std	Y+33, r24	; 0x21
    40de:	0f c0       	rjmp	.+30     	; 0x40fe <HBUZ_voidTriple+0x30c>
    40e0:	88 ec       	ldi	r24, 0xC8	; 200
    40e2:	90 e0       	ldi	r25, 0x00	; 0
    40e4:	98 a3       	std	Y+32, r25	; 0x20
    40e6:	8f 8f       	std	Y+31, r24	; 0x1f
    40e8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    40ea:	98 a1       	ldd	r25, Y+32	; 0x20
    40ec:	01 97       	sbiw	r24, 0x01	; 1
    40ee:	f1 f7       	brne	.-4      	; 0x40ec <HBUZ_voidTriple+0x2fa>
    40f0:	98 a3       	std	Y+32, r25	; 0x20
    40f2:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    40f4:	89 a1       	ldd	r24, Y+33	; 0x21
    40f6:	9a a1       	ldd	r25, Y+34	; 0x22
    40f8:	01 97       	sbiw	r24, 0x01	; 1
    40fa:	9a a3       	std	Y+34, r25	; 0x22
    40fc:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    40fe:	89 a1       	ldd	r24, Y+33	; 0x21
    4100:	9a a1       	ldd	r25, Y+34	; 0x22
    4102:	00 97       	sbiw	r24, 0x00	; 0
    4104:	69 f7       	brne	.-38     	; 0x40e0 <HBUZ_voidTriple+0x2ee>
    4106:	14 c0       	rjmp	.+40     	; 0x4130 <HBUZ_voidTriple+0x33e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4108:	6b a1       	ldd	r22, Y+35	; 0x23
    410a:	7c a1       	ldd	r23, Y+36	; 0x24
    410c:	8d a1       	ldd	r24, Y+37	; 0x25
    410e:	9e a1       	ldd	r25, Y+38	; 0x26
    4110:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4114:	dc 01       	movw	r26, r24
    4116:	cb 01       	movw	r24, r22
    4118:	9a a3       	std	Y+34, r25	; 0x22
    411a:	89 a3       	std	Y+33, r24	; 0x21
    411c:	89 a1       	ldd	r24, Y+33	; 0x21
    411e:	9a a1       	ldd	r25, Y+34	; 0x22
    4120:	9e 8f       	std	Y+30, r25	; 0x1e
    4122:	8d 8f       	std	Y+29, r24	; 0x1d
    4124:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4126:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4128:	01 97       	sbiw	r24, 0x01	; 1
    412a:	f1 f7       	brne	.-4      	; 0x4128 <HBUZ_voidTriple+0x336>
    412c:	9e 8f       	std	Y+30, r25	; 0x1e
    412e:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(200);
	MDIO_voidSetPinValue(copy_u8BuzPin , copy_u8BuzPort , DIO_LOW);
    4130:	fe 01       	movw	r30, r28
    4132:	e9 5b       	subi	r30, 0xB9	; 185
    4134:	ff 4f       	sbci	r31, 0xFF	; 255
    4136:	de 01       	movw	r26, r28
    4138:	a8 5b       	subi	r26, 0xB8	; 184
    413a:	bf 4f       	sbci	r27, 0xFF	; 255
    413c:	80 81       	ld	r24, Z
    413e:	6c 91       	ld	r22, X
    4140:	40 e0       	ldi	r20, 0x00	; 0
    4142:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <MDIO_voidSetPinValue>
    4146:	80 e0       	ldi	r24, 0x00	; 0
    4148:	90 e0       	ldi	r25, 0x00	; 0
    414a:	a8 e4       	ldi	r26, 0x48	; 72
    414c:	b3 e4       	ldi	r27, 0x43	; 67
    414e:	89 8f       	std	Y+25, r24	; 0x19
    4150:	9a 8f       	std	Y+26, r25	; 0x1a
    4152:	ab 8f       	std	Y+27, r26	; 0x1b
    4154:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4156:	69 8d       	ldd	r22, Y+25	; 0x19
    4158:	7a 8d       	ldd	r23, Y+26	; 0x1a
    415a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    415c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    415e:	20 e0       	ldi	r18, 0x00	; 0
    4160:	30 e0       	ldi	r19, 0x00	; 0
    4162:	4a ef       	ldi	r20, 0xFA	; 250
    4164:	54 e4       	ldi	r21, 0x44	; 68
    4166:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    416a:	dc 01       	movw	r26, r24
    416c:	cb 01       	movw	r24, r22
    416e:	8d 8b       	std	Y+21, r24	; 0x15
    4170:	9e 8b       	std	Y+22, r25	; 0x16
    4172:	af 8b       	std	Y+23, r26	; 0x17
    4174:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    4176:	6d 89       	ldd	r22, Y+21	; 0x15
    4178:	7e 89       	ldd	r23, Y+22	; 0x16
    417a:	8f 89       	ldd	r24, Y+23	; 0x17
    417c:	98 8d       	ldd	r25, Y+24	; 0x18
    417e:	20 e0       	ldi	r18, 0x00	; 0
    4180:	30 e0       	ldi	r19, 0x00	; 0
    4182:	40 e8       	ldi	r20, 0x80	; 128
    4184:	5f e3       	ldi	r21, 0x3F	; 63
    4186:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    418a:	88 23       	and	r24, r24
    418c:	2c f4       	brge	.+10     	; 0x4198 <HBUZ_voidTriple+0x3a6>
		__ticks = 1;
    418e:	81 e0       	ldi	r24, 0x01	; 1
    4190:	90 e0       	ldi	r25, 0x00	; 0
    4192:	9c 8b       	std	Y+20, r25	; 0x14
    4194:	8b 8b       	std	Y+19, r24	; 0x13
    4196:	3f c0       	rjmp	.+126    	; 0x4216 <HBUZ_voidTriple+0x424>
	else if (__tmp > 65535)
    4198:	6d 89       	ldd	r22, Y+21	; 0x15
    419a:	7e 89       	ldd	r23, Y+22	; 0x16
    419c:	8f 89       	ldd	r24, Y+23	; 0x17
    419e:	98 8d       	ldd	r25, Y+24	; 0x18
    41a0:	20 e0       	ldi	r18, 0x00	; 0
    41a2:	3f ef       	ldi	r19, 0xFF	; 255
    41a4:	4f e7       	ldi	r20, 0x7F	; 127
    41a6:	57 e4       	ldi	r21, 0x47	; 71
    41a8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    41ac:	18 16       	cp	r1, r24
    41ae:	4c f5       	brge	.+82     	; 0x4202 <HBUZ_voidTriple+0x410>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    41b0:	69 8d       	ldd	r22, Y+25	; 0x19
    41b2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    41b4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    41b6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    41b8:	20 e0       	ldi	r18, 0x00	; 0
    41ba:	30 e0       	ldi	r19, 0x00	; 0
    41bc:	40 e2       	ldi	r20, 0x20	; 32
    41be:	51 e4       	ldi	r21, 0x41	; 65
    41c0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    41c4:	dc 01       	movw	r26, r24
    41c6:	cb 01       	movw	r24, r22
    41c8:	bc 01       	movw	r22, r24
    41ca:	cd 01       	movw	r24, r26
    41cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    41d0:	dc 01       	movw	r26, r24
    41d2:	cb 01       	movw	r24, r22
    41d4:	9c 8b       	std	Y+20, r25	; 0x14
    41d6:	8b 8b       	std	Y+19, r24	; 0x13
    41d8:	0f c0       	rjmp	.+30     	; 0x41f8 <HBUZ_voidTriple+0x406>
    41da:	88 ec       	ldi	r24, 0xC8	; 200
    41dc:	90 e0       	ldi	r25, 0x00	; 0
    41de:	9a 8b       	std	Y+18, r25	; 0x12
    41e0:	89 8b       	std	Y+17, r24	; 0x11
    41e2:	89 89       	ldd	r24, Y+17	; 0x11
    41e4:	9a 89       	ldd	r25, Y+18	; 0x12
    41e6:	01 97       	sbiw	r24, 0x01	; 1
    41e8:	f1 f7       	brne	.-4      	; 0x41e6 <HBUZ_voidTriple+0x3f4>
    41ea:	9a 8b       	std	Y+18, r25	; 0x12
    41ec:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    41ee:	8b 89       	ldd	r24, Y+19	; 0x13
    41f0:	9c 89       	ldd	r25, Y+20	; 0x14
    41f2:	01 97       	sbiw	r24, 0x01	; 1
    41f4:	9c 8b       	std	Y+20, r25	; 0x14
    41f6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    41f8:	8b 89       	ldd	r24, Y+19	; 0x13
    41fa:	9c 89       	ldd	r25, Y+20	; 0x14
    41fc:	00 97       	sbiw	r24, 0x00	; 0
    41fe:	69 f7       	brne	.-38     	; 0x41da <HBUZ_voidTriple+0x3e8>
    4200:	14 c0       	rjmp	.+40     	; 0x422a <HBUZ_voidTriple+0x438>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4202:	6d 89       	ldd	r22, Y+21	; 0x15
    4204:	7e 89       	ldd	r23, Y+22	; 0x16
    4206:	8f 89       	ldd	r24, Y+23	; 0x17
    4208:	98 8d       	ldd	r25, Y+24	; 0x18
    420a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    420e:	dc 01       	movw	r26, r24
    4210:	cb 01       	movw	r24, r22
    4212:	9c 8b       	std	Y+20, r25	; 0x14
    4214:	8b 8b       	std	Y+19, r24	; 0x13
    4216:	8b 89       	ldd	r24, Y+19	; 0x13
    4218:	9c 89       	ldd	r25, Y+20	; 0x14
    421a:	98 8b       	std	Y+16, r25	; 0x10
    421c:	8f 87       	std	Y+15, r24	; 0x0f
    421e:	8f 85       	ldd	r24, Y+15	; 0x0f
    4220:	98 89       	ldd	r25, Y+16	; 0x10
    4222:	01 97       	sbiw	r24, 0x01	; 1
    4224:	f1 f7       	brne	.-4      	; 0x4222 <HBUZ_voidTriple+0x430>
    4226:	98 8b       	std	Y+16, r25	; 0x10
    4228:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(200);
	MDIO_voidSetPinValue(copy_u8BuzPin , copy_u8BuzPort , DIO_HIGH);
    422a:	fe 01       	movw	r30, r28
    422c:	e9 5b       	subi	r30, 0xB9	; 185
    422e:	ff 4f       	sbci	r31, 0xFF	; 255
    4230:	de 01       	movw	r26, r28
    4232:	a8 5b       	subi	r26, 0xB8	; 184
    4234:	bf 4f       	sbci	r27, 0xFF	; 255
    4236:	80 81       	ld	r24, Z
    4238:	6c 91       	ld	r22, X
    423a:	41 e0       	ldi	r20, 0x01	; 1
    423c:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <MDIO_voidSetPinValue>
    4240:	80 e0       	ldi	r24, 0x00	; 0
    4242:	90 e0       	ldi	r25, 0x00	; 0
    4244:	a8 e4       	ldi	r26, 0x48	; 72
    4246:	b3 e4       	ldi	r27, 0x43	; 67
    4248:	8b 87       	std	Y+11, r24	; 0x0b
    424a:	9c 87       	std	Y+12, r25	; 0x0c
    424c:	ad 87       	std	Y+13, r26	; 0x0d
    424e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4250:	6b 85       	ldd	r22, Y+11	; 0x0b
    4252:	7c 85       	ldd	r23, Y+12	; 0x0c
    4254:	8d 85       	ldd	r24, Y+13	; 0x0d
    4256:	9e 85       	ldd	r25, Y+14	; 0x0e
    4258:	20 e0       	ldi	r18, 0x00	; 0
    425a:	30 e0       	ldi	r19, 0x00	; 0
    425c:	4a ef       	ldi	r20, 0xFA	; 250
    425e:	54 e4       	ldi	r21, 0x44	; 68
    4260:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4264:	dc 01       	movw	r26, r24
    4266:	cb 01       	movw	r24, r22
    4268:	8f 83       	std	Y+7, r24	; 0x07
    426a:	98 87       	std	Y+8, r25	; 0x08
    426c:	a9 87       	std	Y+9, r26	; 0x09
    426e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4270:	6f 81       	ldd	r22, Y+7	; 0x07
    4272:	78 85       	ldd	r23, Y+8	; 0x08
    4274:	89 85       	ldd	r24, Y+9	; 0x09
    4276:	9a 85       	ldd	r25, Y+10	; 0x0a
    4278:	20 e0       	ldi	r18, 0x00	; 0
    427a:	30 e0       	ldi	r19, 0x00	; 0
    427c:	40 e8       	ldi	r20, 0x80	; 128
    427e:	5f e3       	ldi	r21, 0x3F	; 63
    4280:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4284:	88 23       	and	r24, r24
    4286:	2c f4       	brge	.+10     	; 0x4292 <HBUZ_voidTriple+0x4a0>
		__ticks = 1;
    4288:	81 e0       	ldi	r24, 0x01	; 1
    428a:	90 e0       	ldi	r25, 0x00	; 0
    428c:	9e 83       	std	Y+6, r25	; 0x06
    428e:	8d 83       	std	Y+5, r24	; 0x05
    4290:	3f c0       	rjmp	.+126    	; 0x4310 <HBUZ_voidTriple+0x51e>
	else if (__tmp > 65535)
    4292:	6f 81       	ldd	r22, Y+7	; 0x07
    4294:	78 85       	ldd	r23, Y+8	; 0x08
    4296:	89 85       	ldd	r24, Y+9	; 0x09
    4298:	9a 85       	ldd	r25, Y+10	; 0x0a
    429a:	20 e0       	ldi	r18, 0x00	; 0
    429c:	3f ef       	ldi	r19, 0xFF	; 255
    429e:	4f e7       	ldi	r20, 0x7F	; 127
    42a0:	57 e4       	ldi	r21, 0x47	; 71
    42a2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    42a6:	18 16       	cp	r1, r24
    42a8:	4c f5       	brge	.+82     	; 0x42fc <HBUZ_voidTriple+0x50a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    42aa:	6b 85       	ldd	r22, Y+11	; 0x0b
    42ac:	7c 85       	ldd	r23, Y+12	; 0x0c
    42ae:	8d 85       	ldd	r24, Y+13	; 0x0d
    42b0:	9e 85       	ldd	r25, Y+14	; 0x0e
    42b2:	20 e0       	ldi	r18, 0x00	; 0
    42b4:	30 e0       	ldi	r19, 0x00	; 0
    42b6:	40 e2       	ldi	r20, 0x20	; 32
    42b8:	51 e4       	ldi	r21, 0x41	; 65
    42ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    42be:	dc 01       	movw	r26, r24
    42c0:	cb 01       	movw	r24, r22
    42c2:	bc 01       	movw	r22, r24
    42c4:	cd 01       	movw	r24, r26
    42c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    42ca:	dc 01       	movw	r26, r24
    42cc:	cb 01       	movw	r24, r22
    42ce:	9e 83       	std	Y+6, r25	; 0x06
    42d0:	8d 83       	std	Y+5, r24	; 0x05
    42d2:	0f c0       	rjmp	.+30     	; 0x42f2 <HBUZ_voidTriple+0x500>
    42d4:	88 ec       	ldi	r24, 0xC8	; 200
    42d6:	90 e0       	ldi	r25, 0x00	; 0
    42d8:	9c 83       	std	Y+4, r25	; 0x04
    42da:	8b 83       	std	Y+3, r24	; 0x03
    42dc:	8b 81       	ldd	r24, Y+3	; 0x03
    42de:	9c 81       	ldd	r25, Y+4	; 0x04
    42e0:	01 97       	sbiw	r24, 0x01	; 1
    42e2:	f1 f7       	brne	.-4      	; 0x42e0 <HBUZ_voidTriple+0x4ee>
    42e4:	9c 83       	std	Y+4, r25	; 0x04
    42e6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    42e8:	8d 81       	ldd	r24, Y+5	; 0x05
    42ea:	9e 81       	ldd	r25, Y+6	; 0x06
    42ec:	01 97       	sbiw	r24, 0x01	; 1
    42ee:	9e 83       	std	Y+6, r25	; 0x06
    42f0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    42f2:	8d 81       	ldd	r24, Y+5	; 0x05
    42f4:	9e 81       	ldd	r25, Y+6	; 0x06
    42f6:	00 97       	sbiw	r24, 0x00	; 0
    42f8:	69 f7       	brne	.-38     	; 0x42d4 <HBUZ_voidTriple+0x4e2>
    42fa:	14 c0       	rjmp	.+40     	; 0x4324 <HBUZ_voidTriple+0x532>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    42fc:	6f 81       	ldd	r22, Y+7	; 0x07
    42fe:	78 85       	ldd	r23, Y+8	; 0x08
    4300:	89 85       	ldd	r24, Y+9	; 0x09
    4302:	9a 85       	ldd	r25, Y+10	; 0x0a
    4304:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4308:	dc 01       	movw	r26, r24
    430a:	cb 01       	movw	r24, r22
    430c:	9e 83       	std	Y+6, r25	; 0x06
    430e:	8d 83       	std	Y+5, r24	; 0x05
    4310:	8d 81       	ldd	r24, Y+5	; 0x05
    4312:	9e 81       	ldd	r25, Y+6	; 0x06
    4314:	9a 83       	std	Y+2, r25	; 0x02
    4316:	89 83       	std	Y+1, r24	; 0x01
    4318:	89 81       	ldd	r24, Y+1	; 0x01
    431a:	9a 81       	ldd	r25, Y+2	; 0x02
    431c:	01 97       	sbiw	r24, 0x01	; 1
    431e:	f1 f7       	brne	.-4      	; 0x431c <HBUZ_voidTriple+0x52a>
    4320:	9a 83       	std	Y+2, r25	; 0x02
    4322:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(200);
	MDIO_voidSetPinValue(copy_u8BuzPin , copy_u8BuzPort , DIO_LOW);
    4324:	fe 01       	movw	r30, r28
    4326:	e9 5b       	subi	r30, 0xB9	; 185
    4328:	ff 4f       	sbci	r31, 0xFF	; 255
    432a:	de 01       	movw	r26, r28
    432c:	a8 5b       	subi	r26, 0xB8	; 184
    432e:	bf 4f       	sbci	r27, 0xFF	; 255
    4330:	80 81       	ld	r24, Z
    4332:	6c 91       	ld	r22, X
    4334:	40 e0       	ldi	r20, 0x00	; 0
    4336:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <MDIO_voidSetPinValue>
}
    433a:	c8 5b       	subi	r28, 0xB8	; 184
    433c:	df 4f       	sbci	r29, 0xFF	; 255
    433e:	0f b6       	in	r0, 0x3f	; 63
    4340:	f8 94       	cli
    4342:	de bf       	out	0x3e, r29	; 62
    4344:	0f be       	out	0x3f, r0	; 63
    4346:	cd bf       	out	0x3d, r28	; 61
    4348:	cf 91       	pop	r28
    434a:	df 91       	pop	r29
    434c:	1f 91       	pop	r17
    434e:	0f 91       	pop	r16
    4350:	08 95       	ret

00004352 <HBUZ_voidLong>:

void HBUZ_voidLong(u8 copy_u8BuzPin,u8 copy_u8BuzPort)
{
    4352:	df 93       	push	r29
    4354:	cf 93       	push	r28
    4356:	00 d0       	rcall	.+0      	; 0x4358 <HBUZ_voidLong+0x6>
    4358:	cd b7       	in	r28, 0x3d	; 61
    435a:	de b7       	in	r29, 0x3e	; 62
    435c:	89 83       	std	Y+1, r24	; 0x01
    435e:	6a 83       	std	Y+2, r22	; 0x02
	MDIO_voidSetPinValue(copy_u8BuzPin , copy_u8BuzPort , DIO_HIGH);
    4360:	89 81       	ldd	r24, Y+1	; 0x01
    4362:	6a 81       	ldd	r22, Y+2	; 0x02
    4364:	41 e0       	ldi	r20, 0x01	; 1
    4366:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <MDIO_voidSetPinValue>
}
    436a:	0f 90       	pop	r0
    436c:	0f 90       	pop	r0
    436e:	cf 91       	pop	r28
    4370:	df 91       	pop	r29
    4372:	08 95       	ret

00004374 <main>:
void OpenSystem(void);
void LDR_On_LCD(void);
void TempSensor(void);

int main(void)
{
    4374:	df 93       	push	r29
    4376:	cf 93       	push	r28
    4378:	cd b7       	in	r28, 0x3d	; 61
    437a:	de b7       	in	r29, 0x3e	; 62
	/*BUZZER Initialization*/
	HBUZ_voidInit(DIO_PIN6,DIO_PORTD);
    437c:	86 e0       	ldi	r24, 0x06	; 6
    437e:	63 e0       	ldi	r22, 0x03	; 3
    4380:	0e 94 a1 1c 	call	0x3942	; 0x3942 <HBUZ_voidInit>
	/*LCD Initialization and welcome board*/
	HLCD_voidInit();
    4384:	0e 94 74 13 	call	0x26e8	; 0x26e8 <HLCD_voidInit>
	HLCD_voidGoTo(0,5);
    4388:	80 e0       	ldi	r24, 0x00	; 0
    438a:	65 e0       	ldi	r22, 0x05	; 5
    438c:	0e 94 7f 19 	call	0x32fe	; 0x32fe <HLCD_voidGoTo>
	HLCD_voidWriteString("WELCOME");
    4390:	80 e6       	ldi	r24, 0x60	; 96
    4392:	90 e0       	ldi	r25, 0x00	; 0
    4394:	0e 94 cd 18 	call	0x319a	; 0x319a <HLCD_voidWriteString>
	HLCD_voidGoTo(1,4);
    4398:	81 e0       	ldi	r24, 0x01	; 1
    439a:	64 e0       	ldi	r22, 0x04	; 4
    439c:	0e 94 7f 19 	call	0x32fe	; 0x32fe <HLCD_voidGoTo>
	HLCD_voidWriteString("SMART  HOME");
    43a0:	88 e6       	ldi	r24, 0x68	; 104
    43a2:	90 e0       	ldi	r25, 0x00	; 0
    43a4:	0e 94 cd 18 	call	0x319a	; 0x319a <HLCD_voidWriteString>

	/*LEDS Initialization */
	HLED_voidInit(DIO_PIN0,DIO_PORTB);
    43a8:	80 e0       	ldi	r24, 0x00	; 0
    43aa:	61 e0       	ldi	r22, 0x01	; 1
    43ac:	0e 94 2c 13 	call	0x2658	; 0x2658 <HLED_voidInit>
	HLED_voidInit(DIO_PIN1,DIO_PORTB);
    43b0:	81 e0       	ldi	r24, 0x01	; 1
    43b2:	61 e0       	ldi	r22, 0x01	; 1
    43b4:	0e 94 2c 13 	call	0x2658	; 0x2658 <HLED_voidInit>
	HLED_voidInit(DIO_PIN2,DIO_PORTB);
    43b8:	82 e0       	ldi	r24, 0x02	; 2
    43ba:	61 e0       	ldi	r22, 0x01	; 1
    43bc:	0e 94 2c 13 	call	0x2658	; 0x2658 <HLED_voidInit>
	HLED_voidInit(DIO_PIN3,DIO_PORTB);
    43c0:	83 e0       	ldi	r24, 0x03	; 3
    43c2:	61 e0       	ldi	r22, 0x01	; 1
    43c4:	0e 94 2c 13 	call	0x2658	; 0x2658 <HLED_voidInit>
	HLED_voidInit(DIO_PIN4,DIO_PORTB);
    43c8:	84 e0       	ldi	r24, 0x04	; 4
    43ca:	61 e0       	ldi	r22, 0x01	; 1
    43cc:	0e 94 2c 13 	call	0x2658	; 0x2658 <HLED_voidInit>
	HLED_voidInit(DIO_PIN5,DIO_PORTB);
    43d0:	85 e0       	ldi	r24, 0x05	; 5
    43d2:	61 e0       	ldi	r22, 0x01	; 1
    43d4:	0e 94 2c 13 	call	0x2658	; 0x2658 <HLED_voidInit>
	HLED_voidInit(DIO_PIN6,DIO_PORTB);
    43d8:	86 e0       	ldi	r24, 0x06	; 6
    43da:	61 e0       	ldi	r22, 0x01	; 1
    43dc:	0e 94 2c 13 	call	0x2658	; 0x2658 <HLED_voidInit>
	HLED_voidInit(DIO_PIN7,DIO_PORTB);
    43e0:	87 e0       	ldi	r24, 0x07	; 7
    43e2:	61 e0       	ldi	r22, 0x01	; 1
    43e4:	0e 94 2c 13 	call	0x2658	; 0x2658 <HLED_voidInit>
	/*MOTOR PIN Initialization*/
	MDIO_voidSetPinMode(DIO_PIN7,DIO_PORTD,DIO_OUTPUT);
    43e8:	87 e0       	ldi	r24, 0x07	; 7
    43ea:	63 e0       	ldi	r22, 0x03	; 3
    43ec:	41 e0       	ldi	r20, 0x01	; 1
    43ee:	0e 94 ff 0c 	call	0x19fe	; 0x19fe <MDIO_voidSetPinMode>

	/*ADC Initialization*/
	MDIO_voidSetPinMode(DIO_PIN0,DIO_PORTA,DIO_INPUT);
    43f2:	80 e0       	ldi	r24, 0x00	; 0
    43f4:	60 e0       	ldi	r22, 0x00	; 0
    43f6:	40 e0       	ldi	r20, 0x00	; 0
    43f8:	0e 94 ff 0c 	call	0x19fe	; 0x19fe <MDIO_voidSetPinMode>
	MDIO_voidSetPinMode(DIO_PIN1,DIO_PORTA,DIO_INPUT);
    43fc:	81 e0       	ldi	r24, 0x01	; 1
    43fe:	60 e0       	ldi	r22, 0x00	; 0
    4400:	40 e0       	ldi	r20, 0x00	; 0
    4402:	0e 94 ff 0c 	call	0x19fe	; 0x19fe <MDIO_voidSetPinMode>
	ADC_voidInit();
    4406:	0e 94 2a 11 	call	0x2254	; 0x2254 <ADC_voidInit>
	/*TIMER0 Initialization*/
	TIMER0_voidInit();
    440a:	0e 94 a6 08 	call	0x114c	; 0x114c <TIMER0_voidInit>
	TIMER0_voidSetTime(1000);
    440e:	68 ee       	ldi	r22, 0xE8	; 232
    4410:	73 e0       	ldi	r23, 0x03	; 3
    4412:	80 e0       	ldi	r24, 0x00	; 0
    4414:	90 e0       	ldi	r25, 0x00	; 0
    4416:	0e 94 c9 08 	call	0x1192	; 0x1192 <TIMER0_voidSetTime>
	TIMER0_voidStart();
    441a:	0e 94 4a 09 	call	0x1294	; 0x1294 <TIMER0_voidStart>
	TIMER0_voidSetCallBack(&TempSensor);
    441e:	84 e3       	ldi	r24, 0x34	; 52
    4420:	92 e2       	ldi	r25, 0x22	; 34
    4422:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <TIMER0_voidSetCallBack>

	// KPD Direction pins
	MDIO_voidSetPortMode(DIO_PORTA, 0b00011100);
    4426:	80 e0       	ldi	r24, 0x00	; 0
    4428:	6c e1       	ldi	r22, 0x1C	; 28
    442a:	0e 94 15 10 	call	0x202a	; 0x202a <MDIO_voidSetPortMode>
	MDIO_voidSetPortValue(DIO_PORTA,0b11111100);
    442e:	80 e0       	ldi	r24, 0x00	; 0
    4430:	6c ef       	ldi	r22, 0xFC	; 252
    4432:	0e 94 56 10 	call	0x20ac	; 0x20ac <MDIO_voidSetPortValue>

	// EXT Interrupt Pull Up
	MDIO_voidSetPinMode(DIO_PIN3, DIO_PORTD, DIO_INPUT);
    4436:	83 e0       	ldi	r24, 0x03	; 3
    4438:	63 e0       	ldi	r22, 0x03	; 3
    443a:	40 e0       	ldi	r20, 0x00	; 0
    443c:	0e 94 ff 0c 	call	0x19fe	; 0x19fe <MDIO_voidSetPinMode>
	MDIO_voidSetPinValue(DIO_PIN3, DIO_PORTD, DIO_HIGH);
    4440:	83 e0       	ldi	r24, 0x03	; 3
    4442:	63 e0       	ldi	r22, 0x03	; 3
    4444:	41 e0       	ldi	r20, 0x01	; 1
    4446:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <MDIO_voidSetPinValue>

	MDIO_voidSetPinMode(DIO_PIN5,DIO_PORTD,DIO_OUTPUT);
    444a:	85 e0       	ldi	r24, 0x05	; 5
    444c:	63 e0       	ldi	r22, 0x03	; 3
    444e:	41 e0       	ldi	r20, 0x01	; 1
    4450:	0e 94 ff 0c 	call	0x19fe	; 0x19fe <MDIO_voidSetPinMode>


	EXTI_voidINT1Init();
    4454:	0e 94 15 0b 	call	0x162a	; 0x162a <EXTI_voidINT1Init>
	GIE_voidEnableGlobal();
    4458:	0e 94 dd 0a 	call	0x15ba	; 0x15ba <GIE_voidEnableGlobal>

	EXTI_u8INTSetCallBack(&OpenSystem,EXTI_INT1); /* Use call Back function in Exti Interrupt 1*/
    445c:	83 e3       	ldi	r24, 0x33	; 51
    445e:	94 e2       	ldi	r25, 0x24	; 36
    4460:	61 e0       	ldi	r22, 0x01	; 1
    4462:	0e 94 47 0c 	call	0x188e	; 0x188e <EXTI_u8INTSetCallBack>
    4466:	ff cf       	rjmp	.-2      	; 0x4466 <main+0xf2>

00004468 <TempSensor>:
	return 0;
}


void TempSensor(void)
{
    4468:	df 93       	push	r29
    446a:	cf 93       	push	r28
    446c:	00 d0       	rcall	.+0      	; 0x446e <TempSensor+0x6>
    446e:	cd b7       	in	r28, 0x3d	; 61
    4470:	de b7       	in	r29, 0x3e	; 62
	HLCD_voidClear();
    4472:	0e 94 f7 18 	call	0x31ee	; 0x31ee <HLCD_voidClear>
	HLCD_voidGoTo(0,0);
    4476:	80 e0       	ldi	r24, 0x00	; 0
    4478:	60 e0       	ldi	r22, 0x00	; 0
    447a:	0e 94 7f 19 	call	0x32fe	; 0x32fe <HLCD_voidGoTo>
	HLCD_voidWriteString("TEMP:");
    447e:	84 e7       	ldi	r24, 0x74	; 116
    4480:	90 e0       	ldi	r25, 0x00	; 0
    4482:	0e 94 cd 18 	call	0x319a	; 0x319a <HLCD_voidWriteString>

	u16 Local_u16Temp = ADC_u16Read(0);
    4486:	80 e0       	ldi	r24, 0x00	; 0
    4488:	0e 94 64 11 	call	0x22c8	; 0x22c8 <ADC_u16Read>
    448c:	9a 83       	std	Y+2, r25	; 0x02
    448e:	89 83       	std	Y+1, r24	; 0x01
	Local_u16Temp = Local_u16Temp*(5000/1024.0);
    4490:	89 81       	ldd	r24, Y+1	; 0x01
    4492:	9a 81       	ldd	r25, Y+2	; 0x02
    4494:	cc 01       	movw	r24, r24
    4496:	a0 e0       	ldi	r26, 0x00	; 0
    4498:	b0 e0       	ldi	r27, 0x00	; 0
    449a:	bc 01       	movw	r22, r24
    449c:	cd 01       	movw	r24, r26
    449e:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__floatunsisf>
    44a2:	dc 01       	movw	r26, r24
    44a4:	cb 01       	movw	r24, r22
    44a6:	bc 01       	movw	r22, r24
    44a8:	cd 01       	movw	r24, r26
    44aa:	20 e0       	ldi	r18, 0x00	; 0
    44ac:	30 e4       	ldi	r19, 0x40	; 64
    44ae:	4c e9       	ldi	r20, 0x9C	; 156
    44b0:	50 e4       	ldi	r21, 0x40	; 64
    44b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    44b6:	dc 01       	movw	r26, r24
    44b8:	cb 01       	movw	r24, r22
    44ba:	bc 01       	movw	r22, r24
    44bc:	cd 01       	movw	r24, r26
    44be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    44c2:	dc 01       	movw	r26, r24
    44c4:	cb 01       	movw	r24, r22
    44c6:	9a 83       	std	Y+2, r25	; 0x02
    44c8:	89 83       	std	Y+1, r24	; 0x01
	HLCD_voidWriteIntNumber((Local_u16Temp/10));
    44ca:	89 81       	ldd	r24, Y+1	; 0x01
    44cc:	9a 81       	ldd	r25, Y+2	; 0x02
    44ce:	2a e0       	ldi	r18, 0x0A	; 10
    44d0:	30 e0       	ldi	r19, 0x00	; 0
    44d2:	b9 01       	movw	r22, r18
    44d4:	0e 94 ce 29 	call	0x539c	; 0x539c <__udivmodhi4>
    44d8:	cb 01       	movw	r24, r22
    44da:	cc 01       	movw	r24, r24
    44dc:	a0 e0       	ldi	r26, 0x00	; 0
    44de:	b0 e0       	ldi	r27, 0x00	; 0
    44e0:	bc 01       	movw	r22, r24
    44e2:	cd 01       	movw	r24, r26
    44e4:	0e 94 a6 19 	call	0x334c	; 0x334c <HLCD_voidWriteIntNumber>
	HLCD_voidWriteChracter('C');
    44e8:	83 e4       	ldi	r24, 0x43	; 67
    44ea:	0e 94 66 17 	call	0x2ecc	; 0x2ecc <HLCD_voidWriteChracter>
	if( (Local_u16Temp/10) > 25)
    44ee:	89 81       	ldd	r24, Y+1	; 0x01
    44f0:	9a 81       	ldd	r25, Y+2	; 0x02
    44f2:	21 e0       	ldi	r18, 0x01	; 1
    44f4:	84 30       	cpi	r24, 0x04	; 4
    44f6:	92 07       	cpc	r25, r18
    44f8:	70 f0       	brcs	.+28     	; 0x4516 <TempSensor+0xae>
	{
		HLCD_voidGoTo(0,9);
    44fa:	80 e0       	ldi	r24, 0x00	; 0
    44fc:	69 e0       	ldi	r22, 0x09	; 9
    44fe:	0e 94 7f 19 	call	0x32fe	; 0x32fe <HLCD_voidGoTo>
		HLCD_voidWriteString("Fan:ON");
    4502:	8a e7       	ldi	r24, 0x7A	; 122
    4504:	90 e0       	ldi	r25, 0x00	; 0
    4506:	0e 94 cd 18 	call	0x319a	; 0x319a <HLCD_voidWriteString>
		MDIO_voidSetPinValue(DIO_PIN7,DIO_PORTD,DIO_HIGH);
    450a:	87 e0       	ldi	r24, 0x07	; 7
    450c:	63 e0       	ldi	r22, 0x03	; 3
    450e:	41 e0       	ldi	r20, 0x01	; 1
    4510:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <MDIO_voidSetPinValue>
    4514:	0d c0       	rjmp	.+26     	; 0x4530 <TempSensor+0xc8>
	}
	else
	{
		HLCD_voidGoTo(0,9);
    4516:	80 e0       	ldi	r24, 0x00	; 0
    4518:	69 e0       	ldi	r22, 0x09	; 9
    451a:	0e 94 7f 19 	call	0x32fe	; 0x32fe <HLCD_voidGoTo>
		HLCD_voidWriteString("Fan:OFF");
    451e:	81 e8       	ldi	r24, 0x81	; 129
    4520:	90 e0       	ldi	r25, 0x00	; 0
    4522:	0e 94 cd 18 	call	0x319a	; 0x319a <HLCD_voidWriteString>
		MDIO_voidSetPinValue(DIO_PIN7,DIO_PORTD,DIO_LOW);
    4526:	87 e0       	ldi	r24, 0x07	; 7
    4528:	63 e0       	ldi	r22, 0x03	; 3
    452a:	40 e0       	ldi	r20, 0x00	; 0
    452c:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <MDIO_voidSetPinValue>
	}
	if((Local_u16Temp/10) > 40)
    4530:	89 81       	ldd	r24, Y+1	; 0x01
    4532:	9a 81       	ldd	r25, Y+2	; 0x02
    4534:	21 e0       	ldi	r18, 0x01	; 1
    4536:	8a 39       	cpi	r24, 0x9A	; 154
    4538:	92 07       	cpc	r25, r18
    453a:	20 f0       	brcs	.+8      	; 0x4544 <TempSensor+0xdc>
	{
		HBUZ_voidToggle(DIO_PIN6,DIO_PORTD);
    453c:	86 e0       	ldi	r24, 0x06	; 6
    453e:	63 e0       	ldi	r22, 0x03	; 3
    4540:	0e 94 d9 1c 	call	0x39b2	; 0x39b2 <HBUZ_voidToggle>
	}
	LDR_On_LCD();
    4544:	0e 94 a9 22 	call	0x4552	; 0x4552 <LDR_On_LCD>

}
    4548:	0f 90       	pop	r0
    454a:	0f 90       	pop	r0
    454c:	cf 91       	pop	r28
    454e:	df 91       	pop	r29
    4550:	08 95       	ret

00004552 <LDR_On_LCD>:

void LDR_On_LCD(void)
{
    4552:	df 93       	push	r29
    4554:	cf 93       	push	r28
    4556:	00 d0       	rcall	.+0      	; 0x4558 <LDR_On_LCD+0x6>
    4558:	cd b7       	in	r28, 0x3d	; 61
    455a:	de b7       	in	r29, 0x3e	; 62

	HLCD_voidGoTo(1,0);
    455c:	81 e0       	ldi	r24, 0x01	; 1
    455e:	60 e0       	ldi	r22, 0x00	; 0
    4560:	0e 94 7f 19 	call	0x32fe	; 0x32fe <HLCD_voidGoTo>
	HLCD_voidWriteString("Bright:");
    4564:	89 e8       	ldi	r24, 0x89	; 137
    4566:	90 e0       	ldi	r25, 0x00	; 0
    4568:	0e 94 cd 18 	call	0x319a	; 0x319a <HLCD_voidWriteString>

	u16 Local_u16Ldr = ADC_u16Read(1);
    456c:	81 e0       	ldi	r24, 0x01	; 1
    456e:	0e 94 64 11 	call	0x22c8	; 0x22c8 <ADC_u16Read>
    4572:	9a 83       	std	Y+2, r25	; 0x02
    4574:	89 83       	std	Y+1, r24	; 0x01
	HLCD_voidWriteIntNumber((100*Local_u16Ldr)/1024);
    4576:	29 81       	ldd	r18, Y+1	; 0x01
    4578:	3a 81       	ldd	r19, Y+2	; 0x02
    457a:	84 e6       	ldi	r24, 0x64	; 100
    457c:	90 e0       	ldi	r25, 0x00	; 0
    457e:	ac 01       	movw	r20, r24
    4580:	24 9f       	mul	r18, r20
    4582:	c0 01       	movw	r24, r0
    4584:	25 9f       	mul	r18, r21
    4586:	90 0d       	add	r25, r0
    4588:	34 9f       	mul	r19, r20
    458a:	90 0d       	add	r25, r0
    458c:	11 24       	eor	r1, r1
    458e:	89 2f       	mov	r24, r25
    4590:	99 27       	eor	r25, r25
    4592:	86 95       	lsr	r24
    4594:	86 95       	lsr	r24
    4596:	cc 01       	movw	r24, r24
    4598:	a0 e0       	ldi	r26, 0x00	; 0
    459a:	b0 e0       	ldi	r27, 0x00	; 0
    459c:	bc 01       	movw	r22, r24
    459e:	cd 01       	movw	r24, r26
    45a0:	0e 94 a6 19 	call	0x334c	; 0x334c <HLCD_voidWriteIntNumber>
	HLCD_voidWriteChracter('%');
    45a4:	85 e2       	ldi	r24, 0x25	; 37
    45a6:	0e 94 66 17 	call	0x2ecc	; 0x2ecc <HLCD_voidWriteChracter>
	if(Local_u16Ldr >= 0 && Local_u16Ldr < 100)
    45aa:	89 81       	ldd	r24, Y+1	; 0x01
    45ac:	9a 81       	ldd	r25, Y+2	; 0x02
    45ae:	84 36       	cpi	r24, 0x64	; 100
    45b0:	91 05       	cpc	r25, r1
    45b2:	78 f5       	brcc	.+94     	; 0x4612 <LDR_On_LCD+0xc0>
	{
		HLCD_voidGoTo(1,11);
    45b4:	81 e0       	ldi	r24, 0x01	; 1
    45b6:	6b e0       	ldi	r22, 0x0B	; 11
    45b8:	0e 94 7f 19 	call	0x32fe	; 0x32fe <HLCD_voidGoTo>
		HLCD_voidWriteString("LEDS:");
    45bc:	81 e9       	ldi	r24, 0x91	; 145
    45be:	90 e0       	ldi	r25, 0x00	; 0
    45c0:	0e 94 cd 18 	call	0x319a	; 0x319a <HLCD_voidWriteString>
		HLCD_voidWriteIntNumber(8);
    45c4:	68 e0       	ldi	r22, 0x08	; 8
    45c6:	70 e0       	ldi	r23, 0x00	; 0
    45c8:	80 e0       	ldi	r24, 0x00	; 0
    45ca:	90 e0       	ldi	r25, 0x00	; 0
    45cc:	0e 94 a6 19 	call	0x334c	; 0x334c <HLCD_voidWriteIntNumber>
		HLED_voidOn(DIO_PIN0,DIO_PORTB);
    45d0:	80 e0       	ldi	r24, 0x00	; 0
    45d2:	61 e0       	ldi	r22, 0x01	; 1
    45d4:	0e 94 42 13 	call	0x2684	; 0x2684 <HLED_voidOn>
		HLED_voidOn(DIO_PIN1,DIO_PORTB);
    45d8:	81 e0       	ldi	r24, 0x01	; 1
    45da:	61 e0       	ldi	r22, 0x01	; 1
    45dc:	0e 94 42 13 	call	0x2684	; 0x2684 <HLED_voidOn>
		HLED_voidOn(DIO_PIN2,DIO_PORTB);
    45e0:	82 e0       	ldi	r24, 0x02	; 2
    45e2:	61 e0       	ldi	r22, 0x01	; 1
    45e4:	0e 94 42 13 	call	0x2684	; 0x2684 <HLED_voidOn>
		HLED_voidOn(DIO_PIN3,DIO_PORTB);
    45e8:	83 e0       	ldi	r24, 0x03	; 3
    45ea:	61 e0       	ldi	r22, 0x01	; 1
    45ec:	0e 94 42 13 	call	0x2684	; 0x2684 <HLED_voidOn>
		HLED_voidOn(DIO_PIN4,DIO_PORTB);
    45f0:	84 e0       	ldi	r24, 0x04	; 4
    45f2:	61 e0       	ldi	r22, 0x01	; 1
    45f4:	0e 94 42 13 	call	0x2684	; 0x2684 <HLED_voidOn>
		HLED_voidOn(DIO_PIN5,DIO_PORTB);
    45f8:	85 e0       	ldi	r24, 0x05	; 5
    45fa:	61 e0       	ldi	r22, 0x01	; 1
    45fc:	0e 94 42 13 	call	0x2684	; 0x2684 <HLED_voidOn>
		HLED_voidOn(DIO_PIN6,DIO_PORTB);
    4600:	86 e0       	ldi	r24, 0x06	; 6
    4602:	61 e0       	ldi	r22, 0x01	; 1
    4604:	0e 94 42 13 	call	0x2684	; 0x2684 <HLED_voidOn>
		HLED_voidOn(DIO_PIN7,DIO_PORTB);
    4608:	87 e0       	ldi	r24, 0x07	; 7
    460a:	61 e0       	ldi	r22, 0x01	; 1
    460c:	0e 94 42 13 	call	0x2684	; 0x2684 <HLED_voidOn>
    4610:	25 c1       	rjmp	.+586    	; 0x485c <LDR_On_LCD+0x30a>
	}
	else if(Local_u16Ldr >= 100 && Local_u16Ldr < 300)
    4612:	89 81       	ldd	r24, Y+1	; 0x01
    4614:	9a 81       	ldd	r25, Y+2	; 0x02
    4616:	84 36       	cpi	r24, 0x64	; 100
    4618:	91 05       	cpc	r25, r1
    461a:	a8 f1       	brcs	.+106    	; 0x4686 <LDR_On_LCD+0x134>
    461c:	89 81       	ldd	r24, Y+1	; 0x01
    461e:	9a 81       	ldd	r25, Y+2	; 0x02
    4620:	51 e0       	ldi	r21, 0x01	; 1
    4622:	8c 32       	cpi	r24, 0x2C	; 44
    4624:	95 07       	cpc	r25, r21
    4626:	78 f5       	brcc	.+94     	; 0x4686 <LDR_On_LCD+0x134>
	{
		HLCD_voidGoTo(1,11);
    4628:	81 e0       	ldi	r24, 0x01	; 1
    462a:	6b e0       	ldi	r22, 0x0B	; 11
    462c:	0e 94 7f 19 	call	0x32fe	; 0x32fe <HLCD_voidGoTo>
		HLCD_voidWriteString("LEDS:");
    4630:	81 e9       	ldi	r24, 0x91	; 145
    4632:	90 e0       	ldi	r25, 0x00	; 0
    4634:	0e 94 cd 18 	call	0x319a	; 0x319a <HLCD_voidWriteString>
		HLCD_voidWriteIntNumber(7);
    4638:	67 e0       	ldi	r22, 0x07	; 7
    463a:	70 e0       	ldi	r23, 0x00	; 0
    463c:	80 e0       	ldi	r24, 0x00	; 0
    463e:	90 e0       	ldi	r25, 0x00	; 0
    4640:	0e 94 a6 19 	call	0x334c	; 0x334c <HLCD_voidWriteIntNumber>
		HLED_voidOn(DIO_PIN0,DIO_PORTB);
    4644:	80 e0       	ldi	r24, 0x00	; 0
    4646:	61 e0       	ldi	r22, 0x01	; 1
    4648:	0e 94 42 13 	call	0x2684	; 0x2684 <HLED_voidOn>
		HLED_voidOn(DIO_PIN1,DIO_PORTB);
    464c:	81 e0       	ldi	r24, 0x01	; 1
    464e:	61 e0       	ldi	r22, 0x01	; 1
    4650:	0e 94 42 13 	call	0x2684	; 0x2684 <HLED_voidOn>
		HLED_voidOn(DIO_PIN2,DIO_PORTB);
    4654:	82 e0       	ldi	r24, 0x02	; 2
    4656:	61 e0       	ldi	r22, 0x01	; 1
    4658:	0e 94 42 13 	call	0x2684	; 0x2684 <HLED_voidOn>
		HLED_voidOn(DIO_PIN3,DIO_PORTB);
    465c:	83 e0       	ldi	r24, 0x03	; 3
    465e:	61 e0       	ldi	r22, 0x01	; 1
    4660:	0e 94 42 13 	call	0x2684	; 0x2684 <HLED_voidOn>
		HLED_voidOn(DIO_PIN4,DIO_PORTB);
    4664:	84 e0       	ldi	r24, 0x04	; 4
    4666:	61 e0       	ldi	r22, 0x01	; 1
    4668:	0e 94 42 13 	call	0x2684	; 0x2684 <HLED_voidOn>
		HLED_voidOn(DIO_PIN5,DIO_PORTB);
    466c:	85 e0       	ldi	r24, 0x05	; 5
    466e:	61 e0       	ldi	r22, 0x01	; 1
    4670:	0e 94 42 13 	call	0x2684	; 0x2684 <HLED_voidOn>
		HLED_voidOn(DIO_PIN6,DIO_PORTB);
    4674:	86 e0       	ldi	r24, 0x06	; 6
    4676:	61 e0       	ldi	r22, 0x01	; 1
    4678:	0e 94 42 13 	call	0x2684	; 0x2684 <HLED_voidOn>
		HLED_voidOff(DIO_PIN7,DIO_PORTB);
    467c:	87 e0       	ldi	r24, 0x07	; 7
    467e:	61 e0       	ldi	r22, 0x01	; 1
    4680:	0e 94 53 13 	call	0x26a6	; 0x26a6 <HLED_voidOff>
    4684:	eb c0       	rjmp	.+470    	; 0x485c <LDR_On_LCD+0x30a>
	}
	else if(Local_u16Ldr >= 300 && Local_u16Ldr < 500)
    4686:	89 81       	ldd	r24, Y+1	; 0x01
    4688:	9a 81       	ldd	r25, Y+2	; 0x02
    468a:	21 e0       	ldi	r18, 0x01	; 1
    468c:	8c 32       	cpi	r24, 0x2C	; 44
    468e:	92 07       	cpc	r25, r18
    4690:	a8 f1       	brcs	.+106    	; 0x46fc <LDR_On_LCD+0x1aa>
    4692:	89 81       	ldd	r24, Y+1	; 0x01
    4694:	9a 81       	ldd	r25, Y+2	; 0x02
    4696:	41 e0       	ldi	r20, 0x01	; 1
    4698:	84 3f       	cpi	r24, 0xF4	; 244
    469a:	94 07       	cpc	r25, r20
    469c:	78 f5       	brcc	.+94     	; 0x46fc <LDR_On_LCD+0x1aa>
	{
		HLCD_voidGoTo(1,11);
    469e:	81 e0       	ldi	r24, 0x01	; 1
    46a0:	6b e0       	ldi	r22, 0x0B	; 11
    46a2:	0e 94 7f 19 	call	0x32fe	; 0x32fe <HLCD_voidGoTo>
		HLCD_voidWriteString("LEDS:");
    46a6:	81 e9       	ldi	r24, 0x91	; 145
    46a8:	90 e0       	ldi	r25, 0x00	; 0
    46aa:	0e 94 cd 18 	call	0x319a	; 0x319a <HLCD_voidWriteString>
		HLCD_voidWriteIntNumber(6);
    46ae:	66 e0       	ldi	r22, 0x06	; 6
    46b0:	70 e0       	ldi	r23, 0x00	; 0
    46b2:	80 e0       	ldi	r24, 0x00	; 0
    46b4:	90 e0       	ldi	r25, 0x00	; 0
    46b6:	0e 94 a6 19 	call	0x334c	; 0x334c <HLCD_voidWriteIntNumber>
		HLED_voidOn(DIO_PIN0,DIO_PORTB);
    46ba:	80 e0       	ldi	r24, 0x00	; 0
    46bc:	61 e0       	ldi	r22, 0x01	; 1
    46be:	0e 94 42 13 	call	0x2684	; 0x2684 <HLED_voidOn>
		HLED_voidOn(DIO_PIN1,DIO_PORTB);
    46c2:	81 e0       	ldi	r24, 0x01	; 1
    46c4:	61 e0       	ldi	r22, 0x01	; 1
    46c6:	0e 94 42 13 	call	0x2684	; 0x2684 <HLED_voidOn>
		HLED_voidOn(DIO_PIN2,DIO_PORTB);
    46ca:	82 e0       	ldi	r24, 0x02	; 2
    46cc:	61 e0       	ldi	r22, 0x01	; 1
    46ce:	0e 94 42 13 	call	0x2684	; 0x2684 <HLED_voidOn>
		HLED_voidOn(DIO_PIN3,DIO_PORTB);
    46d2:	83 e0       	ldi	r24, 0x03	; 3
    46d4:	61 e0       	ldi	r22, 0x01	; 1
    46d6:	0e 94 42 13 	call	0x2684	; 0x2684 <HLED_voidOn>
		HLED_voidOn(DIO_PIN4,DIO_PORTB);
    46da:	84 e0       	ldi	r24, 0x04	; 4
    46dc:	61 e0       	ldi	r22, 0x01	; 1
    46de:	0e 94 42 13 	call	0x2684	; 0x2684 <HLED_voidOn>
		HLED_voidOn(DIO_PIN5,DIO_PORTB);
    46e2:	85 e0       	ldi	r24, 0x05	; 5
    46e4:	61 e0       	ldi	r22, 0x01	; 1
    46e6:	0e 94 42 13 	call	0x2684	; 0x2684 <HLED_voidOn>
		HLED_voidOff(DIO_PIN6,DIO_PORTB);
    46ea:	86 e0       	ldi	r24, 0x06	; 6
    46ec:	61 e0       	ldi	r22, 0x01	; 1
    46ee:	0e 94 53 13 	call	0x26a6	; 0x26a6 <HLED_voidOff>
		HLED_voidOff(DIO_PIN7,DIO_PORTB);
    46f2:	87 e0       	ldi	r24, 0x07	; 7
    46f4:	61 e0       	ldi	r22, 0x01	; 1
    46f6:	0e 94 53 13 	call	0x26a6	; 0x26a6 <HLED_voidOff>
    46fa:	b0 c0       	rjmp	.+352    	; 0x485c <LDR_On_LCD+0x30a>
	}
	else if(Local_u16Ldr >= 500 && Local_u16Ldr < 700)
    46fc:	89 81       	ldd	r24, Y+1	; 0x01
    46fe:	9a 81       	ldd	r25, Y+2	; 0x02
    4700:	51 e0       	ldi	r21, 0x01	; 1
    4702:	84 3f       	cpi	r24, 0xF4	; 244
    4704:	95 07       	cpc	r25, r21
    4706:	a8 f1       	brcs	.+106    	; 0x4772 <LDR_On_LCD+0x220>
    4708:	89 81       	ldd	r24, Y+1	; 0x01
    470a:	9a 81       	ldd	r25, Y+2	; 0x02
    470c:	22 e0       	ldi	r18, 0x02	; 2
    470e:	8c 3b       	cpi	r24, 0xBC	; 188
    4710:	92 07       	cpc	r25, r18
    4712:	78 f5       	brcc	.+94     	; 0x4772 <LDR_On_LCD+0x220>
	{
		HLCD_voidGoTo(1,11);
    4714:	81 e0       	ldi	r24, 0x01	; 1
    4716:	6b e0       	ldi	r22, 0x0B	; 11
    4718:	0e 94 7f 19 	call	0x32fe	; 0x32fe <HLCD_voidGoTo>
		HLCD_voidWriteString("LEDS:");
    471c:	81 e9       	ldi	r24, 0x91	; 145
    471e:	90 e0       	ldi	r25, 0x00	; 0
    4720:	0e 94 cd 18 	call	0x319a	; 0x319a <HLCD_voidWriteString>
		HLCD_voidWriteIntNumber(5);
    4724:	65 e0       	ldi	r22, 0x05	; 5
    4726:	70 e0       	ldi	r23, 0x00	; 0
    4728:	80 e0       	ldi	r24, 0x00	; 0
    472a:	90 e0       	ldi	r25, 0x00	; 0
    472c:	0e 94 a6 19 	call	0x334c	; 0x334c <HLCD_voidWriteIntNumber>
		HLED_voidOn(DIO_PIN0,DIO_PORTB);
    4730:	80 e0       	ldi	r24, 0x00	; 0
    4732:	61 e0       	ldi	r22, 0x01	; 1
    4734:	0e 94 42 13 	call	0x2684	; 0x2684 <HLED_voidOn>
		HLED_voidOn(DIO_PIN1,DIO_PORTB);
    4738:	81 e0       	ldi	r24, 0x01	; 1
    473a:	61 e0       	ldi	r22, 0x01	; 1
    473c:	0e 94 42 13 	call	0x2684	; 0x2684 <HLED_voidOn>
		HLED_voidOn(DIO_PIN2,DIO_PORTB);
    4740:	82 e0       	ldi	r24, 0x02	; 2
    4742:	61 e0       	ldi	r22, 0x01	; 1
    4744:	0e 94 42 13 	call	0x2684	; 0x2684 <HLED_voidOn>
		HLED_voidOn(DIO_PIN3,DIO_PORTB);
    4748:	83 e0       	ldi	r24, 0x03	; 3
    474a:	61 e0       	ldi	r22, 0x01	; 1
    474c:	0e 94 42 13 	call	0x2684	; 0x2684 <HLED_voidOn>
		HLED_voidOn(DIO_PIN4,DIO_PORTB);
    4750:	84 e0       	ldi	r24, 0x04	; 4
    4752:	61 e0       	ldi	r22, 0x01	; 1
    4754:	0e 94 42 13 	call	0x2684	; 0x2684 <HLED_voidOn>
		HLED_voidOff(DIO_PIN5,DIO_PORTB);
    4758:	85 e0       	ldi	r24, 0x05	; 5
    475a:	61 e0       	ldi	r22, 0x01	; 1
    475c:	0e 94 53 13 	call	0x26a6	; 0x26a6 <HLED_voidOff>
		HLED_voidOff(DIO_PIN6,DIO_PORTB);
    4760:	86 e0       	ldi	r24, 0x06	; 6
    4762:	61 e0       	ldi	r22, 0x01	; 1
    4764:	0e 94 53 13 	call	0x26a6	; 0x26a6 <HLED_voidOff>
		HLED_voidOff(DIO_PIN7,DIO_PORTB);
    4768:	87 e0       	ldi	r24, 0x07	; 7
    476a:	61 e0       	ldi	r22, 0x01	; 1
    476c:	0e 94 53 13 	call	0x26a6	; 0x26a6 <HLED_voidOff>
    4770:	75 c0       	rjmp	.+234    	; 0x485c <LDR_On_LCD+0x30a>
	}
	else if(Local_u16Ldr >= 700 && Local_u16Ldr < 900)
    4772:	89 81       	ldd	r24, Y+1	; 0x01
    4774:	9a 81       	ldd	r25, Y+2	; 0x02
    4776:	42 e0       	ldi	r20, 0x02	; 2
    4778:	8c 3b       	cpi	r24, 0xBC	; 188
    477a:	94 07       	cpc	r25, r20
    477c:	a8 f1       	brcs	.+106    	; 0x47e8 <LDR_On_LCD+0x296>
    477e:	89 81       	ldd	r24, Y+1	; 0x01
    4780:	9a 81       	ldd	r25, Y+2	; 0x02
    4782:	53 e0       	ldi	r21, 0x03	; 3
    4784:	84 38       	cpi	r24, 0x84	; 132
    4786:	95 07       	cpc	r25, r21
    4788:	78 f5       	brcc	.+94     	; 0x47e8 <LDR_On_LCD+0x296>
	{
		HLCD_voidGoTo(1,11);
    478a:	81 e0       	ldi	r24, 0x01	; 1
    478c:	6b e0       	ldi	r22, 0x0B	; 11
    478e:	0e 94 7f 19 	call	0x32fe	; 0x32fe <HLCD_voidGoTo>
		HLCD_voidWriteString("LEDS:");
    4792:	81 e9       	ldi	r24, 0x91	; 145
    4794:	90 e0       	ldi	r25, 0x00	; 0
    4796:	0e 94 cd 18 	call	0x319a	; 0x319a <HLCD_voidWriteString>
		HLCD_voidWriteIntNumber(4);
    479a:	64 e0       	ldi	r22, 0x04	; 4
    479c:	70 e0       	ldi	r23, 0x00	; 0
    479e:	80 e0       	ldi	r24, 0x00	; 0
    47a0:	90 e0       	ldi	r25, 0x00	; 0
    47a2:	0e 94 a6 19 	call	0x334c	; 0x334c <HLCD_voidWriteIntNumber>
		HLED_voidOn(DIO_PIN0,DIO_PORTB);
    47a6:	80 e0       	ldi	r24, 0x00	; 0
    47a8:	61 e0       	ldi	r22, 0x01	; 1
    47aa:	0e 94 42 13 	call	0x2684	; 0x2684 <HLED_voidOn>
		HLED_voidOn(DIO_PIN1,DIO_PORTB);
    47ae:	81 e0       	ldi	r24, 0x01	; 1
    47b0:	61 e0       	ldi	r22, 0x01	; 1
    47b2:	0e 94 42 13 	call	0x2684	; 0x2684 <HLED_voidOn>
		HLED_voidOn(DIO_PIN2,DIO_PORTB);
    47b6:	82 e0       	ldi	r24, 0x02	; 2
    47b8:	61 e0       	ldi	r22, 0x01	; 1
    47ba:	0e 94 42 13 	call	0x2684	; 0x2684 <HLED_voidOn>
		HLED_voidOn(DIO_PIN3,DIO_PORTB);
    47be:	83 e0       	ldi	r24, 0x03	; 3
    47c0:	61 e0       	ldi	r22, 0x01	; 1
    47c2:	0e 94 42 13 	call	0x2684	; 0x2684 <HLED_voidOn>
		HLED_voidOff(DIO_PIN4,DIO_PORTB);
    47c6:	84 e0       	ldi	r24, 0x04	; 4
    47c8:	61 e0       	ldi	r22, 0x01	; 1
    47ca:	0e 94 53 13 	call	0x26a6	; 0x26a6 <HLED_voidOff>
		HLED_voidOff(DIO_PIN5,DIO_PORTB);
    47ce:	85 e0       	ldi	r24, 0x05	; 5
    47d0:	61 e0       	ldi	r22, 0x01	; 1
    47d2:	0e 94 53 13 	call	0x26a6	; 0x26a6 <HLED_voidOff>
		HLED_voidOff(DIO_PIN6,DIO_PORTB);
    47d6:	86 e0       	ldi	r24, 0x06	; 6
    47d8:	61 e0       	ldi	r22, 0x01	; 1
    47da:	0e 94 53 13 	call	0x26a6	; 0x26a6 <HLED_voidOff>
		HLED_voidOff(DIO_PIN7,DIO_PORTB);
    47de:	87 e0       	ldi	r24, 0x07	; 7
    47e0:	61 e0       	ldi	r22, 0x01	; 1
    47e2:	0e 94 53 13 	call	0x26a6	; 0x26a6 <HLED_voidOff>
    47e6:	3a c0       	rjmp	.+116    	; 0x485c <LDR_On_LCD+0x30a>
	}
	else if(Local_u16Ldr >= 900 && Local_u16Ldr < 1024)
    47e8:	89 81       	ldd	r24, Y+1	; 0x01
    47ea:	9a 81       	ldd	r25, Y+2	; 0x02
    47ec:	23 e0       	ldi	r18, 0x03	; 3
    47ee:	84 38       	cpi	r24, 0x84	; 132
    47f0:	92 07       	cpc	r25, r18
    47f2:	a0 f1       	brcs	.+104    	; 0x485c <LDR_On_LCD+0x30a>
    47f4:	89 81       	ldd	r24, Y+1	; 0x01
    47f6:	9a 81       	ldd	r25, Y+2	; 0x02
    47f8:	44 e0       	ldi	r20, 0x04	; 4
    47fa:	80 30       	cpi	r24, 0x00	; 0
    47fc:	94 07       	cpc	r25, r20
    47fe:	70 f5       	brcc	.+92     	; 0x485c <LDR_On_LCD+0x30a>
	{
		HLCD_voidGoTo(1,11);
    4800:	81 e0       	ldi	r24, 0x01	; 1
    4802:	6b e0       	ldi	r22, 0x0B	; 11
    4804:	0e 94 7f 19 	call	0x32fe	; 0x32fe <HLCD_voidGoTo>
		HLCD_voidWriteString("LEDS:");
    4808:	81 e9       	ldi	r24, 0x91	; 145
    480a:	90 e0       	ldi	r25, 0x00	; 0
    480c:	0e 94 cd 18 	call	0x319a	; 0x319a <HLCD_voidWriteString>
		HLCD_voidWriteIntNumber(2);
    4810:	62 e0       	ldi	r22, 0x02	; 2
    4812:	70 e0       	ldi	r23, 0x00	; 0
    4814:	80 e0       	ldi	r24, 0x00	; 0
    4816:	90 e0       	ldi	r25, 0x00	; 0
    4818:	0e 94 a6 19 	call	0x334c	; 0x334c <HLCD_voidWriteIntNumber>
		HLED_voidOn(DIO_PIN0,DIO_PORTB);
    481c:	80 e0       	ldi	r24, 0x00	; 0
    481e:	61 e0       	ldi	r22, 0x01	; 1
    4820:	0e 94 42 13 	call	0x2684	; 0x2684 <HLED_voidOn>
		HLED_voidOn(DIO_PIN1,DIO_PORTB);
    4824:	81 e0       	ldi	r24, 0x01	; 1
    4826:	61 e0       	ldi	r22, 0x01	; 1
    4828:	0e 94 42 13 	call	0x2684	; 0x2684 <HLED_voidOn>
		HLED_voidOff(DIO_PIN2,DIO_PORTB);
    482c:	82 e0       	ldi	r24, 0x02	; 2
    482e:	61 e0       	ldi	r22, 0x01	; 1
    4830:	0e 94 53 13 	call	0x26a6	; 0x26a6 <HLED_voidOff>
		HLED_voidOff(DIO_PIN3,DIO_PORTB);
    4834:	83 e0       	ldi	r24, 0x03	; 3
    4836:	61 e0       	ldi	r22, 0x01	; 1
    4838:	0e 94 53 13 	call	0x26a6	; 0x26a6 <HLED_voidOff>
		HLED_voidOff(DIO_PIN4,DIO_PORTB);
    483c:	84 e0       	ldi	r24, 0x04	; 4
    483e:	61 e0       	ldi	r22, 0x01	; 1
    4840:	0e 94 53 13 	call	0x26a6	; 0x26a6 <HLED_voidOff>
		HLED_voidOff(DIO_PIN5,DIO_PORTB);
    4844:	85 e0       	ldi	r24, 0x05	; 5
    4846:	61 e0       	ldi	r22, 0x01	; 1
    4848:	0e 94 53 13 	call	0x26a6	; 0x26a6 <HLED_voidOff>
		HLED_voidOff(DIO_PIN6,DIO_PORTB);
    484c:	86 e0       	ldi	r24, 0x06	; 6
    484e:	61 e0       	ldi	r22, 0x01	; 1
    4850:	0e 94 53 13 	call	0x26a6	; 0x26a6 <HLED_voidOff>
		HLED_voidOff(DIO_PIN7,DIO_PORTB);
    4854:	87 e0       	ldi	r24, 0x07	; 7
    4856:	61 e0       	ldi	r22, 0x01	; 1
    4858:	0e 94 53 13 	call	0x26a6	; 0x26a6 <HLED_voidOff>
	}
}
    485c:	0f 90       	pop	r0
    485e:	0f 90       	pop	r0
    4860:	cf 91       	pop	r28
    4862:	df 91       	pop	r29
    4864:	08 95       	ret

00004866 <OpenSystem>:



void OpenSystem()
{
    4866:	0f 93       	push	r16
    4868:	1f 93       	push	r17
    486a:	df 93       	push	r29
    486c:	cf 93       	push	r28
    486e:	cd b7       	in	r28, 0x3d	; 61
    4870:	de b7       	in	r29, 0x3e	; 62
    4872:	c0 57       	subi	r28, 0x70	; 112
    4874:	d0 40       	sbci	r29, 0x00	; 0
    4876:	0f b6       	in	r0, 0x3f	; 63
    4878:	f8 94       	cli
    487a:	de bf       	out	0x3e, r29	; 62
    487c:	0f be       	out	0x3f, r0	; 63
    487e:	cd bf       	out	0x3d, r28	; 61
	WrongCounter=2;
    4880:	82 e0       	ldi	r24, 0x02	; 2
    4882:	90 e0       	ldi	r25, 0x00	; 0
    4884:	a0 e0       	ldi	r26, 0x00	; 0
    4886:	b0 e0       	ldi	r27, 0x00	; 0
    4888:	80 93 28 02 	sts	0x0228, r24
    488c:	90 93 29 02 	sts	0x0229, r25
    4890:	a0 93 2a 02 	sts	0x022A, r26
    4894:	b0 93 2b 02 	sts	0x022B, r27
	HLCD_voidWriteString("Welcome :)");				/* Start Open Mode */
    4898:	87 e9       	ldi	r24, 0x97	; 151
    489a:	90 e0       	ldi	r25, 0x00	; 0
    489c:	0e 94 cd 18 	call	0x319a	; 0x319a <HLCD_voidWriteString>
    48a0:	fe 01       	movw	r30, r28
    48a2:	e3 59       	subi	r30, 0x93	; 147
    48a4:	ff 4f       	sbci	r31, 0xFF	; 255
    48a6:	80 e0       	ldi	r24, 0x00	; 0
    48a8:	90 e0       	ldi	r25, 0x00	; 0
    48aa:	aa e7       	ldi	r26, 0x7A	; 122
    48ac:	b4 e4       	ldi	r27, 0x44	; 68
    48ae:	80 83       	st	Z, r24
    48b0:	91 83       	std	Z+1, r25	; 0x01
    48b2:	a2 83       	std	Z+2, r26	; 0x02
    48b4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    48b6:	8e 01       	movw	r16, r28
    48b8:	07 59       	subi	r16, 0x97	; 151
    48ba:	1f 4f       	sbci	r17, 0xFF	; 255
    48bc:	fe 01       	movw	r30, r28
    48be:	e3 59       	subi	r30, 0x93	; 147
    48c0:	ff 4f       	sbci	r31, 0xFF	; 255
    48c2:	60 81       	ld	r22, Z
    48c4:	71 81       	ldd	r23, Z+1	; 0x01
    48c6:	82 81       	ldd	r24, Z+2	; 0x02
    48c8:	93 81       	ldd	r25, Z+3	; 0x03
    48ca:	20 e0       	ldi	r18, 0x00	; 0
    48cc:	30 e0       	ldi	r19, 0x00	; 0
    48ce:	4a ef       	ldi	r20, 0xFA	; 250
    48d0:	54 e4       	ldi	r21, 0x44	; 68
    48d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    48d6:	dc 01       	movw	r26, r24
    48d8:	cb 01       	movw	r24, r22
    48da:	f8 01       	movw	r30, r16
    48dc:	80 83       	st	Z, r24
    48de:	91 83       	std	Z+1, r25	; 0x01
    48e0:	a2 83       	std	Z+2, r26	; 0x02
    48e2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    48e4:	fe 01       	movw	r30, r28
    48e6:	e7 59       	subi	r30, 0x97	; 151
    48e8:	ff 4f       	sbci	r31, 0xFF	; 255
    48ea:	60 81       	ld	r22, Z
    48ec:	71 81       	ldd	r23, Z+1	; 0x01
    48ee:	82 81       	ldd	r24, Z+2	; 0x02
    48f0:	93 81       	ldd	r25, Z+3	; 0x03
    48f2:	20 e0       	ldi	r18, 0x00	; 0
    48f4:	30 e0       	ldi	r19, 0x00	; 0
    48f6:	40 e8       	ldi	r20, 0x80	; 128
    48f8:	5f e3       	ldi	r21, 0x3F	; 63
    48fa:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    48fe:	88 23       	and	r24, r24
    4900:	44 f4       	brge	.+16     	; 0x4912 <OpenSystem+0xac>
		__ticks = 1;
    4902:	fe 01       	movw	r30, r28
    4904:	e9 59       	subi	r30, 0x99	; 153
    4906:	ff 4f       	sbci	r31, 0xFF	; 255
    4908:	81 e0       	ldi	r24, 0x01	; 1
    490a:	90 e0       	ldi	r25, 0x00	; 0
    490c:	91 83       	std	Z+1, r25	; 0x01
    490e:	80 83       	st	Z, r24
    4910:	64 c0       	rjmp	.+200    	; 0x49da <OpenSystem+0x174>
	else if (__tmp > 65535)
    4912:	fe 01       	movw	r30, r28
    4914:	e7 59       	subi	r30, 0x97	; 151
    4916:	ff 4f       	sbci	r31, 0xFF	; 255
    4918:	60 81       	ld	r22, Z
    491a:	71 81       	ldd	r23, Z+1	; 0x01
    491c:	82 81       	ldd	r24, Z+2	; 0x02
    491e:	93 81       	ldd	r25, Z+3	; 0x03
    4920:	20 e0       	ldi	r18, 0x00	; 0
    4922:	3f ef       	ldi	r19, 0xFF	; 255
    4924:	4f e7       	ldi	r20, 0x7F	; 127
    4926:	57 e4       	ldi	r21, 0x47	; 71
    4928:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    492c:	18 16       	cp	r1, r24
    492e:	0c f0       	brlt	.+2      	; 0x4932 <OpenSystem+0xcc>
    4930:	43 c0       	rjmp	.+134    	; 0x49b8 <OpenSystem+0x152>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4932:	fe 01       	movw	r30, r28
    4934:	e3 59       	subi	r30, 0x93	; 147
    4936:	ff 4f       	sbci	r31, 0xFF	; 255
    4938:	60 81       	ld	r22, Z
    493a:	71 81       	ldd	r23, Z+1	; 0x01
    493c:	82 81       	ldd	r24, Z+2	; 0x02
    493e:	93 81       	ldd	r25, Z+3	; 0x03
    4940:	20 e0       	ldi	r18, 0x00	; 0
    4942:	30 e0       	ldi	r19, 0x00	; 0
    4944:	40 e2       	ldi	r20, 0x20	; 32
    4946:	51 e4       	ldi	r21, 0x41	; 65
    4948:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    494c:	dc 01       	movw	r26, r24
    494e:	cb 01       	movw	r24, r22
    4950:	8e 01       	movw	r16, r28
    4952:	09 59       	subi	r16, 0x99	; 153
    4954:	1f 4f       	sbci	r17, 0xFF	; 255
    4956:	bc 01       	movw	r22, r24
    4958:	cd 01       	movw	r24, r26
    495a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    495e:	dc 01       	movw	r26, r24
    4960:	cb 01       	movw	r24, r22
    4962:	f8 01       	movw	r30, r16
    4964:	91 83       	std	Z+1, r25	; 0x01
    4966:	80 83       	st	Z, r24
    4968:	1f c0       	rjmp	.+62     	; 0x49a8 <OpenSystem+0x142>
    496a:	fe 01       	movw	r30, r28
    496c:	eb 59       	subi	r30, 0x9B	; 155
    496e:	ff 4f       	sbci	r31, 0xFF	; 255
    4970:	88 ec       	ldi	r24, 0xC8	; 200
    4972:	90 e0       	ldi	r25, 0x00	; 0
    4974:	91 83       	std	Z+1, r25	; 0x01
    4976:	80 83       	st	Z, r24
    4978:	fe 01       	movw	r30, r28
    497a:	eb 59       	subi	r30, 0x9B	; 155
    497c:	ff 4f       	sbci	r31, 0xFF	; 255
    497e:	80 81       	ld	r24, Z
    4980:	91 81       	ldd	r25, Z+1	; 0x01
    4982:	01 97       	sbiw	r24, 0x01	; 1
    4984:	f1 f7       	brne	.-4      	; 0x4982 <OpenSystem+0x11c>
    4986:	fe 01       	movw	r30, r28
    4988:	eb 59       	subi	r30, 0x9B	; 155
    498a:	ff 4f       	sbci	r31, 0xFF	; 255
    498c:	91 83       	std	Z+1, r25	; 0x01
    498e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4990:	de 01       	movw	r26, r28
    4992:	a9 59       	subi	r26, 0x99	; 153
    4994:	bf 4f       	sbci	r27, 0xFF	; 255
    4996:	fe 01       	movw	r30, r28
    4998:	e9 59       	subi	r30, 0x99	; 153
    499a:	ff 4f       	sbci	r31, 0xFF	; 255
    499c:	80 81       	ld	r24, Z
    499e:	91 81       	ldd	r25, Z+1	; 0x01
    49a0:	01 97       	sbiw	r24, 0x01	; 1
    49a2:	11 96       	adiw	r26, 0x01	; 1
    49a4:	9c 93       	st	X, r25
    49a6:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    49a8:	fe 01       	movw	r30, r28
    49aa:	e9 59       	subi	r30, 0x99	; 153
    49ac:	ff 4f       	sbci	r31, 0xFF	; 255
    49ae:	80 81       	ld	r24, Z
    49b0:	91 81       	ldd	r25, Z+1	; 0x01
    49b2:	00 97       	sbiw	r24, 0x00	; 0
    49b4:	d1 f6       	brne	.-76     	; 0x496a <OpenSystem+0x104>
    49b6:	27 c0       	rjmp	.+78     	; 0x4a06 <OpenSystem+0x1a0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    49b8:	8e 01       	movw	r16, r28
    49ba:	09 59       	subi	r16, 0x99	; 153
    49bc:	1f 4f       	sbci	r17, 0xFF	; 255
    49be:	fe 01       	movw	r30, r28
    49c0:	e7 59       	subi	r30, 0x97	; 151
    49c2:	ff 4f       	sbci	r31, 0xFF	; 255
    49c4:	60 81       	ld	r22, Z
    49c6:	71 81       	ldd	r23, Z+1	; 0x01
    49c8:	82 81       	ldd	r24, Z+2	; 0x02
    49ca:	93 81       	ldd	r25, Z+3	; 0x03
    49cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    49d0:	dc 01       	movw	r26, r24
    49d2:	cb 01       	movw	r24, r22
    49d4:	f8 01       	movw	r30, r16
    49d6:	91 83       	std	Z+1, r25	; 0x01
    49d8:	80 83       	st	Z, r24
    49da:	de 01       	movw	r26, r28
    49dc:	ad 59       	subi	r26, 0x9D	; 157
    49de:	bf 4f       	sbci	r27, 0xFF	; 255
    49e0:	fe 01       	movw	r30, r28
    49e2:	e9 59       	subi	r30, 0x99	; 153
    49e4:	ff 4f       	sbci	r31, 0xFF	; 255
    49e6:	80 81       	ld	r24, Z
    49e8:	91 81       	ldd	r25, Z+1	; 0x01
    49ea:	8d 93       	st	X+, r24
    49ec:	9c 93       	st	X, r25
    49ee:	fe 01       	movw	r30, r28
    49f0:	ed 59       	subi	r30, 0x9D	; 157
    49f2:	ff 4f       	sbci	r31, 0xFF	; 255
    49f4:	80 81       	ld	r24, Z
    49f6:	91 81       	ldd	r25, Z+1	; 0x01
    49f8:	01 97       	sbiw	r24, 0x01	; 1
    49fa:	f1 f7       	brne	.-4      	; 0x49f8 <OpenSystem+0x192>
    49fc:	fe 01       	movw	r30, r28
    49fe:	ed 59       	subi	r30, 0x9D	; 157
    4a00:	ff 4f       	sbci	r31, 0xFF	; 255
    4a02:	91 83       	std	Z+1, r25	; 0x01
    4a04:	80 83       	st	Z, r24
	_delay_ms(1000);
	while(WrongCounter >=0)		/*Loop Just 3 Times */
	{
		index=0;			  				// Return the counter of array of password in beginning
    4a06:	10 92 66 02 	sts	0x0266, r1
		HLCD_voidClear();
    4a0a:	0e 94 f7 18 	call	0x31ee	; 0x31ee <HLCD_voidClear>
		HLCD_voidWriteString("Your Password:");
    4a0e:	82 ea       	ldi	r24, 0xA2	; 162
    4a10:	90 e0       	ldi	r25, 0x00	; 0
    4a12:	0e 94 cd 18 	call	0x319a	; 0x319a <HLCD_voidWriteString>
		HLCD_voidGoTo(1, 1);
    4a16:	81 e0       	ldi	r24, 0x01	; 1
    4a18:	61 e0       	ldi	r22, 0x01	; 1
    4a1a:	0e 94 7f 19 	call	0x32fe	; 0x32fe <HLCD_voidGoTo>
    4a1e:	fc c0       	rjmp	.+504    	; 0x4c18 <OpenSystem+0x3b2>
		while(u8KpdOutput != 'e')	/*The user should press enter to take the password*/
		{
			if(u8KpdOutput == 'c')		/*if the user press Clear the password*/
    4a20:	80 91 6f 02 	lds	r24, 0x026F
    4a24:	83 36       	cpi	r24, 0x63	; 99
    4a26:	61 f4       	brne	.+24     	; 0x4a40 <OpenSystem+0x1da>
			{
				HLCD_voidClear();
    4a28:	0e 94 f7 18 	call	0x31ee	; 0x31ee <HLCD_voidClear>
				HLCD_voidWriteString("Your Password:");
    4a2c:	82 ea       	ldi	r24, 0xA2	; 162
    4a2e:	90 e0       	ldi	r25, 0x00	; 0
    4a30:	0e 94 cd 18 	call	0x319a	; 0x319a <HLCD_voidWriteString>
				HLCD_voidGoTo(1, 1);
    4a34:	81 e0       	ldi	r24, 0x01	; 1
    4a36:	61 e0       	ldi	r22, 0x01	; 1
    4a38:	0e 94 7f 19 	call	0x32fe	; 0x32fe <HLCD_voidGoTo>
				index = 0;
    4a3c:	10 92 66 02 	sts	0x0266, r1
			}
			if(u8KpdOutput >= '1' && u8KpdOutput <= '6')	/*Make sure the data from 1 to 6 to display it*/
    4a40:	80 91 6f 02 	lds	r24, 0x026F
    4a44:	81 33       	cpi	r24, 0x31	; 49
    4a46:	08 f4       	brcc	.+2      	; 0x4a4a <OpenSystem+0x1e4>
    4a48:	d6 c0       	rjmp	.+428    	; 0x4bf6 <OpenSystem+0x390>
    4a4a:	80 91 6f 02 	lds	r24, 0x026F
    4a4e:	87 33       	cpi	r24, 0x37	; 55
    4a50:	08 f0       	brcs	.+2      	; 0x4a54 <OpenSystem+0x1ee>
    4a52:	d1 c0       	rjmp	.+418    	; 0x4bf6 <OpenSystem+0x390>
			{
				HLCD_voidWriteChracter(u8KpdOutput);
    4a54:	80 91 6f 02 	lds	r24, 0x026F
    4a58:	0e 94 66 17 	call	0x2ecc	; 0x2ecc <HLCD_voidWriteChracter>
    4a5c:	fe 01       	movw	r30, r28
    4a5e:	e1 5a       	subi	r30, 0xA1	; 161
    4a60:	ff 4f       	sbci	r31, 0xFF	; 255
    4a62:	80 e0       	ldi	r24, 0x00	; 0
    4a64:	90 e0       	ldi	r25, 0x00	; 0
    4a66:	a0 e2       	ldi	r26, 0x20	; 32
    4a68:	b1 e4       	ldi	r27, 0x41	; 65
    4a6a:	80 83       	st	Z, r24
    4a6c:	91 83       	std	Z+1, r25	; 0x01
    4a6e:	a2 83       	std	Z+2, r26	; 0x02
    4a70:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4a72:	8e 01       	movw	r16, r28
    4a74:	05 5a       	subi	r16, 0xA5	; 165
    4a76:	1f 4f       	sbci	r17, 0xFF	; 255
    4a78:	fe 01       	movw	r30, r28
    4a7a:	e1 5a       	subi	r30, 0xA1	; 161
    4a7c:	ff 4f       	sbci	r31, 0xFF	; 255
    4a7e:	60 81       	ld	r22, Z
    4a80:	71 81       	ldd	r23, Z+1	; 0x01
    4a82:	82 81       	ldd	r24, Z+2	; 0x02
    4a84:	93 81       	ldd	r25, Z+3	; 0x03
    4a86:	20 e0       	ldi	r18, 0x00	; 0
    4a88:	30 e0       	ldi	r19, 0x00	; 0
    4a8a:	4a ef       	ldi	r20, 0xFA	; 250
    4a8c:	54 e4       	ldi	r21, 0x44	; 68
    4a8e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4a92:	dc 01       	movw	r26, r24
    4a94:	cb 01       	movw	r24, r22
    4a96:	f8 01       	movw	r30, r16
    4a98:	80 83       	st	Z, r24
    4a9a:	91 83       	std	Z+1, r25	; 0x01
    4a9c:	a2 83       	std	Z+2, r26	; 0x02
    4a9e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4aa0:	fe 01       	movw	r30, r28
    4aa2:	e5 5a       	subi	r30, 0xA5	; 165
    4aa4:	ff 4f       	sbci	r31, 0xFF	; 255
    4aa6:	60 81       	ld	r22, Z
    4aa8:	71 81       	ldd	r23, Z+1	; 0x01
    4aaa:	82 81       	ldd	r24, Z+2	; 0x02
    4aac:	93 81       	ldd	r25, Z+3	; 0x03
    4aae:	20 e0       	ldi	r18, 0x00	; 0
    4ab0:	30 e0       	ldi	r19, 0x00	; 0
    4ab2:	40 e8       	ldi	r20, 0x80	; 128
    4ab4:	5f e3       	ldi	r21, 0x3F	; 63
    4ab6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4aba:	88 23       	and	r24, r24
    4abc:	44 f4       	brge	.+16     	; 0x4ace <OpenSystem+0x268>
		__ticks = 1;
    4abe:	fe 01       	movw	r30, r28
    4ac0:	e7 5a       	subi	r30, 0xA7	; 167
    4ac2:	ff 4f       	sbci	r31, 0xFF	; 255
    4ac4:	81 e0       	ldi	r24, 0x01	; 1
    4ac6:	90 e0       	ldi	r25, 0x00	; 0
    4ac8:	91 83       	std	Z+1, r25	; 0x01
    4aca:	80 83       	st	Z, r24
    4acc:	64 c0       	rjmp	.+200    	; 0x4b96 <OpenSystem+0x330>
	else if (__tmp > 65535)
    4ace:	fe 01       	movw	r30, r28
    4ad0:	e5 5a       	subi	r30, 0xA5	; 165
    4ad2:	ff 4f       	sbci	r31, 0xFF	; 255
    4ad4:	60 81       	ld	r22, Z
    4ad6:	71 81       	ldd	r23, Z+1	; 0x01
    4ad8:	82 81       	ldd	r24, Z+2	; 0x02
    4ada:	93 81       	ldd	r25, Z+3	; 0x03
    4adc:	20 e0       	ldi	r18, 0x00	; 0
    4ade:	3f ef       	ldi	r19, 0xFF	; 255
    4ae0:	4f e7       	ldi	r20, 0x7F	; 127
    4ae2:	57 e4       	ldi	r21, 0x47	; 71
    4ae4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4ae8:	18 16       	cp	r1, r24
    4aea:	0c f0       	brlt	.+2      	; 0x4aee <OpenSystem+0x288>
    4aec:	43 c0       	rjmp	.+134    	; 0x4b74 <OpenSystem+0x30e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4aee:	fe 01       	movw	r30, r28
    4af0:	e1 5a       	subi	r30, 0xA1	; 161
    4af2:	ff 4f       	sbci	r31, 0xFF	; 255
    4af4:	60 81       	ld	r22, Z
    4af6:	71 81       	ldd	r23, Z+1	; 0x01
    4af8:	82 81       	ldd	r24, Z+2	; 0x02
    4afa:	93 81       	ldd	r25, Z+3	; 0x03
    4afc:	20 e0       	ldi	r18, 0x00	; 0
    4afe:	30 e0       	ldi	r19, 0x00	; 0
    4b00:	40 e2       	ldi	r20, 0x20	; 32
    4b02:	51 e4       	ldi	r21, 0x41	; 65
    4b04:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4b08:	dc 01       	movw	r26, r24
    4b0a:	cb 01       	movw	r24, r22
    4b0c:	8e 01       	movw	r16, r28
    4b0e:	07 5a       	subi	r16, 0xA7	; 167
    4b10:	1f 4f       	sbci	r17, 0xFF	; 255
    4b12:	bc 01       	movw	r22, r24
    4b14:	cd 01       	movw	r24, r26
    4b16:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4b1a:	dc 01       	movw	r26, r24
    4b1c:	cb 01       	movw	r24, r22
    4b1e:	f8 01       	movw	r30, r16
    4b20:	91 83       	std	Z+1, r25	; 0x01
    4b22:	80 83       	st	Z, r24
    4b24:	1f c0       	rjmp	.+62     	; 0x4b64 <OpenSystem+0x2fe>
    4b26:	fe 01       	movw	r30, r28
    4b28:	e9 5a       	subi	r30, 0xA9	; 169
    4b2a:	ff 4f       	sbci	r31, 0xFF	; 255
    4b2c:	88 ec       	ldi	r24, 0xC8	; 200
    4b2e:	90 e0       	ldi	r25, 0x00	; 0
    4b30:	91 83       	std	Z+1, r25	; 0x01
    4b32:	80 83       	st	Z, r24
    4b34:	fe 01       	movw	r30, r28
    4b36:	e9 5a       	subi	r30, 0xA9	; 169
    4b38:	ff 4f       	sbci	r31, 0xFF	; 255
    4b3a:	80 81       	ld	r24, Z
    4b3c:	91 81       	ldd	r25, Z+1	; 0x01
    4b3e:	01 97       	sbiw	r24, 0x01	; 1
    4b40:	f1 f7       	brne	.-4      	; 0x4b3e <OpenSystem+0x2d8>
    4b42:	fe 01       	movw	r30, r28
    4b44:	e9 5a       	subi	r30, 0xA9	; 169
    4b46:	ff 4f       	sbci	r31, 0xFF	; 255
    4b48:	91 83       	std	Z+1, r25	; 0x01
    4b4a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4b4c:	de 01       	movw	r26, r28
    4b4e:	a7 5a       	subi	r26, 0xA7	; 167
    4b50:	bf 4f       	sbci	r27, 0xFF	; 255
    4b52:	fe 01       	movw	r30, r28
    4b54:	e7 5a       	subi	r30, 0xA7	; 167
    4b56:	ff 4f       	sbci	r31, 0xFF	; 255
    4b58:	80 81       	ld	r24, Z
    4b5a:	91 81       	ldd	r25, Z+1	; 0x01
    4b5c:	01 97       	sbiw	r24, 0x01	; 1
    4b5e:	11 96       	adiw	r26, 0x01	; 1
    4b60:	9c 93       	st	X, r25
    4b62:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4b64:	fe 01       	movw	r30, r28
    4b66:	e7 5a       	subi	r30, 0xA7	; 167
    4b68:	ff 4f       	sbci	r31, 0xFF	; 255
    4b6a:	80 81       	ld	r24, Z
    4b6c:	91 81       	ldd	r25, Z+1	; 0x01
    4b6e:	00 97       	sbiw	r24, 0x00	; 0
    4b70:	d1 f6       	brne	.-76     	; 0x4b26 <OpenSystem+0x2c0>
    4b72:	27 c0       	rjmp	.+78     	; 0x4bc2 <OpenSystem+0x35c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4b74:	8e 01       	movw	r16, r28
    4b76:	07 5a       	subi	r16, 0xA7	; 167
    4b78:	1f 4f       	sbci	r17, 0xFF	; 255
    4b7a:	fe 01       	movw	r30, r28
    4b7c:	e5 5a       	subi	r30, 0xA5	; 165
    4b7e:	ff 4f       	sbci	r31, 0xFF	; 255
    4b80:	60 81       	ld	r22, Z
    4b82:	71 81       	ldd	r23, Z+1	; 0x01
    4b84:	82 81       	ldd	r24, Z+2	; 0x02
    4b86:	93 81       	ldd	r25, Z+3	; 0x03
    4b88:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4b8c:	dc 01       	movw	r26, r24
    4b8e:	cb 01       	movw	r24, r22
    4b90:	f8 01       	movw	r30, r16
    4b92:	91 83       	std	Z+1, r25	; 0x01
    4b94:	80 83       	st	Z, r24
    4b96:	de 01       	movw	r26, r28
    4b98:	ab 5a       	subi	r26, 0xAB	; 171
    4b9a:	bf 4f       	sbci	r27, 0xFF	; 255
    4b9c:	fe 01       	movw	r30, r28
    4b9e:	e7 5a       	subi	r30, 0xA7	; 167
    4ba0:	ff 4f       	sbci	r31, 0xFF	; 255
    4ba2:	80 81       	ld	r24, Z
    4ba4:	91 81       	ldd	r25, Z+1	; 0x01
    4ba6:	8d 93       	st	X+, r24
    4ba8:	9c 93       	st	X, r25
    4baa:	fe 01       	movw	r30, r28
    4bac:	eb 5a       	subi	r30, 0xAB	; 171
    4bae:	ff 4f       	sbci	r31, 0xFF	; 255
    4bb0:	80 81       	ld	r24, Z
    4bb2:	91 81       	ldd	r25, Z+1	; 0x01
    4bb4:	01 97       	sbiw	r24, 0x01	; 1
    4bb6:	f1 f7       	brne	.-4      	; 0x4bb4 <OpenSystem+0x34e>
    4bb8:	fe 01       	movw	r30, r28
    4bba:	eb 5a       	subi	r30, 0xAB	; 171
    4bbc:	ff 4f       	sbci	r31, 0xFF	; 255
    4bbe:	91 83       	std	Z+1, r25	; 0x01
    4bc0:	80 83       	st	Z, r24
				_delay_ms(10);
				HLCD_voidGoTo(1,index+1);                      /* Go to the same position */
    4bc2:	80 91 66 02 	lds	r24, 0x0266
    4bc6:	98 2f       	mov	r25, r24
    4bc8:	9f 5f       	subi	r25, 0xFF	; 255
    4bca:	81 e0       	ldi	r24, 0x01	; 1
    4bcc:	69 2f       	mov	r22, r25
    4bce:	0e 94 7f 19 	call	0x32fe	; 0x32fe <HLCD_voidGoTo>
				HLCD_voidWriteChracter('*');							  /* 		to write *       */
    4bd2:	8a e2       	ldi	r24, 0x2A	; 42
    4bd4:	0e 94 66 17 	call	0x2ecc	; 0x2ecc <HLCD_voidWriteChracter>
				passwordData[index]= u8KpdOutput;
    4bd8:	80 91 66 02 	lds	r24, 0x0266
    4bdc:	88 2f       	mov	r24, r24
    4bde:	90 e0       	ldi	r25, 0x00	; 0
    4be0:	20 91 6f 02 	lds	r18, 0x026F
    4be4:	fc 01       	movw	r30, r24
    4be6:	e2 5e       	subi	r30, 0xE2	; 226
    4be8:	fd 4f       	sbci	r31, 0xFD	; 253
    4bea:	20 83       	st	Z, r18
				index++;
    4bec:	80 91 66 02 	lds	r24, 0x0266
    4bf0:	8f 5f       	subi	r24, 0xFF	; 255
    4bf2:	80 93 66 02 	sts	0x0266, r24
				//HLCD_voidWriteChracter("Welcome");
			}

			u8KpdOutput = KPD_U8GetPressedKey();				/* Wait until user 		*/
    4bf6:	0e 94 c3 1b 	call	0x3786	; 0x3786 <KPD_U8GetPressedKey>
    4bfa:	80 93 6f 02 	sts	0x026F, r24
    4bfe:	04 c0       	rjmp	.+8      	; 0x4c08 <OpenSystem+0x3a2>
			while(u8KpdOutput == NO_PRESSED_KEY_VALUE)			/*	press any key 		*/
			{
				u8KpdOutput = KPD_U8GetPressedKey();
    4c00:	0e 94 c3 1b 	call	0x3786	; 0x3786 <KPD_U8GetPressedKey>
    4c04:	80 93 6f 02 	sts	0x026F, r24
				index++;
				//HLCD_voidWriteChracter("Welcome");
			}

			u8KpdOutput = KPD_U8GetPressedKey();				/* Wait until user 		*/
			while(u8KpdOutput == NO_PRESSED_KEY_VALUE)			/*	press any key 		*/
    4c08:	80 91 6f 02 	lds	r24, 0x026F
    4c0c:	8f 3f       	cpi	r24, 0xFF	; 255
    4c0e:	c1 f3       	breq	.-16     	; 0x4c00 <OpenSystem+0x39a>
			{
				u8KpdOutput = KPD_U8GetPressedKey();
			}
			HBUZ_voidOnce(DIO_PIN6,DIO_PORTD);
    4c10:	86 e0       	ldi	r24, 0x06	; 6
    4c12:	63 e0       	ldi	r22, 0x03	; 3
    4c14:	0e 94 e9 1c 	call	0x39d2	; 0x39d2 <HBUZ_voidOnce>
	{
		index=0;			  				// Return the counter of array of password in beginning
		HLCD_voidClear();
		HLCD_voidWriteString("Your Password:");
		HLCD_voidGoTo(1, 1);
		while(u8KpdOutput != 'e')	/*The user should press enter to take the password*/
    4c18:	80 91 6f 02 	lds	r24, 0x026F
    4c1c:	85 36       	cpi	r24, 0x65	; 101
    4c1e:	09 f0       	breq	.+2      	; 0x4c22 <OpenSystem+0x3bc>
    4c20:	ff ce       	rjmp	.-514    	; 0x4a20 <OpenSystem+0x1ba>
			{
				u8KpdOutput = KPD_U8GetPressedKey();
			}
			HBUZ_voidOnce(DIO_PIN6,DIO_PORTD);
		}
		passwordData[index]='\0';							 /*End the password with \0 to make sure*/
    4c22:	80 91 66 02 	lds	r24, 0x0266
    4c26:	88 2f       	mov	r24, r24
    4c28:	90 e0       	ldi	r25, 0x00	; 0
    4c2a:	fc 01       	movw	r30, r24
    4c2c:	e2 5e       	subi	r30, 0xE2	; 226
    4c2e:	fd 4f       	sbci	r31, 0xFD	; 253
    4c30:	10 82       	st	Z, r1
		u8KpdOutput =NO_PRESSED_KEY_VALUE;                   /* Clear the data from KPD output  */
    4c32:	8f ef       	ldi	r24, 0xFF	; 255
    4c34:	80 93 6f 02 	sts	0x026F, r24
		HLCD_voidClear();
    4c38:	0e 94 f7 18 	call	0x31ee	; 0x31ee <HLCD_voidClear>
		/*Check the pass*/
		if(passwordData[0]=='1' && passwordData[1]=='2' && passwordData[2]=='3' && passwordData[3]=='4')
    4c3c:	80 91 1e 02 	lds	r24, 0x021E
    4c40:	81 33       	cpi	r24, 0x31	; 49
    4c42:	09 f0       	breq	.+2      	; 0x4c46 <OpenSystem+0x3e0>
    4c44:	dc c1       	rjmp	.+952    	; 0x4ffe <OpenSystem+0x798>
    4c46:	80 91 1f 02 	lds	r24, 0x021F
    4c4a:	82 33       	cpi	r24, 0x32	; 50
    4c4c:	09 f0       	breq	.+2      	; 0x4c50 <OpenSystem+0x3ea>
    4c4e:	d7 c1       	rjmp	.+942    	; 0x4ffe <OpenSystem+0x798>
    4c50:	80 91 20 02 	lds	r24, 0x0220
    4c54:	83 33       	cpi	r24, 0x33	; 51
    4c56:	09 f0       	breq	.+2      	; 0x4c5a <OpenSystem+0x3f4>
    4c58:	d2 c1       	rjmp	.+932    	; 0x4ffe <OpenSystem+0x798>
    4c5a:	80 91 21 02 	lds	r24, 0x0221
    4c5e:	84 33       	cpi	r24, 0x34	; 52
    4c60:	09 f0       	breq	.+2      	; 0x4c64 <OpenSystem+0x3fe>
    4c62:	cd c1       	rjmp	.+922    	; 0x4ffe <OpenSystem+0x798>
		{
			// Display Message on LCD The Password Correct
			HLCD_voidWriteString("Success :) ");
    4c64:	81 eb       	ldi	r24, 0xB1	; 177
    4c66:	90 e0       	ldi	r25, 0x00	; 0
    4c68:	0e 94 cd 18 	call	0x319a	; 0x319a <HLCD_voidWriteString>
			HLCD_voidGoTo(1, 0);
    4c6c:	81 e0       	ldi	r24, 0x01	; 1
    4c6e:	60 e0       	ldi	r22, 0x00	; 0
    4c70:	0e 94 7f 19 	call	0x32fe	; 0x32fe <HLCD_voidGoTo>
			HLCD_voidWriteString("System Opening....");
    4c74:	8d eb       	ldi	r24, 0xBD	; 189
    4c76:	90 e0       	ldi	r25, 0x00	; 0
    4c78:	0e 94 cd 18 	call	0x319a	; 0x319a <HLCD_voidWriteString>
    4c7c:	fe 01       	movw	r30, r28
    4c7e:	ef 5a       	subi	r30, 0xAF	; 175
    4c80:	ff 4f       	sbci	r31, 0xFF	; 255
    4c82:	80 e0       	ldi	r24, 0x00	; 0
    4c84:	90 e0       	ldi	r25, 0x00	; 0
    4c86:	aa ef       	ldi	r26, 0xFA	; 250
    4c88:	b3 e4       	ldi	r27, 0x43	; 67
    4c8a:	80 83       	st	Z, r24
    4c8c:	91 83       	std	Z+1, r25	; 0x01
    4c8e:	a2 83       	std	Z+2, r26	; 0x02
    4c90:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4c92:	8e 01       	movw	r16, r28
    4c94:	03 5b       	subi	r16, 0xB3	; 179
    4c96:	1f 4f       	sbci	r17, 0xFF	; 255
    4c98:	fe 01       	movw	r30, r28
    4c9a:	ef 5a       	subi	r30, 0xAF	; 175
    4c9c:	ff 4f       	sbci	r31, 0xFF	; 255
    4c9e:	60 81       	ld	r22, Z
    4ca0:	71 81       	ldd	r23, Z+1	; 0x01
    4ca2:	82 81       	ldd	r24, Z+2	; 0x02
    4ca4:	93 81       	ldd	r25, Z+3	; 0x03
    4ca6:	20 e0       	ldi	r18, 0x00	; 0
    4ca8:	30 e0       	ldi	r19, 0x00	; 0
    4caa:	4a ef       	ldi	r20, 0xFA	; 250
    4cac:	54 e4       	ldi	r21, 0x44	; 68
    4cae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4cb2:	dc 01       	movw	r26, r24
    4cb4:	cb 01       	movw	r24, r22
    4cb6:	f8 01       	movw	r30, r16
    4cb8:	80 83       	st	Z, r24
    4cba:	91 83       	std	Z+1, r25	; 0x01
    4cbc:	a2 83       	std	Z+2, r26	; 0x02
    4cbe:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4cc0:	fe 01       	movw	r30, r28
    4cc2:	e3 5b       	subi	r30, 0xB3	; 179
    4cc4:	ff 4f       	sbci	r31, 0xFF	; 255
    4cc6:	60 81       	ld	r22, Z
    4cc8:	71 81       	ldd	r23, Z+1	; 0x01
    4cca:	82 81       	ldd	r24, Z+2	; 0x02
    4ccc:	93 81       	ldd	r25, Z+3	; 0x03
    4cce:	20 e0       	ldi	r18, 0x00	; 0
    4cd0:	30 e0       	ldi	r19, 0x00	; 0
    4cd2:	40 e8       	ldi	r20, 0x80	; 128
    4cd4:	5f e3       	ldi	r21, 0x3F	; 63
    4cd6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4cda:	88 23       	and	r24, r24
    4cdc:	44 f4       	brge	.+16     	; 0x4cee <OpenSystem+0x488>
		__ticks = 1;
    4cde:	fe 01       	movw	r30, r28
    4ce0:	e5 5b       	subi	r30, 0xB5	; 181
    4ce2:	ff 4f       	sbci	r31, 0xFF	; 255
    4ce4:	81 e0       	ldi	r24, 0x01	; 1
    4ce6:	90 e0       	ldi	r25, 0x00	; 0
    4ce8:	91 83       	std	Z+1, r25	; 0x01
    4cea:	80 83       	st	Z, r24
    4cec:	64 c0       	rjmp	.+200    	; 0x4db6 <OpenSystem+0x550>
	else if (__tmp > 65535)
    4cee:	fe 01       	movw	r30, r28
    4cf0:	e3 5b       	subi	r30, 0xB3	; 179
    4cf2:	ff 4f       	sbci	r31, 0xFF	; 255
    4cf4:	60 81       	ld	r22, Z
    4cf6:	71 81       	ldd	r23, Z+1	; 0x01
    4cf8:	82 81       	ldd	r24, Z+2	; 0x02
    4cfa:	93 81       	ldd	r25, Z+3	; 0x03
    4cfc:	20 e0       	ldi	r18, 0x00	; 0
    4cfe:	3f ef       	ldi	r19, 0xFF	; 255
    4d00:	4f e7       	ldi	r20, 0x7F	; 127
    4d02:	57 e4       	ldi	r21, 0x47	; 71
    4d04:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4d08:	18 16       	cp	r1, r24
    4d0a:	0c f0       	brlt	.+2      	; 0x4d0e <OpenSystem+0x4a8>
    4d0c:	43 c0       	rjmp	.+134    	; 0x4d94 <OpenSystem+0x52e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4d0e:	fe 01       	movw	r30, r28
    4d10:	ef 5a       	subi	r30, 0xAF	; 175
    4d12:	ff 4f       	sbci	r31, 0xFF	; 255
    4d14:	60 81       	ld	r22, Z
    4d16:	71 81       	ldd	r23, Z+1	; 0x01
    4d18:	82 81       	ldd	r24, Z+2	; 0x02
    4d1a:	93 81       	ldd	r25, Z+3	; 0x03
    4d1c:	20 e0       	ldi	r18, 0x00	; 0
    4d1e:	30 e0       	ldi	r19, 0x00	; 0
    4d20:	40 e2       	ldi	r20, 0x20	; 32
    4d22:	51 e4       	ldi	r21, 0x41	; 65
    4d24:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4d28:	dc 01       	movw	r26, r24
    4d2a:	cb 01       	movw	r24, r22
    4d2c:	8e 01       	movw	r16, r28
    4d2e:	05 5b       	subi	r16, 0xB5	; 181
    4d30:	1f 4f       	sbci	r17, 0xFF	; 255
    4d32:	bc 01       	movw	r22, r24
    4d34:	cd 01       	movw	r24, r26
    4d36:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4d3a:	dc 01       	movw	r26, r24
    4d3c:	cb 01       	movw	r24, r22
    4d3e:	f8 01       	movw	r30, r16
    4d40:	91 83       	std	Z+1, r25	; 0x01
    4d42:	80 83       	st	Z, r24
    4d44:	1f c0       	rjmp	.+62     	; 0x4d84 <OpenSystem+0x51e>
    4d46:	fe 01       	movw	r30, r28
    4d48:	e7 5b       	subi	r30, 0xB7	; 183
    4d4a:	ff 4f       	sbci	r31, 0xFF	; 255
    4d4c:	88 ec       	ldi	r24, 0xC8	; 200
    4d4e:	90 e0       	ldi	r25, 0x00	; 0
    4d50:	91 83       	std	Z+1, r25	; 0x01
    4d52:	80 83       	st	Z, r24
    4d54:	fe 01       	movw	r30, r28
    4d56:	e7 5b       	subi	r30, 0xB7	; 183
    4d58:	ff 4f       	sbci	r31, 0xFF	; 255
    4d5a:	80 81       	ld	r24, Z
    4d5c:	91 81       	ldd	r25, Z+1	; 0x01
    4d5e:	01 97       	sbiw	r24, 0x01	; 1
    4d60:	f1 f7       	brne	.-4      	; 0x4d5e <OpenSystem+0x4f8>
    4d62:	fe 01       	movw	r30, r28
    4d64:	e7 5b       	subi	r30, 0xB7	; 183
    4d66:	ff 4f       	sbci	r31, 0xFF	; 255
    4d68:	91 83       	std	Z+1, r25	; 0x01
    4d6a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4d6c:	de 01       	movw	r26, r28
    4d6e:	a5 5b       	subi	r26, 0xB5	; 181
    4d70:	bf 4f       	sbci	r27, 0xFF	; 255
    4d72:	fe 01       	movw	r30, r28
    4d74:	e5 5b       	subi	r30, 0xB5	; 181
    4d76:	ff 4f       	sbci	r31, 0xFF	; 255
    4d78:	80 81       	ld	r24, Z
    4d7a:	91 81       	ldd	r25, Z+1	; 0x01
    4d7c:	01 97       	sbiw	r24, 0x01	; 1
    4d7e:	11 96       	adiw	r26, 0x01	; 1
    4d80:	9c 93       	st	X, r25
    4d82:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4d84:	fe 01       	movw	r30, r28
    4d86:	e5 5b       	subi	r30, 0xB5	; 181
    4d88:	ff 4f       	sbci	r31, 0xFF	; 255
    4d8a:	80 81       	ld	r24, Z
    4d8c:	91 81       	ldd	r25, Z+1	; 0x01
    4d8e:	00 97       	sbiw	r24, 0x00	; 0
    4d90:	d1 f6       	brne	.-76     	; 0x4d46 <OpenSystem+0x4e0>
    4d92:	27 c0       	rjmp	.+78     	; 0x4de2 <OpenSystem+0x57c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4d94:	8e 01       	movw	r16, r28
    4d96:	05 5b       	subi	r16, 0xB5	; 181
    4d98:	1f 4f       	sbci	r17, 0xFF	; 255
    4d9a:	fe 01       	movw	r30, r28
    4d9c:	e3 5b       	subi	r30, 0xB3	; 179
    4d9e:	ff 4f       	sbci	r31, 0xFF	; 255
    4da0:	60 81       	ld	r22, Z
    4da2:	71 81       	ldd	r23, Z+1	; 0x01
    4da4:	82 81       	ldd	r24, Z+2	; 0x02
    4da6:	93 81       	ldd	r25, Z+3	; 0x03
    4da8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4dac:	dc 01       	movw	r26, r24
    4dae:	cb 01       	movw	r24, r22
    4db0:	f8 01       	movw	r30, r16
    4db2:	91 83       	std	Z+1, r25	; 0x01
    4db4:	80 83       	st	Z, r24
    4db6:	de 01       	movw	r26, r28
    4db8:	a9 5b       	subi	r26, 0xB9	; 185
    4dba:	bf 4f       	sbci	r27, 0xFF	; 255
    4dbc:	fe 01       	movw	r30, r28
    4dbe:	e5 5b       	subi	r30, 0xB5	; 181
    4dc0:	ff 4f       	sbci	r31, 0xFF	; 255
    4dc2:	80 81       	ld	r24, Z
    4dc4:	91 81       	ldd	r25, Z+1	; 0x01
    4dc6:	8d 93       	st	X+, r24
    4dc8:	9c 93       	st	X, r25
    4dca:	fe 01       	movw	r30, r28
    4dcc:	e9 5b       	subi	r30, 0xB9	; 185
    4dce:	ff 4f       	sbci	r31, 0xFF	; 255
    4dd0:	80 81       	ld	r24, Z
    4dd2:	91 81       	ldd	r25, Z+1	; 0x01
    4dd4:	01 97       	sbiw	r24, 0x01	; 1
    4dd6:	f1 f7       	brne	.-4      	; 0x4dd4 <OpenSystem+0x56e>
    4dd8:	fe 01       	movw	r30, r28
    4dda:	e9 5b       	subi	r30, 0xB9	; 185
    4ddc:	ff 4f       	sbci	r31, 0xFF	; 255
    4dde:	91 83       	std	Z+1, r25	; 0x01
    4de0:	80 83       	st	Z, r24
			_delay_ms(500);
			HLCD_voidClear();
    4de2:	0e 94 f7 18 	call	0x31ee	; 0x31ee <HLCD_voidClear>
			HLCD_voidWriteString("Door Opened");
    4de6:	80 ed       	ldi	r24, 0xD0	; 208
    4de8:	90 e0       	ldi	r25, 0x00	; 0
    4dea:	0e 94 cd 18 	call	0x319a	; 0x319a <HLCD_voidWriteString>
			SERVO_INIT(700);
    4dee:	8c eb       	ldi	r24, 0xBC	; 188
    4df0:	92 e0       	ldi	r25, 0x02	; 2
    4df2:	0e 94 a0 12 	call	0x2540	; 0x2540 <SERVO_INIT>
    4df6:	fe 01       	movw	r30, r28
    4df8:	ed 5b       	subi	r30, 0xBD	; 189
    4dfa:	ff 4f       	sbci	r31, 0xFF	; 255
    4dfc:	80 e0       	ldi	r24, 0x00	; 0
    4dfe:	90 e0       	ldi	r25, 0x00	; 0
    4e00:	aa ef       	ldi	r26, 0xFA	; 250
    4e02:	b4 e4       	ldi	r27, 0x44	; 68
    4e04:	80 83       	st	Z, r24
    4e06:	91 83       	std	Z+1, r25	; 0x01
    4e08:	a2 83       	std	Z+2, r26	; 0x02
    4e0a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4e0c:	8e 01       	movw	r16, r28
    4e0e:	01 5c       	subi	r16, 0xC1	; 193
    4e10:	1f 4f       	sbci	r17, 0xFF	; 255
    4e12:	fe 01       	movw	r30, r28
    4e14:	ed 5b       	subi	r30, 0xBD	; 189
    4e16:	ff 4f       	sbci	r31, 0xFF	; 255
    4e18:	60 81       	ld	r22, Z
    4e1a:	71 81       	ldd	r23, Z+1	; 0x01
    4e1c:	82 81       	ldd	r24, Z+2	; 0x02
    4e1e:	93 81       	ldd	r25, Z+3	; 0x03
    4e20:	20 e0       	ldi	r18, 0x00	; 0
    4e22:	30 e0       	ldi	r19, 0x00	; 0
    4e24:	4a ef       	ldi	r20, 0xFA	; 250
    4e26:	54 e4       	ldi	r21, 0x44	; 68
    4e28:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4e2c:	dc 01       	movw	r26, r24
    4e2e:	cb 01       	movw	r24, r22
    4e30:	f8 01       	movw	r30, r16
    4e32:	80 83       	st	Z, r24
    4e34:	91 83       	std	Z+1, r25	; 0x01
    4e36:	a2 83       	std	Z+2, r26	; 0x02
    4e38:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4e3a:	fe 01       	movw	r30, r28
    4e3c:	ff 96       	adiw	r30, 0x3f	; 63
    4e3e:	60 81       	ld	r22, Z
    4e40:	71 81       	ldd	r23, Z+1	; 0x01
    4e42:	82 81       	ldd	r24, Z+2	; 0x02
    4e44:	93 81       	ldd	r25, Z+3	; 0x03
    4e46:	20 e0       	ldi	r18, 0x00	; 0
    4e48:	30 e0       	ldi	r19, 0x00	; 0
    4e4a:	40 e8       	ldi	r20, 0x80	; 128
    4e4c:	5f e3       	ldi	r21, 0x3F	; 63
    4e4e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4e52:	88 23       	and	r24, r24
    4e54:	2c f4       	brge	.+10     	; 0x4e60 <OpenSystem+0x5fa>
		__ticks = 1;
    4e56:	81 e0       	ldi	r24, 0x01	; 1
    4e58:	90 e0       	ldi	r25, 0x00	; 0
    4e5a:	9e af       	std	Y+62, r25	; 0x3e
    4e5c:	8d af       	std	Y+61, r24	; 0x3d
    4e5e:	46 c0       	rjmp	.+140    	; 0x4eec <OpenSystem+0x686>
	else if (__tmp > 65535)
    4e60:	fe 01       	movw	r30, r28
    4e62:	ff 96       	adiw	r30, 0x3f	; 63
    4e64:	60 81       	ld	r22, Z
    4e66:	71 81       	ldd	r23, Z+1	; 0x01
    4e68:	82 81       	ldd	r24, Z+2	; 0x02
    4e6a:	93 81       	ldd	r25, Z+3	; 0x03
    4e6c:	20 e0       	ldi	r18, 0x00	; 0
    4e6e:	3f ef       	ldi	r19, 0xFF	; 255
    4e70:	4f e7       	ldi	r20, 0x7F	; 127
    4e72:	57 e4       	ldi	r21, 0x47	; 71
    4e74:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4e78:	18 16       	cp	r1, r24
    4e7a:	64 f5       	brge	.+88     	; 0x4ed4 <OpenSystem+0x66e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4e7c:	fe 01       	movw	r30, r28
    4e7e:	ed 5b       	subi	r30, 0xBD	; 189
    4e80:	ff 4f       	sbci	r31, 0xFF	; 255
    4e82:	60 81       	ld	r22, Z
    4e84:	71 81       	ldd	r23, Z+1	; 0x01
    4e86:	82 81       	ldd	r24, Z+2	; 0x02
    4e88:	93 81       	ldd	r25, Z+3	; 0x03
    4e8a:	20 e0       	ldi	r18, 0x00	; 0
    4e8c:	30 e0       	ldi	r19, 0x00	; 0
    4e8e:	40 e2       	ldi	r20, 0x20	; 32
    4e90:	51 e4       	ldi	r21, 0x41	; 65
    4e92:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4e96:	dc 01       	movw	r26, r24
    4e98:	cb 01       	movw	r24, r22
    4e9a:	bc 01       	movw	r22, r24
    4e9c:	cd 01       	movw	r24, r26
    4e9e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4ea2:	dc 01       	movw	r26, r24
    4ea4:	cb 01       	movw	r24, r22
    4ea6:	9e af       	std	Y+62, r25	; 0x3e
    4ea8:	8d af       	std	Y+61, r24	; 0x3d
    4eaa:	0f c0       	rjmp	.+30     	; 0x4eca <OpenSystem+0x664>
    4eac:	88 ec       	ldi	r24, 0xC8	; 200
    4eae:	90 e0       	ldi	r25, 0x00	; 0
    4eb0:	9c af       	std	Y+60, r25	; 0x3c
    4eb2:	8b af       	std	Y+59, r24	; 0x3b
    4eb4:	8b ad       	ldd	r24, Y+59	; 0x3b
    4eb6:	9c ad       	ldd	r25, Y+60	; 0x3c
    4eb8:	01 97       	sbiw	r24, 0x01	; 1
    4eba:	f1 f7       	brne	.-4      	; 0x4eb8 <OpenSystem+0x652>
    4ebc:	9c af       	std	Y+60, r25	; 0x3c
    4ebe:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4ec0:	8d ad       	ldd	r24, Y+61	; 0x3d
    4ec2:	9e ad       	ldd	r25, Y+62	; 0x3e
    4ec4:	01 97       	sbiw	r24, 0x01	; 1
    4ec6:	9e af       	std	Y+62, r25	; 0x3e
    4ec8:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4eca:	8d ad       	ldd	r24, Y+61	; 0x3d
    4ecc:	9e ad       	ldd	r25, Y+62	; 0x3e
    4ece:	00 97       	sbiw	r24, 0x00	; 0
    4ed0:	69 f7       	brne	.-38     	; 0x4eac <OpenSystem+0x646>
    4ed2:	16 c0       	rjmp	.+44     	; 0x4f00 <OpenSystem+0x69a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4ed4:	fe 01       	movw	r30, r28
    4ed6:	ff 96       	adiw	r30, 0x3f	; 63
    4ed8:	60 81       	ld	r22, Z
    4eda:	71 81       	ldd	r23, Z+1	; 0x01
    4edc:	82 81       	ldd	r24, Z+2	; 0x02
    4ede:	93 81       	ldd	r25, Z+3	; 0x03
    4ee0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4ee4:	dc 01       	movw	r26, r24
    4ee6:	cb 01       	movw	r24, r22
    4ee8:	9e af       	std	Y+62, r25	; 0x3e
    4eea:	8d af       	std	Y+61, r24	; 0x3d
    4eec:	8d ad       	ldd	r24, Y+61	; 0x3d
    4eee:	9e ad       	ldd	r25, Y+62	; 0x3e
    4ef0:	9a af       	std	Y+58, r25	; 0x3a
    4ef2:	89 af       	std	Y+57, r24	; 0x39
    4ef4:	89 ad       	ldd	r24, Y+57	; 0x39
    4ef6:	9a ad       	ldd	r25, Y+58	; 0x3a
    4ef8:	01 97       	sbiw	r24, 0x01	; 1
    4efa:	f1 f7       	brne	.-4      	; 0x4ef8 <OpenSystem+0x692>
    4efc:	9a af       	std	Y+58, r25	; 0x3a
    4efe:	89 af       	std	Y+57, r24	; 0x39
			_delay_ms(2000);
			HLCD_voidClear();
    4f00:	0e 94 f7 18 	call	0x31ee	; 0x31ee <HLCD_voidClear>
			SERVO_INIT(1600);
    4f04:	80 e4       	ldi	r24, 0x40	; 64
    4f06:	96 e0       	ldi	r25, 0x06	; 6
    4f08:	0e 94 a0 12 	call	0x2540	; 0x2540 <SERVO_INIT>
			HLCD_voidWriteString("Good Bye!");
    4f0c:	8c ed       	ldi	r24, 0xDC	; 220
    4f0e:	90 e0       	ldi	r25, 0x00	; 0
    4f10:	0e 94 cd 18 	call	0x319a	; 0x319a <HLCD_voidWriteString>
    4f14:	80 e0       	ldi	r24, 0x00	; 0
    4f16:	90 e0       	ldi	r25, 0x00	; 0
    4f18:	aa ef       	ldi	r26, 0xFA	; 250
    4f1a:	b4 e4       	ldi	r27, 0x44	; 68
    4f1c:	8d ab       	std	Y+53, r24	; 0x35
    4f1e:	9e ab       	std	Y+54, r25	; 0x36
    4f20:	af ab       	std	Y+55, r26	; 0x37
    4f22:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4f24:	6d a9       	ldd	r22, Y+53	; 0x35
    4f26:	7e a9       	ldd	r23, Y+54	; 0x36
    4f28:	8f a9       	ldd	r24, Y+55	; 0x37
    4f2a:	98 ad       	ldd	r25, Y+56	; 0x38
    4f2c:	20 e0       	ldi	r18, 0x00	; 0
    4f2e:	30 e0       	ldi	r19, 0x00	; 0
    4f30:	4a ef       	ldi	r20, 0xFA	; 250
    4f32:	54 e4       	ldi	r21, 0x44	; 68
    4f34:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4f38:	dc 01       	movw	r26, r24
    4f3a:	cb 01       	movw	r24, r22
    4f3c:	89 ab       	std	Y+49, r24	; 0x31
    4f3e:	9a ab       	std	Y+50, r25	; 0x32
    4f40:	ab ab       	std	Y+51, r26	; 0x33
    4f42:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    4f44:	69 a9       	ldd	r22, Y+49	; 0x31
    4f46:	7a a9       	ldd	r23, Y+50	; 0x32
    4f48:	8b a9       	ldd	r24, Y+51	; 0x33
    4f4a:	9c a9       	ldd	r25, Y+52	; 0x34
    4f4c:	20 e0       	ldi	r18, 0x00	; 0
    4f4e:	30 e0       	ldi	r19, 0x00	; 0
    4f50:	40 e8       	ldi	r20, 0x80	; 128
    4f52:	5f e3       	ldi	r21, 0x3F	; 63
    4f54:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4f58:	88 23       	and	r24, r24
    4f5a:	2c f4       	brge	.+10     	; 0x4f66 <OpenSystem+0x700>
		__ticks = 1;
    4f5c:	81 e0       	ldi	r24, 0x01	; 1
    4f5e:	90 e0       	ldi	r25, 0x00	; 0
    4f60:	98 ab       	std	Y+48, r25	; 0x30
    4f62:	8f a7       	std	Y+47, r24	; 0x2f
    4f64:	3f c0       	rjmp	.+126    	; 0x4fe4 <OpenSystem+0x77e>
	else if (__tmp > 65535)
    4f66:	69 a9       	ldd	r22, Y+49	; 0x31
    4f68:	7a a9       	ldd	r23, Y+50	; 0x32
    4f6a:	8b a9       	ldd	r24, Y+51	; 0x33
    4f6c:	9c a9       	ldd	r25, Y+52	; 0x34
    4f6e:	20 e0       	ldi	r18, 0x00	; 0
    4f70:	3f ef       	ldi	r19, 0xFF	; 255
    4f72:	4f e7       	ldi	r20, 0x7F	; 127
    4f74:	57 e4       	ldi	r21, 0x47	; 71
    4f76:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4f7a:	18 16       	cp	r1, r24
    4f7c:	4c f5       	brge	.+82     	; 0x4fd0 <OpenSystem+0x76a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4f7e:	6d a9       	ldd	r22, Y+53	; 0x35
    4f80:	7e a9       	ldd	r23, Y+54	; 0x36
    4f82:	8f a9       	ldd	r24, Y+55	; 0x37
    4f84:	98 ad       	ldd	r25, Y+56	; 0x38
    4f86:	20 e0       	ldi	r18, 0x00	; 0
    4f88:	30 e0       	ldi	r19, 0x00	; 0
    4f8a:	40 e2       	ldi	r20, 0x20	; 32
    4f8c:	51 e4       	ldi	r21, 0x41	; 65
    4f8e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4f92:	dc 01       	movw	r26, r24
    4f94:	cb 01       	movw	r24, r22
    4f96:	bc 01       	movw	r22, r24
    4f98:	cd 01       	movw	r24, r26
    4f9a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4f9e:	dc 01       	movw	r26, r24
    4fa0:	cb 01       	movw	r24, r22
    4fa2:	98 ab       	std	Y+48, r25	; 0x30
    4fa4:	8f a7       	std	Y+47, r24	; 0x2f
    4fa6:	0f c0       	rjmp	.+30     	; 0x4fc6 <OpenSystem+0x760>
    4fa8:	88 ec       	ldi	r24, 0xC8	; 200
    4faa:	90 e0       	ldi	r25, 0x00	; 0
    4fac:	9e a7       	std	Y+46, r25	; 0x2e
    4fae:	8d a7       	std	Y+45, r24	; 0x2d
    4fb0:	8d a5       	ldd	r24, Y+45	; 0x2d
    4fb2:	9e a5       	ldd	r25, Y+46	; 0x2e
    4fb4:	01 97       	sbiw	r24, 0x01	; 1
    4fb6:	f1 f7       	brne	.-4      	; 0x4fb4 <OpenSystem+0x74e>
    4fb8:	9e a7       	std	Y+46, r25	; 0x2e
    4fba:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4fbc:	8f a5       	ldd	r24, Y+47	; 0x2f
    4fbe:	98 a9       	ldd	r25, Y+48	; 0x30
    4fc0:	01 97       	sbiw	r24, 0x01	; 1
    4fc2:	98 ab       	std	Y+48, r25	; 0x30
    4fc4:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4fc6:	8f a5       	ldd	r24, Y+47	; 0x2f
    4fc8:	98 a9       	ldd	r25, Y+48	; 0x30
    4fca:	00 97       	sbiw	r24, 0x00	; 0
    4fcc:	69 f7       	brne	.-38     	; 0x4fa8 <OpenSystem+0x742>
    4fce:	14 c0       	rjmp	.+40     	; 0x4ff8 <OpenSystem+0x792>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4fd0:	69 a9       	ldd	r22, Y+49	; 0x31
    4fd2:	7a a9       	ldd	r23, Y+50	; 0x32
    4fd4:	8b a9       	ldd	r24, Y+51	; 0x33
    4fd6:	9c a9       	ldd	r25, Y+52	; 0x34
    4fd8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4fdc:	dc 01       	movw	r26, r24
    4fde:	cb 01       	movw	r24, r22
    4fe0:	98 ab       	std	Y+48, r25	; 0x30
    4fe2:	8f a7       	std	Y+47, r24	; 0x2f
    4fe4:	8f a5       	ldd	r24, Y+47	; 0x2f
    4fe6:	98 a9       	ldd	r25, Y+48	; 0x30
    4fe8:	9c a7       	std	Y+44, r25	; 0x2c
    4fea:	8b a7       	std	Y+43, r24	; 0x2b
    4fec:	8b a5       	ldd	r24, Y+43	; 0x2b
    4fee:	9c a5       	ldd	r25, Y+44	; 0x2c
    4ff0:	01 97       	sbiw	r24, 0x01	; 1
    4ff2:	f1 f7       	brne	.-4      	; 0x4ff0 <OpenSystem+0x78a>
    4ff4:	9c a7       	std	Y+44, r25	; 0x2c
    4ff6:	8b a7       	std	Y+43, r24	; 0x2b
			_delay_ms(2000);
			HLCD_voidClear();
    4ff8:	0e 94 f7 18 	call	0x31ee	; 0x31ee <HLCD_voidClear>
    4ffc:	a4 c1       	rjmp	.+840    	; 0x5346 <OpenSystem+0xae0>
			break;
		}
		else
		{
			// Display Message on LCD The Password Wrong
			HBUZ_voidTwice(DIO_PIN6,DIO_PORTD);
    4ffe:	86 e0       	ldi	r24, 0x06	; 6
    5000:	63 e0       	ldi	r22, 0x03	; 3
    5002:	0e 94 7a 1d 	call	0x3af4	; 0x3af4 <HBUZ_voidTwice>
			HLCD_voidWriteString("Wrong :( ");
    5006:	86 ee       	ldi	r24, 0xE6	; 230
    5008:	90 e0       	ldi	r25, 0x00	; 0
    500a:	0e 94 cd 18 	call	0x319a	; 0x319a <HLCD_voidWriteString>
    500e:	80 e0       	ldi	r24, 0x00	; 0
    5010:	90 e0       	ldi	r25, 0x00	; 0
    5012:	aa ef       	ldi	r26, 0xFA	; 250
    5014:	b3 e4       	ldi	r27, 0x43	; 67
    5016:	8f a3       	std	Y+39, r24	; 0x27
    5018:	98 a7       	std	Y+40, r25	; 0x28
    501a:	a9 a7       	std	Y+41, r26	; 0x29
    501c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    501e:	6f a1       	ldd	r22, Y+39	; 0x27
    5020:	78 a5       	ldd	r23, Y+40	; 0x28
    5022:	89 a5       	ldd	r24, Y+41	; 0x29
    5024:	9a a5       	ldd	r25, Y+42	; 0x2a
    5026:	20 e0       	ldi	r18, 0x00	; 0
    5028:	30 e0       	ldi	r19, 0x00	; 0
    502a:	4a ef       	ldi	r20, 0xFA	; 250
    502c:	54 e4       	ldi	r21, 0x44	; 68
    502e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5032:	dc 01       	movw	r26, r24
    5034:	cb 01       	movw	r24, r22
    5036:	8b a3       	std	Y+35, r24	; 0x23
    5038:	9c a3       	std	Y+36, r25	; 0x24
    503a:	ad a3       	std	Y+37, r26	; 0x25
    503c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    503e:	6b a1       	ldd	r22, Y+35	; 0x23
    5040:	7c a1       	ldd	r23, Y+36	; 0x24
    5042:	8d a1       	ldd	r24, Y+37	; 0x25
    5044:	9e a1       	ldd	r25, Y+38	; 0x26
    5046:	20 e0       	ldi	r18, 0x00	; 0
    5048:	30 e0       	ldi	r19, 0x00	; 0
    504a:	40 e8       	ldi	r20, 0x80	; 128
    504c:	5f e3       	ldi	r21, 0x3F	; 63
    504e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    5052:	88 23       	and	r24, r24
    5054:	2c f4       	brge	.+10     	; 0x5060 <OpenSystem+0x7fa>
		__ticks = 1;
    5056:	81 e0       	ldi	r24, 0x01	; 1
    5058:	90 e0       	ldi	r25, 0x00	; 0
    505a:	9a a3       	std	Y+34, r25	; 0x22
    505c:	89 a3       	std	Y+33, r24	; 0x21
    505e:	3f c0       	rjmp	.+126    	; 0x50de <OpenSystem+0x878>
	else if (__tmp > 65535)
    5060:	6b a1       	ldd	r22, Y+35	; 0x23
    5062:	7c a1       	ldd	r23, Y+36	; 0x24
    5064:	8d a1       	ldd	r24, Y+37	; 0x25
    5066:	9e a1       	ldd	r25, Y+38	; 0x26
    5068:	20 e0       	ldi	r18, 0x00	; 0
    506a:	3f ef       	ldi	r19, 0xFF	; 255
    506c:	4f e7       	ldi	r20, 0x7F	; 127
    506e:	57 e4       	ldi	r21, 0x47	; 71
    5070:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    5074:	18 16       	cp	r1, r24
    5076:	4c f5       	brge	.+82     	; 0x50ca <OpenSystem+0x864>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5078:	6f a1       	ldd	r22, Y+39	; 0x27
    507a:	78 a5       	ldd	r23, Y+40	; 0x28
    507c:	89 a5       	ldd	r24, Y+41	; 0x29
    507e:	9a a5       	ldd	r25, Y+42	; 0x2a
    5080:	20 e0       	ldi	r18, 0x00	; 0
    5082:	30 e0       	ldi	r19, 0x00	; 0
    5084:	40 e2       	ldi	r20, 0x20	; 32
    5086:	51 e4       	ldi	r21, 0x41	; 65
    5088:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    508c:	dc 01       	movw	r26, r24
    508e:	cb 01       	movw	r24, r22
    5090:	bc 01       	movw	r22, r24
    5092:	cd 01       	movw	r24, r26
    5094:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5098:	dc 01       	movw	r26, r24
    509a:	cb 01       	movw	r24, r22
    509c:	9a a3       	std	Y+34, r25	; 0x22
    509e:	89 a3       	std	Y+33, r24	; 0x21
    50a0:	0f c0       	rjmp	.+30     	; 0x50c0 <OpenSystem+0x85a>
    50a2:	88 ec       	ldi	r24, 0xC8	; 200
    50a4:	90 e0       	ldi	r25, 0x00	; 0
    50a6:	98 a3       	std	Y+32, r25	; 0x20
    50a8:	8f 8f       	std	Y+31, r24	; 0x1f
    50aa:	8f 8d       	ldd	r24, Y+31	; 0x1f
    50ac:	98 a1       	ldd	r25, Y+32	; 0x20
    50ae:	01 97       	sbiw	r24, 0x01	; 1
    50b0:	f1 f7       	brne	.-4      	; 0x50ae <OpenSystem+0x848>
    50b2:	98 a3       	std	Y+32, r25	; 0x20
    50b4:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    50b6:	89 a1       	ldd	r24, Y+33	; 0x21
    50b8:	9a a1       	ldd	r25, Y+34	; 0x22
    50ba:	01 97       	sbiw	r24, 0x01	; 1
    50bc:	9a a3       	std	Y+34, r25	; 0x22
    50be:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    50c0:	89 a1       	ldd	r24, Y+33	; 0x21
    50c2:	9a a1       	ldd	r25, Y+34	; 0x22
    50c4:	00 97       	sbiw	r24, 0x00	; 0
    50c6:	69 f7       	brne	.-38     	; 0x50a2 <OpenSystem+0x83c>
    50c8:	14 c0       	rjmp	.+40     	; 0x50f2 <OpenSystem+0x88c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    50ca:	6b a1       	ldd	r22, Y+35	; 0x23
    50cc:	7c a1       	ldd	r23, Y+36	; 0x24
    50ce:	8d a1       	ldd	r24, Y+37	; 0x25
    50d0:	9e a1       	ldd	r25, Y+38	; 0x26
    50d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    50d6:	dc 01       	movw	r26, r24
    50d8:	cb 01       	movw	r24, r22
    50da:	9a a3       	std	Y+34, r25	; 0x22
    50dc:	89 a3       	std	Y+33, r24	; 0x21
    50de:	89 a1       	ldd	r24, Y+33	; 0x21
    50e0:	9a a1       	ldd	r25, Y+34	; 0x22
    50e2:	9e 8f       	std	Y+30, r25	; 0x1e
    50e4:	8d 8f       	std	Y+29, r24	; 0x1d
    50e6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    50e8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    50ea:	01 97       	sbiw	r24, 0x01	; 1
    50ec:	f1 f7       	brne	.-4      	; 0x50ea <OpenSystem+0x884>
    50ee:	9e 8f       	std	Y+30, r25	; 0x1e
    50f0:	8d 8f       	std	Y+29, r24	; 0x1d
			_delay_ms(500);
			HLCD_voidClear();
    50f2:	0e 94 f7 18 	call	0x31ee	; 0x31ee <HLCD_voidClear>

			// Close the system when WrongCounter = 0 you don't have any chance
			if(WrongCounter == 0)
    50f6:	80 91 28 02 	lds	r24, 0x0228
    50fa:	90 91 29 02 	lds	r25, 0x0229
    50fe:	a0 91 2a 02 	lds	r26, 0x022A
    5102:	b0 91 2b 02 	lds	r27, 0x022B
    5106:	00 97       	sbiw	r24, 0x00	; 0
    5108:	a1 05       	cpc	r26, r1
    510a:	b1 05       	cpc	r27, r1
    510c:	09 f0       	breq	.+2      	; 0x5110 <OpenSystem+0x8aa>
    510e:	7b c0       	rjmp	.+246    	; 0x5206 <OpenSystem+0x9a0>
			{
				HLCD_voidClear();
    5110:	0e 94 f7 18 	call	0x31ee	; 0x31ee <HLCD_voidClear>
				HLCD_voidWriteString("System Closing....");
    5114:	80 ef       	ldi	r24, 0xF0	; 240
    5116:	90 e0       	ldi	r25, 0x00	; 0
    5118:	0e 94 cd 18 	call	0x319a	; 0x319a <HLCD_voidWriteString>
    511c:	80 e0       	ldi	r24, 0x00	; 0
    511e:	90 e0       	ldi	r25, 0x00	; 0
    5120:	aa ef       	ldi	r26, 0xFA	; 250
    5122:	b3 e4       	ldi	r27, 0x43	; 67
    5124:	89 8f       	std	Y+25, r24	; 0x19
    5126:	9a 8f       	std	Y+26, r25	; 0x1a
    5128:	ab 8f       	std	Y+27, r26	; 0x1b
    512a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    512c:	69 8d       	ldd	r22, Y+25	; 0x19
    512e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5130:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5132:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5134:	20 e0       	ldi	r18, 0x00	; 0
    5136:	30 e0       	ldi	r19, 0x00	; 0
    5138:	4a ef       	ldi	r20, 0xFA	; 250
    513a:	54 e4       	ldi	r21, 0x44	; 68
    513c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5140:	dc 01       	movw	r26, r24
    5142:	cb 01       	movw	r24, r22
    5144:	8d 8b       	std	Y+21, r24	; 0x15
    5146:	9e 8b       	std	Y+22, r25	; 0x16
    5148:	af 8b       	std	Y+23, r26	; 0x17
    514a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    514c:	6d 89       	ldd	r22, Y+21	; 0x15
    514e:	7e 89       	ldd	r23, Y+22	; 0x16
    5150:	8f 89       	ldd	r24, Y+23	; 0x17
    5152:	98 8d       	ldd	r25, Y+24	; 0x18
    5154:	20 e0       	ldi	r18, 0x00	; 0
    5156:	30 e0       	ldi	r19, 0x00	; 0
    5158:	40 e8       	ldi	r20, 0x80	; 128
    515a:	5f e3       	ldi	r21, 0x3F	; 63
    515c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    5160:	88 23       	and	r24, r24
    5162:	2c f4       	brge	.+10     	; 0x516e <OpenSystem+0x908>
		__ticks = 1;
    5164:	81 e0       	ldi	r24, 0x01	; 1
    5166:	90 e0       	ldi	r25, 0x00	; 0
    5168:	9c 8b       	std	Y+20, r25	; 0x14
    516a:	8b 8b       	std	Y+19, r24	; 0x13
    516c:	3f c0       	rjmp	.+126    	; 0x51ec <OpenSystem+0x986>
	else if (__tmp > 65535)
    516e:	6d 89       	ldd	r22, Y+21	; 0x15
    5170:	7e 89       	ldd	r23, Y+22	; 0x16
    5172:	8f 89       	ldd	r24, Y+23	; 0x17
    5174:	98 8d       	ldd	r25, Y+24	; 0x18
    5176:	20 e0       	ldi	r18, 0x00	; 0
    5178:	3f ef       	ldi	r19, 0xFF	; 255
    517a:	4f e7       	ldi	r20, 0x7F	; 127
    517c:	57 e4       	ldi	r21, 0x47	; 71
    517e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    5182:	18 16       	cp	r1, r24
    5184:	4c f5       	brge	.+82     	; 0x51d8 <OpenSystem+0x972>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5186:	69 8d       	ldd	r22, Y+25	; 0x19
    5188:	7a 8d       	ldd	r23, Y+26	; 0x1a
    518a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    518c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    518e:	20 e0       	ldi	r18, 0x00	; 0
    5190:	30 e0       	ldi	r19, 0x00	; 0
    5192:	40 e2       	ldi	r20, 0x20	; 32
    5194:	51 e4       	ldi	r21, 0x41	; 65
    5196:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    519a:	dc 01       	movw	r26, r24
    519c:	cb 01       	movw	r24, r22
    519e:	bc 01       	movw	r22, r24
    51a0:	cd 01       	movw	r24, r26
    51a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    51a6:	dc 01       	movw	r26, r24
    51a8:	cb 01       	movw	r24, r22
    51aa:	9c 8b       	std	Y+20, r25	; 0x14
    51ac:	8b 8b       	std	Y+19, r24	; 0x13
    51ae:	0f c0       	rjmp	.+30     	; 0x51ce <OpenSystem+0x968>
    51b0:	88 ec       	ldi	r24, 0xC8	; 200
    51b2:	90 e0       	ldi	r25, 0x00	; 0
    51b4:	9a 8b       	std	Y+18, r25	; 0x12
    51b6:	89 8b       	std	Y+17, r24	; 0x11
    51b8:	89 89       	ldd	r24, Y+17	; 0x11
    51ba:	9a 89       	ldd	r25, Y+18	; 0x12
    51bc:	01 97       	sbiw	r24, 0x01	; 1
    51be:	f1 f7       	brne	.-4      	; 0x51bc <OpenSystem+0x956>
    51c0:	9a 8b       	std	Y+18, r25	; 0x12
    51c2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    51c4:	8b 89       	ldd	r24, Y+19	; 0x13
    51c6:	9c 89       	ldd	r25, Y+20	; 0x14
    51c8:	01 97       	sbiw	r24, 0x01	; 1
    51ca:	9c 8b       	std	Y+20, r25	; 0x14
    51cc:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    51ce:	8b 89       	ldd	r24, Y+19	; 0x13
    51d0:	9c 89       	ldd	r25, Y+20	; 0x14
    51d2:	00 97       	sbiw	r24, 0x00	; 0
    51d4:	69 f7       	brne	.-38     	; 0x51b0 <OpenSystem+0x94a>
    51d6:	14 c0       	rjmp	.+40     	; 0x5200 <OpenSystem+0x99a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    51d8:	6d 89       	ldd	r22, Y+21	; 0x15
    51da:	7e 89       	ldd	r23, Y+22	; 0x16
    51dc:	8f 89       	ldd	r24, Y+23	; 0x17
    51de:	98 8d       	ldd	r25, Y+24	; 0x18
    51e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    51e4:	dc 01       	movw	r26, r24
    51e6:	cb 01       	movw	r24, r22
    51e8:	9c 8b       	std	Y+20, r25	; 0x14
    51ea:	8b 8b       	std	Y+19, r24	; 0x13
    51ec:	8b 89       	ldd	r24, Y+19	; 0x13
    51ee:	9c 89       	ldd	r25, Y+20	; 0x14
    51f0:	98 8b       	std	Y+16, r25	; 0x10
    51f2:	8f 87       	std	Y+15, r24	; 0x0f
    51f4:	8f 85       	ldd	r24, Y+15	; 0x0f
    51f6:	98 89       	ldd	r25, Y+16	; 0x10
    51f8:	01 97       	sbiw	r24, 0x01	; 1
    51fa:	f1 f7       	brne	.-4      	; 0x51f8 <OpenSystem+0x992>
    51fc:	98 8b       	std	Y+16, r25	; 0x10
    51fe:	8f 87       	std	Y+15, r24	; 0x0f
				_delay_ms(500);
				index=0;
    5200:	10 92 66 02 	sts	0x0266, r1
    5204:	a0 c0       	rjmp	.+320    	; 0x5346 <OpenSystem+0xae0>
				break;
			}
			HLCD_voidWriteString("Try Again ");
    5206:	83 e0       	ldi	r24, 0x03	; 3
    5208:	91 e0       	ldi	r25, 0x01	; 1
    520a:	0e 94 cd 18 	call	0x319a	; 0x319a <HLCD_voidWriteString>
			HLCD_voidGoTo(1, 3);
    520e:	81 e0       	ldi	r24, 0x01	; 1
    5210:	63 e0       	ldi	r22, 0x03	; 3
    5212:	0e 94 7f 19 	call	0x32fe	; 0x32fe <HLCD_voidGoTo>
			HLCD_voidWriteIntNumber(WrongCounter);
    5216:	80 91 28 02 	lds	r24, 0x0228
    521a:	90 91 29 02 	lds	r25, 0x0229
    521e:	a0 91 2a 02 	lds	r26, 0x022A
    5222:	b0 91 2b 02 	lds	r27, 0x022B
    5226:	bc 01       	movw	r22, r24
    5228:	cd 01       	movw	r24, r26
    522a:	0e 94 a6 19 	call	0x334c	; 0x334c <HLCD_voidWriteIntNumber>
			HLCD_voidWriteString(" Chance");
    522e:	8e e0       	ldi	r24, 0x0E	; 14
    5230:	91 e0       	ldi	r25, 0x01	; 1
    5232:	0e 94 cd 18 	call	0x319a	; 0x319a <HLCD_voidWriteString>
    5236:	80 e0       	ldi	r24, 0x00	; 0
    5238:	90 e0       	ldi	r25, 0x00	; 0
    523a:	aa ef       	ldi	r26, 0xFA	; 250
    523c:	b3 e4       	ldi	r27, 0x43	; 67
    523e:	8b 87       	std	Y+11, r24	; 0x0b
    5240:	9c 87       	std	Y+12, r25	; 0x0c
    5242:	ad 87       	std	Y+13, r26	; 0x0d
    5244:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5246:	6b 85       	ldd	r22, Y+11	; 0x0b
    5248:	7c 85       	ldd	r23, Y+12	; 0x0c
    524a:	8d 85       	ldd	r24, Y+13	; 0x0d
    524c:	9e 85       	ldd	r25, Y+14	; 0x0e
    524e:	20 e0       	ldi	r18, 0x00	; 0
    5250:	30 e0       	ldi	r19, 0x00	; 0
    5252:	4a ef       	ldi	r20, 0xFA	; 250
    5254:	54 e4       	ldi	r21, 0x44	; 68
    5256:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    525a:	dc 01       	movw	r26, r24
    525c:	cb 01       	movw	r24, r22
    525e:	8f 83       	std	Y+7, r24	; 0x07
    5260:	98 87       	std	Y+8, r25	; 0x08
    5262:	a9 87       	std	Y+9, r26	; 0x09
    5264:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    5266:	6f 81       	ldd	r22, Y+7	; 0x07
    5268:	78 85       	ldd	r23, Y+8	; 0x08
    526a:	89 85       	ldd	r24, Y+9	; 0x09
    526c:	9a 85       	ldd	r25, Y+10	; 0x0a
    526e:	20 e0       	ldi	r18, 0x00	; 0
    5270:	30 e0       	ldi	r19, 0x00	; 0
    5272:	40 e8       	ldi	r20, 0x80	; 128
    5274:	5f e3       	ldi	r21, 0x3F	; 63
    5276:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    527a:	88 23       	and	r24, r24
    527c:	2c f4       	brge	.+10     	; 0x5288 <OpenSystem+0xa22>
		__ticks = 1;
    527e:	81 e0       	ldi	r24, 0x01	; 1
    5280:	90 e0       	ldi	r25, 0x00	; 0
    5282:	9e 83       	std	Y+6, r25	; 0x06
    5284:	8d 83       	std	Y+5, r24	; 0x05
    5286:	3f c0       	rjmp	.+126    	; 0x5306 <OpenSystem+0xaa0>
	else if (__tmp > 65535)
    5288:	6f 81       	ldd	r22, Y+7	; 0x07
    528a:	78 85       	ldd	r23, Y+8	; 0x08
    528c:	89 85       	ldd	r24, Y+9	; 0x09
    528e:	9a 85       	ldd	r25, Y+10	; 0x0a
    5290:	20 e0       	ldi	r18, 0x00	; 0
    5292:	3f ef       	ldi	r19, 0xFF	; 255
    5294:	4f e7       	ldi	r20, 0x7F	; 127
    5296:	57 e4       	ldi	r21, 0x47	; 71
    5298:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    529c:	18 16       	cp	r1, r24
    529e:	4c f5       	brge	.+82     	; 0x52f2 <OpenSystem+0xa8c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    52a0:	6b 85       	ldd	r22, Y+11	; 0x0b
    52a2:	7c 85       	ldd	r23, Y+12	; 0x0c
    52a4:	8d 85       	ldd	r24, Y+13	; 0x0d
    52a6:	9e 85       	ldd	r25, Y+14	; 0x0e
    52a8:	20 e0       	ldi	r18, 0x00	; 0
    52aa:	30 e0       	ldi	r19, 0x00	; 0
    52ac:	40 e2       	ldi	r20, 0x20	; 32
    52ae:	51 e4       	ldi	r21, 0x41	; 65
    52b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    52b4:	dc 01       	movw	r26, r24
    52b6:	cb 01       	movw	r24, r22
    52b8:	bc 01       	movw	r22, r24
    52ba:	cd 01       	movw	r24, r26
    52bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    52c0:	dc 01       	movw	r26, r24
    52c2:	cb 01       	movw	r24, r22
    52c4:	9e 83       	std	Y+6, r25	; 0x06
    52c6:	8d 83       	std	Y+5, r24	; 0x05
    52c8:	0f c0       	rjmp	.+30     	; 0x52e8 <OpenSystem+0xa82>
    52ca:	88 ec       	ldi	r24, 0xC8	; 200
    52cc:	90 e0       	ldi	r25, 0x00	; 0
    52ce:	9c 83       	std	Y+4, r25	; 0x04
    52d0:	8b 83       	std	Y+3, r24	; 0x03
    52d2:	8b 81       	ldd	r24, Y+3	; 0x03
    52d4:	9c 81       	ldd	r25, Y+4	; 0x04
    52d6:	01 97       	sbiw	r24, 0x01	; 1
    52d8:	f1 f7       	brne	.-4      	; 0x52d6 <OpenSystem+0xa70>
    52da:	9c 83       	std	Y+4, r25	; 0x04
    52dc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    52de:	8d 81       	ldd	r24, Y+5	; 0x05
    52e0:	9e 81       	ldd	r25, Y+6	; 0x06
    52e2:	01 97       	sbiw	r24, 0x01	; 1
    52e4:	9e 83       	std	Y+6, r25	; 0x06
    52e6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    52e8:	8d 81       	ldd	r24, Y+5	; 0x05
    52ea:	9e 81       	ldd	r25, Y+6	; 0x06
    52ec:	00 97       	sbiw	r24, 0x00	; 0
    52ee:	69 f7       	brne	.-38     	; 0x52ca <OpenSystem+0xa64>
    52f0:	14 c0       	rjmp	.+40     	; 0x531a <OpenSystem+0xab4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    52f2:	6f 81       	ldd	r22, Y+7	; 0x07
    52f4:	78 85       	ldd	r23, Y+8	; 0x08
    52f6:	89 85       	ldd	r24, Y+9	; 0x09
    52f8:	9a 85       	ldd	r25, Y+10	; 0x0a
    52fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    52fe:	dc 01       	movw	r26, r24
    5300:	cb 01       	movw	r24, r22
    5302:	9e 83       	std	Y+6, r25	; 0x06
    5304:	8d 83       	std	Y+5, r24	; 0x05
    5306:	8d 81       	ldd	r24, Y+5	; 0x05
    5308:	9e 81       	ldd	r25, Y+6	; 0x06
    530a:	9a 83       	std	Y+2, r25	; 0x02
    530c:	89 83       	std	Y+1, r24	; 0x01
    530e:	89 81       	ldd	r24, Y+1	; 0x01
    5310:	9a 81       	ldd	r25, Y+2	; 0x02
    5312:	01 97       	sbiw	r24, 0x01	; 1
    5314:	f1 f7       	brne	.-4      	; 0x5312 <OpenSystem+0xaac>
    5316:	9a 83       	std	Y+2, r25	; 0x02
    5318:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(500);
			HLCD_voidClear();
    531a:	0e 94 f7 18 	call	0x31ee	; 0x31ee <HLCD_voidClear>
			WrongCounter--;       // decrease the counter by 1
    531e:	80 91 28 02 	lds	r24, 0x0228
    5322:	90 91 29 02 	lds	r25, 0x0229
    5326:	a0 91 2a 02 	lds	r26, 0x022A
    532a:	b0 91 2b 02 	lds	r27, 0x022B
    532e:	01 97       	sbiw	r24, 0x01	; 1
    5330:	a1 09       	sbc	r26, r1
    5332:	b1 09       	sbc	r27, r1
    5334:	80 93 28 02 	sts	0x0228, r24
    5338:	90 93 29 02 	sts	0x0229, r25
    533c:	a0 93 2a 02 	sts	0x022A, r26
    5340:	b0 93 2b 02 	sts	0x022B, r27
    5344:	60 cb       	rjmp	.-2368   	; 0x4a06 <OpenSystem+0x1a0>
		}
	}
}
    5346:	c0 59       	subi	r28, 0x90	; 144
    5348:	df 4f       	sbci	r29, 0xFF	; 255
    534a:	0f b6       	in	r0, 0x3f	; 63
    534c:	f8 94       	cli
    534e:	de bf       	out	0x3e, r29	; 62
    5350:	0f be       	out	0x3f, r0	; 63
    5352:	cd bf       	out	0x3d, r28	; 61
    5354:	cf 91       	pop	r28
    5356:	df 91       	pop	r29
    5358:	1f 91       	pop	r17
    535a:	0f 91       	pop	r16
    535c:	08 95       	ret

0000535e <__mulsi3>:
    535e:	62 9f       	mul	r22, r18
    5360:	d0 01       	movw	r26, r0
    5362:	73 9f       	mul	r23, r19
    5364:	f0 01       	movw	r30, r0
    5366:	82 9f       	mul	r24, r18
    5368:	e0 0d       	add	r30, r0
    536a:	f1 1d       	adc	r31, r1
    536c:	64 9f       	mul	r22, r20
    536e:	e0 0d       	add	r30, r0
    5370:	f1 1d       	adc	r31, r1
    5372:	92 9f       	mul	r25, r18
    5374:	f0 0d       	add	r31, r0
    5376:	83 9f       	mul	r24, r19
    5378:	f0 0d       	add	r31, r0
    537a:	74 9f       	mul	r23, r20
    537c:	f0 0d       	add	r31, r0
    537e:	65 9f       	mul	r22, r21
    5380:	f0 0d       	add	r31, r0
    5382:	99 27       	eor	r25, r25
    5384:	72 9f       	mul	r23, r18
    5386:	b0 0d       	add	r27, r0
    5388:	e1 1d       	adc	r30, r1
    538a:	f9 1f       	adc	r31, r25
    538c:	63 9f       	mul	r22, r19
    538e:	b0 0d       	add	r27, r0
    5390:	e1 1d       	adc	r30, r1
    5392:	f9 1f       	adc	r31, r25
    5394:	bd 01       	movw	r22, r26
    5396:	cf 01       	movw	r24, r30
    5398:	11 24       	eor	r1, r1
    539a:	08 95       	ret

0000539c <__udivmodhi4>:
    539c:	aa 1b       	sub	r26, r26
    539e:	bb 1b       	sub	r27, r27
    53a0:	51 e1       	ldi	r21, 0x11	; 17
    53a2:	07 c0       	rjmp	.+14     	; 0x53b2 <__udivmodhi4_ep>

000053a4 <__udivmodhi4_loop>:
    53a4:	aa 1f       	adc	r26, r26
    53a6:	bb 1f       	adc	r27, r27
    53a8:	a6 17       	cp	r26, r22
    53aa:	b7 07       	cpc	r27, r23
    53ac:	10 f0       	brcs	.+4      	; 0x53b2 <__udivmodhi4_ep>
    53ae:	a6 1b       	sub	r26, r22
    53b0:	b7 0b       	sbc	r27, r23

000053b2 <__udivmodhi4_ep>:
    53b2:	88 1f       	adc	r24, r24
    53b4:	99 1f       	adc	r25, r25
    53b6:	5a 95       	dec	r21
    53b8:	a9 f7       	brne	.-22     	; 0x53a4 <__udivmodhi4_loop>
    53ba:	80 95       	com	r24
    53bc:	90 95       	com	r25
    53be:	bc 01       	movw	r22, r24
    53c0:	cd 01       	movw	r24, r26
    53c2:	08 95       	ret

000053c4 <__udivmodsi4>:
    53c4:	a1 e2       	ldi	r26, 0x21	; 33
    53c6:	1a 2e       	mov	r1, r26
    53c8:	aa 1b       	sub	r26, r26
    53ca:	bb 1b       	sub	r27, r27
    53cc:	fd 01       	movw	r30, r26
    53ce:	0d c0       	rjmp	.+26     	; 0x53ea <__udivmodsi4_ep>

000053d0 <__udivmodsi4_loop>:
    53d0:	aa 1f       	adc	r26, r26
    53d2:	bb 1f       	adc	r27, r27
    53d4:	ee 1f       	adc	r30, r30
    53d6:	ff 1f       	adc	r31, r31
    53d8:	a2 17       	cp	r26, r18
    53da:	b3 07       	cpc	r27, r19
    53dc:	e4 07       	cpc	r30, r20
    53de:	f5 07       	cpc	r31, r21
    53e0:	20 f0       	brcs	.+8      	; 0x53ea <__udivmodsi4_ep>
    53e2:	a2 1b       	sub	r26, r18
    53e4:	b3 0b       	sbc	r27, r19
    53e6:	e4 0b       	sbc	r30, r20
    53e8:	f5 0b       	sbc	r31, r21

000053ea <__udivmodsi4_ep>:
    53ea:	66 1f       	adc	r22, r22
    53ec:	77 1f       	adc	r23, r23
    53ee:	88 1f       	adc	r24, r24
    53f0:	99 1f       	adc	r25, r25
    53f2:	1a 94       	dec	r1
    53f4:	69 f7       	brne	.-38     	; 0x53d0 <__udivmodsi4_loop>
    53f6:	60 95       	com	r22
    53f8:	70 95       	com	r23
    53fa:	80 95       	com	r24
    53fc:	90 95       	com	r25
    53fe:	9b 01       	movw	r18, r22
    5400:	ac 01       	movw	r20, r24
    5402:	bd 01       	movw	r22, r26
    5404:	cf 01       	movw	r24, r30
    5406:	08 95       	ret

00005408 <__divmodsi4>:
    5408:	97 fb       	bst	r25, 7
    540a:	09 2e       	mov	r0, r25
    540c:	05 26       	eor	r0, r21
    540e:	0e d0       	rcall	.+28     	; 0x542c <__divmodsi4_neg1>
    5410:	57 fd       	sbrc	r21, 7
    5412:	04 d0       	rcall	.+8      	; 0x541c <__divmodsi4_neg2>
    5414:	d7 df       	rcall	.-82     	; 0x53c4 <__udivmodsi4>
    5416:	0a d0       	rcall	.+20     	; 0x542c <__divmodsi4_neg1>
    5418:	00 1c       	adc	r0, r0
    541a:	38 f4       	brcc	.+14     	; 0x542a <__divmodsi4_exit>

0000541c <__divmodsi4_neg2>:
    541c:	50 95       	com	r21
    541e:	40 95       	com	r20
    5420:	30 95       	com	r19
    5422:	21 95       	neg	r18
    5424:	3f 4f       	sbci	r19, 0xFF	; 255
    5426:	4f 4f       	sbci	r20, 0xFF	; 255
    5428:	5f 4f       	sbci	r21, 0xFF	; 255

0000542a <__divmodsi4_exit>:
    542a:	08 95       	ret

0000542c <__divmodsi4_neg1>:
    542c:	f6 f7       	brtc	.-4      	; 0x542a <__divmodsi4_exit>
    542e:	90 95       	com	r25
    5430:	80 95       	com	r24
    5432:	70 95       	com	r23
    5434:	61 95       	neg	r22
    5436:	7f 4f       	sbci	r23, 0xFF	; 255
    5438:	8f 4f       	sbci	r24, 0xFF	; 255
    543a:	9f 4f       	sbci	r25, 0xFF	; 255
    543c:	08 95       	ret

0000543e <__prologue_saves__>:
    543e:	2f 92       	push	r2
    5440:	3f 92       	push	r3
    5442:	4f 92       	push	r4
    5444:	5f 92       	push	r5
    5446:	6f 92       	push	r6
    5448:	7f 92       	push	r7
    544a:	8f 92       	push	r8
    544c:	9f 92       	push	r9
    544e:	af 92       	push	r10
    5450:	bf 92       	push	r11
    5452:	cf 92       	push	r12
    5454:	df 92       	push	r13
    5456:	ef 92       	push	r14
    5458:	ff 92       	push	r15
    545a:	0f 93       	push	r16
    545c:	1f 93       	push	r17
    545e:	cf 93       	push	r28
    5460:	df 93       	push	r29
    5462:	cd b7       	in	r28, 0x3d	; 61
    5464:	de b7       	in	r29, 0x3e	; 62
    5466:	ca 1b       	sub	r28, r26
    5468:	db 0b       	sbc	r29, r27
    546a:	0f b6       	in	r0, 0x3f	; 63
    546c:	f8 94       	cli
    546e:	de bf       	out	0x3e, r29	; 62
    5470:	0f be       	out	0x3f, r0	; 63
    5472:	cd bf       	out	0x3d, r28	; 61
    5474:	09 94       	ijmp

00005476 <__epilogue_restores__>:
    5476:	2a 88       	ldd	r2, Y+18	; 0x12
    5478:	39 88       	ldd	r3, Y+17	; 0x11
    547a:	48 88       	ldd	r4, Y+16	; 0x10
    547c:	5f 84       	ldd	r5, Y+15	; 0x0f
    547e:	6e 84       	ldd	r6, Y+14	; 0x0e
    5480:	7d 84       	ldd	r7, Y+13	; 0x0d
    5482:	8c 84       	ldd	r8, Y+12	; 0x0c
    5484:	9b 84       	ldd	r9, Y+11	; 0x0b
    5486:	aa 84       	ldd	r10, Y+10	; 0x0a
    5488:	b9 84       	ldd	r11, Y+9	; 0x09
    548a:	c8 84       	ldd	r12, Y+8	; 0x08
    548c:	df 80       	ldd	r13, Y+7	; 0x07
    548e:	ee 80       	ldd	r14, Y+6	; 0x06
    5490:	fd 80       	ldd	r15, Y+5	; 0x05
    5492:	0c 81       	ldd	r16, Y+4	; 0x04
    5494:	1b 81       	ldd	r17, Y+3	; 0x03
    5496:	aa 81       	ldd	r26, Y+2	; 0x02
    5498:	b9 81       	ldd	r27, Y+1	; 0x01
    549a:	ce 0f       	add	r28, r30
    549c:	d1 1d       	adc	r29, r1
    549e:	0f b6       	in	r0, 0x3f	; 63
    54a0:	f8 94       	cli
    54a2:	de bf       	out	0x3e, r29	; 62
    54a4:	0f be       	out	0x3f, r0	; 63
    54a6:	cd bf       	out	0x3d, r28	; 61
    54a8:	ed 01       	movw	r28, r26
    54aa:	08 95       	ret

000054ac <_exit>:
    54ac:	f8 94       	cli

000054ae <__stop_program>:
    54ae:	ff cf       	rjmp	.-2      	; 0x54ae <__stop_program>
